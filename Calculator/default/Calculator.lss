
Calculator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000020da  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000128  00800060  000020da  0000216e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000002a  00800188  00800188  00002296  2**0
                  ALLOC
  3 .debug_aranges 00000160  00000000  00000000  00002296  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000003b4  00000000  00000000  000023f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002937  00000000  00000000  000027aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001311  00000000  00000000  000050e1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001deb  00000000  00000000  000063f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000310  00000000  00000000  000081e0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000590  00000000  00000000  000084f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000e70  00000000  00000000  00008a80  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000e0  00000000  00000000  000098f0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 a7 04 	jmp	0x94e	; 0x94e <__vector_1>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea ed       	ldi	r30, 0xDA	; 218
      68:	f0 e2       	ldi	r31, 0x20	; 32
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 38       	cpi	r26, 0x88	; 136
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a8 e8       	ldi	r26, 0x88	; 136
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 3b       	cpi	r26, 0xB2	; 178
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 00 07 	call	0xe00	; 0xe00 <main>
      8a:	0c 94 6b 10 	jmp	0x20d6	; 0x20d6 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <pinChange>:

#include<util/delay.h>

void pinChange(int a, int b)
{
	if(b == 0)
      92:	67 2b       	or	r22, r23
      94:	09 f0       	breq	.+2      	; 0x98 <pinChange+0x6>
      96:	9f c0       	rjmp	.+318    	; 0x1d6 <pinChange+0x144>
	{
		if(a == eS_PORTA0)
      98:	00 97       	sbiw	r24, 0x00	; 0
      9a:	11 f4       	brne	.+4      	; 0xa0 <pinChange+0xe>
		  PORTA &= ~(1<<PA0);
      9c:	d8 98       	cbi	0x1b, 0	; 27
      9e:	08 95       	ret
		else if(a == eS_PORTA1)
      a0:	81 30       	cpi	r24, 0x01	; 1
      a2:	91 05       	cpc	r25, r1
      a4:	11 f4       	brne	.+4      	; 0xaa <pinChange+0x18>
		  PORTA &= ~(1<<PA1); 
      a6:	d9 98       	cbi	0x1b, 1	; 27
      a8:	08 95       	ret
		else if(a == eS_PORTA2)
      aa:	82 30       	cpi	r24, 0x02	; 2
      ac:	91 05       	cpc	r25, r1
      ae:	11 f4       	brne	.+4      	; 0xb4 <pinChange+0x22>
		  PORTA &= ~(1<<PA2);
      b0:	da 98       	cbi	0x1b, 2	; 27
      b2:	08 95       	ret
		else if(a == eS_PORTA3)
      b4:	83 30       	cpi	r24, 0x03	; 3
      b6:	91 05       	cpc	r25, r1
      b8:	11 f4       	brne	.+4      	; 0xbe <pinChange+0x2c>
		  PORTA &= ~(1<<PA3); 
      ba:	db 98       	cbi	0x1b, 3	; 27
      bc:	08 95       	ret
		else if(a == eS_PORTA4)
      be:	84 30       	cpi	r24, 0x04	; 4
      c0:	91 05       	cpc	r25, r1
      c2:	11 f4       	brne	.+4      	; 0xc8 <pinChange+0x36>
		  PORTA &= ~(1<<PA4); 
      c4:	dc 98       	cbi	0x1b, 4	; 27
      c6:	08 95       	ret
		else if(a == eS_PORTA5)
      c8:	85 30       	cpi	r24, 0x05	; 5
      ca:	91 05       	cpc	r25, r1
      cc:	11 f4       	brne	.+4      	; 0xd2 <pinChange+0x40>
		  PORTA &= ~(1<<PA5); 
      ce:	dd 98       	cbi	0x1b, 5	; 27
      d0:	08 95       	ret
		else if(a == eS_PORTA6)
      d2:	86 30       	cpi	r24, 0x06	; 6
      d4:	91 05       	cpc	r25, r1
      d6:	11 f4       	brne	.+4      	; 0xdc <pinChange+0x4a>
		  PORTA &= ~(1<<PA6);  
      d8:	de 98       	cbi	0x1b, 6	; 27
      da:	08 95       	ret
		else if(a == eS_PORTA7)
      dc:	87 30       	cpi	r24, 0x07	; 7
      de:	91 05       	cpc	r25, r1
      e0:	11 f4       	brne	.+4      	; 0xe6 <pinChange+0x54>
		  PORTA &= ~(1<<PA7);
      e2:	df 98       	cbi	0x1b, 7	; 27
      e4:	08 95       	ret
		else if(a == eS_PORTB0)
      e6:	8a 30       	cpi	r24, 0x0A	; 10
      e8:	91 05       	cpc	r25, r1
      ea:	11 f4       	brne	.+4      	; 0xf0 <pinChange+0x5e>
		  PORTB &= ~(1<<PB0);  
      ec:	c0 98       	cbi	0x18, 0	; 24
      ee:	08 95       	ret
		else if(a == eS_PORTB1)
      f0:	8b 30       	cpi	r24, 0x0B	; 11
      f2:	91 05       	cpc	r25, r1
      f4:	11 f4       	brne	.+4      	; 0xfa <pinChange+0x68>
		  PORTB &= ~(1<<PB1);
      f6:	c1 98       	cbi	0x18, 1	; 24
      f8:	08 95       	ret
		else if(a == eS_PORTB2)
      fa:	8c 30       	cpi	r24, 0x0C	; 12
      fc:	91 05       	cpc	r25, r1
      fe:	11 f4       	brne	.+4      	; 0x104 <pinChange+0x72>
		  PORTB &= ~(1<<PB2);  
     100:	c2 98       	cbi	0x18, 2	; 24
     102:	08 95       	ret
		else if(a == eS_PORTB3)
     104:	8d 30       	cpi	r24, 0x0D	; 13
     106:	91 05       	cpc	r25, r1
     108:	11 f4       	brne	.+4      	; 0x10e <pinChange+0x7c>
		  PORTB &= ~(1<<PB3);  
     10a:	c3 98       	cbi	0x18, 3	; 24
     10c:	08 95       	ret
		else if(a == eS_PORTB4)
     10e:	8e 30       	cpi	r24, 0x0E	; 14
     110:	91 05       	cpc	r25, r1
     112:	11 f4       	brne	.+4      	; 0x118 <pinChange+0x86>
		  PORTB &= ~(1<<PB4);  
     114:	c4 98       	cbi	0x18, 4	; 24
     116:	08 95       	ret
		else if(a == eS_PORTB5)
     118:	8f 30       	cpi	r24, 0x0F	; 15
     11a:	91 05       	cpc	r25, r1
     11c:	11 f4       	brne	.+4      	; 0x122 <pinChange+0x90>
		  PORTB &= ~(1<<PB5);  
     11e:	c5 98       	cbi	0x18, 5	; 24
     120:	08 95       	ret
		else if(a == eS_PORTB6)
     122:	80 31       	cpi	r24, 0x10	; 16
     124:	91 05       	cpc	r25, r1
     126:	11 f4       	brne	.+4      	; 0x12c <pinChange+0x9a>
		  PORTB &= ~(1<<PB6);  
     128:	c6 98       	cbi	0x18, 6	; 24
     12a:	08 95       	ret
		else if(a == eS_PORTB7)
     12c:	81 31       	cpi	r24, 0x11	; 17
     12e:	91 05       	cpc	r25, r1
     130:	11 f4       	brne	.+4      	; 0x136 <pinChange+0xa4>
		  PORTB &= ~(1<<PB7);
     132:	c7 98       	cbi	0x18, 7	; 24
     134:	08 95       	ret
		else if(a == eS_PORTC0)
     136:	86 31       	cpi	r24, 0x16	; 22
     138:	91 05       	cpc	r25, r1
     13a:	11 f4       	brne	.+4      	; 0x140 <pinChange+0xae>
		  PORTC &= ~(1<<PC0);   
     13c:	a8 98       	cbi	0x15, 0	; 21
     13e:	08 95       	ret
		else if(a == eS_PORTC1)
     140:	87 31       	cpi	r24, 0x17	; 23
     142:	91 05       	cpc	r25, r1
     144:	11 f4       	brne	.+4      	; 0x14a <pinChange+0xb8>
		  PORTC &= ~(1<<PC1); 
     146:	a9 98       	cbi	0x15, 1	; 21
     148:	08 95       	ret
		else if(a == eS_PORTC2)
     14a:	88 31       	cpi	r24, 0x18	; 24
     14c:	91 05       	cpc	r25, r1
     14e:	11 f4       	brne	.+4      	; 0x154 <pinChange+0xc2>
		  PORTC &= ~(1<<PC2);
     150:	aa 98       	cbi	0x15, 2	; 21
     152:	08 95       	ret
		else if(a == eS_PORTC3)
     154:	89 31       	cpi	r24, 0x19	; 25
     156:	91 05       	cpc	r25, r1
     158:	11 f4       	brne	.+4      	; 0x15e <pinChange+0xcc>
		  PORTC &= ~(1<<PC3);   
     15a:	ab 98       	cbi	0x15, 3	; 21
     15c:	08 95       	ret
		else if(a == eS_PORTC4)
     15e:	8a 31       	cpi	r24, 0x1A	; 26
     160:	91 05       	cpc	r25, r1
     162:	11 f4       	brne	.+4      	; 0x168 <pinChange+0xd6>
		  PORTC &= ~(1<<PC4);  
     164:	ac 98       	cbi	0x15, 4	; 21
     166:	08 95       	ret
		else if(a == eS_PORTC5)
     168:	8b 31       	cpi	r24, 0x1B	; 27
     16a:	91 05       	cpc	r25, r1
     16c:	11 f4       	brne	.+4      	; 0x172 <pinChange+0xe0>
		  PORTC &= ~(1<<PC5);  
     16e:	ad 98       	cbi	0x15, 5	; 21
     170:	08 95       	ret
        else if(a == eS_PORTC6)
     172:	8c 31       	cpi	r24, 0x1C	; 28
     174:	91 05       	cpc	r25, r1
     176:	11 f4       	brne	.+4      	; 0x17c <pinChange+0xea>
          PORTC &= ~(1<<PC6);		
     178:	ae 98       	cbi	0x15, 6	; 21
     17a:	08 95       	ret
		else if(a == eS_PORTC7)
     17c:	8d 31       	cpi	r24, 0x1D	; 29
     17e:	91 05       	cpc	r25, r1
     180:	11 f4       	brne	.+4      	; 0x186 <pinChange+0xf4>
		  PORTC &= ~(1<<PC7);
     182:	af 98       	cbi	0x15, 7	; 21
     184:	08 95       	ret
		else if(a == eS_PORTD0)
     186:	8e 31       	cpi	r24, 0x1E	; 30
     188:	91 05       	cpc	r25, r1
     18a:	11 f4       	brne	.+4      	; 0x190 <pinChange+0xfe>
		  PORTD &= ~(1<<PD0);
     18c:	90 98       	cbi	0x12, 0	; 18
     18e:	08 95       	ret
		else if(a == eS_PORTD1)
     190:	8f 31       	cpi	r24, 0x1F	; 31
     192:	91 05       	cpc	r25, r1
     194:	11 f4       	brne	.+4      	; 0x19a <pinChange+0x108>
		  PORTD &= ~(1<<PD1);  
     196:	91 98       	cbi	0x12, 1	; 18
     198:	08 95       	ret
		else if(a == eS_PORTD2)
     19a:	80 32       	cpi	r24, 0x20	; 32
     19c:	91 05       	cpc	r25, r1
     19e:	11 f4       	brne	.+4      	; 0x1a4 <pinChange+0x112>
		  PORTD &= ~(1<<PD2);
     1a0:	92 98       	cbi	0x12, 2	; 18
     1a2:	08 95       	ret
		else if(a == eS_PORTD3)
     1a4:	81 32       	cpi	r24, 0x21	; 33
     1a6:	91 05       	cpc	r25, r1
     1a8:	11 f4       	brne	.+4      	; 0x1ae <pinChange+0x11c>
		  PORTD &= ~(1<<PD3);
     1aa:	93 98       	cbi	0x12, 3	; 18
     1ac:	08 95       	ret
		else if(a == eS_PORTD4)
     1ae:	82 32       	cpi	r24, 0x22	; 34
     1b0:	91 05       	cpc	r25, r1
     1b2:	11 f4       	brne	.+4      	; 0x1b8 <pinChange+0x126>
		  PORTD &= ~(1<<PD4);
     1b4:	94 98       	cbi	0x12, 4	; 18
     1b6:	08 95       	ret
		else if(a == eS_PORTD5)
     1b8:	83 32       	cpi	r24, 0x23	; 35
     1ba:	91 05       	cpc	r25, r1
     1bc:	11 f4       	brne	.+4      	; 0x1c2 <pinChange+0x130>
		  PORTD &= ~(1<<PD5);
     1be:	95 98       	cbi	0x12, 5	; 18
     1c0:	08 95       	ret
		else if(a == eS_PORTD6)
     1c2:	84 32       	cpi	r24, 0x24	; 36
     1c4:	91 05       	cpc	r25, r1
     1c6:	11 f4       	brne	.+4      	; 0x1cc <pinChange+0x13a>
		  PORTD &= ~(1<<PD6);   
     1c8:	96 98       	cbi	0x12, 6	; 18
     1ca:	08 95       	ret
		else if(a == eS_PORTD7)
     1cc:	85 97       	sbiw	r24, 0x25	; 37
     1ce:	09 f0       	breq	.+2      	; 0x1d2 <pinChange+0x140>
     1d0:	9f c0       	rjmp	.+318    	; 0x310 <pinChange+0x27e>
		  PORTD &= ~(1<<PD7);           
     1d2:	97 98       	cbi	0x12, 7	; 18
     1d4:	08 95       	ret
	}
	else
	{
		if(a == eS_PORTA0)
     1d6:	00 97       	sbiw	r24, 0x00	; 0
     1d8:	11 f4       	brne	.+4      	; 0x1de <pinChange+0x14c>
		  PORTA |= (1<<PA0);
     1da:	d8 9a       	sbi	0x1b, 0	; 27
     1dc:	08 95       	ret
		else if(a == eS_PORTA1)
     1de:	81 30       	cpi	r24, 0x01	; 1
     1e0:	91 05       	cpc	r25, r1
     1e2:	11 f4       	brne	.+4      	; 0x1e8 <pinChange+0x156>
		  PORTA |= (1<<PA1);
     1e4:	d9 9a       	sbi	0x1b, 1	; 27
     1e6:	08 95       	ret
		else if(a == eS_PORTA2)
     1e8:	82 30       	cpi	r24, 0x02	; 2
     1ea:	91 05       	cpc	r25, r1
     1ec:	11 f4       	brne	.+4      	; 0x1f2 <pinChange+0x160>
		  PORTA |= (1<<PA2);
     1ee:	da 9a       	sbi	0x1b, 2	; 27
     1f0:	08 95       	ret
		else if(a == eS_PORTA3)
     1f2:	83 30       	cpi	r24, 0x03	; 3
     1f4:	91 05       	cpc	r25, r1
     1f6:	11 f4       	brne	.+4      	; 0x1fc <pinChange+0x16a>
		  PORTA |= (1<<PA3);
     1f8:	db 9a       	sbi	0x1b, 3	; 27
     1fa:	08 95       	ret
		else if(a == eS_PORTA4)
     1fc:	84 30       	cpi	r24, 0x04	; 4
     1fe:	91 05       	cpc	r25, r1
     200:	11 f4       	brne	.+4      	; 0x206 <pinChange+0x174>
		  PORTA |= (1<<PA4);
     202:	dc 9a       	sbi	0x1b, 4	; 27
     204:	08 95       	ret
		else if(a == eS_PORTA5)
     206:	85 30       	cpi	r24, 0x05	; 5
     208:	91 05       	cpc	r25, r1
     20a:	11 f4       	brne	.+4      	; 0x210 <pinChange+0x17e>
		  PORTA |= (1<<PA5);
     20c:	dd 9a       	sbi	0x1b, 5	; 27
     20e:	08 95       	ret
		else if(a == eS_PORTA6)
     210:	86 30       	cpi	r24, 0x06	; 6
     212:	91 05       	cpc	r25, r1
     214:	11 f4       	brne	.+4      	; 0x21a <pinChange+0x188>
		  PORTA |= (1<<PA6);
     216:	de 9a       	sbi	0x1b, 6	; 27
     218:	08 95       	ret
		else if(a == eS_PORTA7)
     21a:	87 30       	cpi	r24, 0x07	; 7
     21c:	91 05       	cpc	r25, r1
     21e:	11 f4       	brne	.+4      	; 0x224 <pinChange+0x192>
		  PORTA |= (1<<PA7);
     220:	df 9a       	sbi	0x1b, 7	; 27
     222:	08 95       	ret
		else if(a == eS_PORTB0)
     224:	8a 30       	cpi	r24, 0x0A	; 10
     226:	91 05       	cpc	r25, r1
     228:	11 f4       	brne	.+4      	; 0x22e <pinChange+0x19c>
	  	  PORTB |= (1<<PB0);
     22a:	c0 9a       	sbi	0x18, 0	; 24
     22c:	08 95       	ret
		else if(a == eS_PORTB1)
     22e:	8b 30       	cpi	r24, 0x0B	; 11
     230:	91 05       	cpc	r25, r1
     232:	11 f4       	brne	.+4      	; 0x238 <pinChange+0x1a6>
		  PORTB |= (1<<PB1);
     234:	c1 9a       	sbi	0x18, 1	; 24
     236:	08 95       	ret
		else if(a == eS_PORTB2)
     238:	8c 30       	cpi	r24, 0x0C	; 12
     23a:	91 05       	cpc	r25, r1
     23c:	11 f4       	brne	.+4      	; 0x242 <pinChange+0x1b0>
		  PORTB |= (1<<PB2);
     23e:	c2 9a       	sbi	0x18, 2	; 24
     240:	08 95       	ret
		else if(a == eS_PORTB3)
     242:	8d 30       	cpi	r24, 0x0D	; 13
     244:	91 05       	cpc	r25, r1
     246:	11 f4       	brne	.+4      	; 0x24c <pinChange+0x1ba>
		  PORTB |= (1<<PB3);
     248:	c3 9a       	sbi	0x18, 3	; 24
     24a:	08 95       	ret
		else if(a == eS_PORTB4)
     24c:	8e 30       	cpi	r24, 0x0E	; 14
     24e:	91 05       	cpc	r25, r1
     250:	11 f4       	brne	.+4      	; 0x256 <pinChange+0x1c4>
		  PORTB |= (1<<PB4);
     252:	c4 9a       	sbi	0x18, 4	; 24
     254:	08 95       	ret
		else if(a == eS_PORTB5)
     256:	8f 30       	cpi	r24, 0x0F	; 15
     258:	91 05       	cpc	r25, r1
     25a:	11 f4       	brne	.+4      	; 0x260 <pinChange+0x1ce>
		  PORTB |= (1<<PB5);
     25c:	c5 9a       	sbi	0x18, 5	; 24
     25e:	08 95       	ret
		else if(a == eS_PORTB6)
     260:	80 31       	cpi	r24, 0x10	; 16
     262:	91 05       	cpc	r25, r1
     264:	11 f4       	brne	.+4      	; 0x26a <pinChange+0x1d8>
		  PORTB |= (1<<PB6);
     266:	c6 9a       	sbi	0x18, 6	; 24
     268:	08 95       	ret
		else if(a == eS_PORTB7)
     26a:	81 31       	cpi	r24, 0x11	; 17
     26c:	91 05       	cpc	r25, r1
     26e:	11 f4       	brne	.+4      	; 0x274 <pinChange+0x1e2>
		  PORTB |= (1<<PB7);
     270:	c7 9a       	sbi	0x18, 7	; 24
     272:	08 95       	ret
		else if(a == eS_PORTC0)
     274:	86 31       	cpi	r24, 0x16	; 22
     276:	91 05       	cpc	r25, r1
     278:	11 f4       	brne	.+4      	; 0x27e <pinChange+0x1ec>
		  PORTC |= (1<<PC0);
     27a:	a8 9a       	sbi	0x15, 0	; 21
     27c:	08 95       	ret
		else if(a == eS_PORTC1)
     27e:	87 31       	cpi	r24, 0x17	; 23
     280:	91 05       	cpc	r25, r1
     282:	11 f4       	brne	.+4      	; 0x288 <pinChange+0x1f6>
		  PORTC |= (1<<PC1);
     284:	a9 9a       	sbi	0x15, 1	; 21
     286:	08 95       	ret
		else if(a == eS_PORTC2)
     288:	88 31       	cpi	r24, 0x18	; 24
     28a:	91 05       	cpc	r25, r1
     28c:	11 f4       	brne	.+4      	; 0x292 <pinChange+0x200>
	  	  PORTC |= (1<<PC2);
     28e:	aa 9a       	sbi	0x15, 2	; 21
     290:	08 95       	ret
		else if(a == eS_PORTC3)
     292:	89 31       	cpi	r24, 0x19	; 25
     294:	91 05       	cpc	r25, r1
     296:	11 f4       	brne	.+4      	; 0x29c <pinChange+0x20a>
		  PORTC |= (1<<PC3);
     298:	ab 9a       	sbi	0x15, 3	; 21
     29a:	08 95       	ret
		else if(a == eS_PORTC4)
     29c:	8a 31       	cpi	r24, 0x1A	; 26
     29e:	91 05       	cpc	r25, r1
     2a0:	11 f4       	brne	.+4      	; 0x2a6 <pinChange+0x214>
		  PORTC |= (1<<PC4);
     2a2:	ac 9a       	sbi	0x15, 4	; 21
     2a4:	08 95       	ret
		else if(a == eS_PORTC5)
     2a6:	8b 31       	cpi	r24, 0x1B	; 27
     2a8:	91 05       	cpc	r25, r1
     2aa:	11 f4       	brne	.+4      	; 0x2b0 <pinChange+0x21e>
		  PORTC |= (1<<PC5);
     2ac:	ad 9a       	sbi	0x15, 5	; 21
     2ae:	08 95       	ret
		else if(a == eS_PORTC6)
     2b0:	8c 31       	cpi	r24, 0x1C	; 28
     2b2:	91 05       	cpc	r25, r1
     2b4:	11 f4       	brne	.+4      	; 0x2ba <pinChange+0x228>
		  PORTC |= (1<<PC6);  
     2b6:	ae 9a       	sbi	0x15, 6	; 21
     2b8:	08 95       	ret
		else if(a == eS_PORTC7)
     2ba:	8d 31       	cpi	r24, 0x1D	; 29
     2bc:	91 05       	cpc	r25, r1
     2be:	11 f4       	brne	.+4      	; 0x2c4 <pinChange+0x232>
		  PORTC |= (1<<PC7);
     2c0:	af 9a       	sbi	0x15, 7	; 21
     2c2:	08 95       	ret
		else if(a == eS_PORTD0)
     2c4:	8e 31       	cpi	r24, 0x1E	; 30
     2c6:	91 05       	cpc	r25, r1
     2c8:	11 f4       	brne	.+4      	; 0x2ce <pinChange+0x23c>
		  PORTD |= (1<<PD0);
     2ca:	90 9a       	sbi	0x12, 0	; 18
     2cc:	08 95       	ret
		else if(a == eS_PORTD1)
     2ce:	8f 31       	cpi	r24, 0x1F	; 31
     2d0:	91 05       	cpc	r25, r1
     2d2:	11 f4       	brne	.+4      	; 0x2d8 <pinChange+0x246>
		  PORTD |= (1<<PD1);
     2d4:	91 9a       	sbi	0x12, 1	; 18
     2d6:	08 95       	ret
		else if(a == eS_PORTD2)
     2d8:	80 32       	cpi	r24, 0x20	; 32
     2da:	91 05       	cpc	r25, r1
     2dc:	11 f4       	brne	.+4      	; 0x2e2 <pinChange+0x250>
		  PORTD |= (1<<PD2);
     2de:	92 9a       	sbi	0x12, 2	; 18
     2e0:	08 95       	ret
		else if(a == eS_PORTD3)
     2e2:	81 32       	cpi	r24, 0x21	; 33
     2e4:	91 05       	cpc	r25, r1
     2e6:	11 f4       	brne	.+4      	; 0x2ec <pinChange+0x25a>
		  PORTD |= (1<<PD3);
     2e8:	93 9a       	sbi	0x12, 3	; 18
     2ea:	08 95       	ret
		else if(a == eS_PORTD4)
     2ec:	82 32       	cpi	r24, 0x22	; 34
     2ee:	91 05       	cpc	r25, r1
     2f0:	11 f4       	brne	.+4      	; 0x2f6 <pinChange+0x264>
		  PORTD |= (1<<PD4);
     2f2:	94 9a       	sbi	0x12, 4	; 18
     2f4:	08 95       	ret
		else if(a == eS_PORTD5)
     2f6:	83 32       	cpi	r24, 0x23	; 35
     2f8:	91 05       	cpc	r25, r1
     2fa:	11 f4       	brne	.+4      	; 0x300 <pinChange+0x26e>
		  PORTD |= (1<<PD5);
     2fc:	95 9a       	sbi	0x12, 5	; 18
     2fe:	08 95       	ret
		else if(a == eS_PORTD6)
     300:	84 32       	cpi	r24, 0x24	; 36
     302:	91 05       	cpc	r25, r1
     304:	11 f4       	brne	.+4      	; 0x30a <pinChange+0x278>
		  PORTD |= (1<<PD6);
     306:	96 9a       	sbi	0x12, 6	; 18
     308:	08 95       	ret
		else if(a == eS_PORTD7)
     30a:	85 97       	sbiw	r24, 0x25	; 37
     30c:	09 f4       	brne	.+2      	; 0x310 <pinChange+0x27e>
		  PORTD |= (1<<PD7);
     30e:	97 9a       	sbi	0x12, 7	; 18
     310:	08 95       	ret

00000312 <Lcd8_Port>:



//LCD 8 Bit Interfacing Functions
void Lcd8_Port(char a)
{
     312:	0f 93       	push	r16
     314:	1f 93       	push	r17
     316:	08 2f       	mov	r16, r24
	if(a & 1)
     318:	18 2f       	mov	r17, r24
     31a:	80 ff       	sbrs	r24, 0
     31c:	05 c0       	rjmp	.+10     	; 0x328 <Lcd8_Port+0x16>
	pinChange(D0,1);
     31e:	80 e0       	ldi	r24, 0x00	; 0
     320:	90 e0       	ldi	r25, 0x00	; 0
     322:	61 e0       	ldi	r22, 0x01	; 1
     324:	70 e0       	ldi	r23, 0x00	; 0
     326:	04 c0       	rjmp	.+8      	; 0x330 <Lcd8_Port+0x1e>
	else
	pinChange(D0,0);
     328:	80 e0       	ldi	r24, 0x00	; 0
     32a:	90 e0       	ldi	r25, 0x00	; 0
     32c:	60 e0       	ldi	r22, 0x00	; 0
     32e:	70 e0       	ldi	r23, 0x00	; 0
     330:	0e 94 49 00 	call	0x92	; 0x92 <pinChange>
	
	if(a & 2)
     334:	11 ff       	sbrs	r17, 1
     336:	05 c0       	rjmp	.+10     	; 0x342 <Lcd8_Port+0x30>
	pinChange(D1,1);
     338:	81 e0       	ldi	r24, 0x01	; 1
     33a:	90 e0       	ldi	r25, 0x00	; 0
     33c:	61 e0       	ldi	r22, 0x01	; 1
     33e:	70 e0       	ldi	r23, 0x00	; 0
     340:	04 c0       	rjmp	.+8      	; 0x34a <Lcd8_Port+0x38>
	else
	pinChange(D1,0);
     342:	81 e0       	ldi	r24, 0x01	; 1
     344:	90 e0       	ldi	r25, 0x00	; 0
     346:	60 e0       	ldi	r22, 0x00	; 0
     348:	70 e0       	ldi	r23, 0x00	; 0
     34a:	0e 94 49 00 	call	0x92	; 0x92 <pinChange>
	
	if(a & 4)
     34e:	12 ff       	sbrs	r17, 2
     350:	05 c0       	rjmp	.+10     	; 0x35c <Lcd8_Port+0x4a>
	pinChange(D2,1);
     352:	82 e0       	ldi	r24, 0x02	; 2
     354:	90 e0       	ldi	r25, 0x00	; 0
     356:	61 e0       	ldi	r22, 0x01	; 1
     358:	70 e0       	ldi	r23, 0x00	; 0
     35a:	04 c0       	rjmp	.+8      	; 0x364 <Lcd8_Port+0x52>
	else
	pinChange(D2,0);
     35c:	82 e0       	ldi	r24, 0x02	; 2
     35e:	90 e0       	ldi	r25, 0x00	; 0
     360:	60 e0       	ldi	r22, 0x00	; 0
     362:	70 e0       	ldi	r23, 0x00	; 0
     364:	0e 94 49 00 	call	0x92	; 0x92 <pinChange>
	
	if(a & 8)
     368:	13 ff       	sbrs	r17, 3
     36a:	05 c0       	rjmp	.+10     	; 0x376 <Lcd8_Port+0x64>
	pinChange(D3,1);
     36c:	83 e0       	ldi	r24, 0x03	; 3
     36e:	90 e0       	ldi	r25, 0x00	; 0
     370:	61 e0       	ldi	r22, 0x01	; 1
     372:	70 e0       	ldi	r23, 0x00	; 0
     374:	04 c0       	rjmp	.+8      	; 0x37e <Lcd8_Port+0x6c>
	else
	pinChange(D3,0);
     376:	83 e0       	ldi	r24, 0x03	; 3
     378:	90 e0       	ldi	r25, 0x00	; 0
     37a:	60 e0       	ldi	r22, 0x00	; 0
     37c:	70 e0       	ldi	r23, 0x00	; 0
     37e:	0e 94 49 00 	call	0x92	; 0x92 <pinChange>
	
	if(a & 16)
     382:	14 ff       	sbrs	r17, 4
     384:	05 c0       	rjmp	.+10     	; 0x390 <Lcd8_Port+0x7e>
	pinChange(D4,1);
     386:	8a e1       	ldi	r24, 0x1A	; 26
     388:	90 e0       	ldi	r25, 0x00	; 0
     38a:	61 e0       	ldi	r22, 0x01	; 1
     38c:	70 e0       	ldi	r23, 0x00	; 0
     38e:	04 c0       	rjmp	.+8      	; 0x398 <Lcd8_Port+0x86>
	else
	pinChange(D4,0);
     390:	8a e1       	ldi	r24, 0x1A	; 26
     392:	90 e0       	ldi	r25, 0x00	; 0
     394:	60 e0       	ldi	r22, 0x00	; 0
     396:	70 e0       	ldi	r23, 0x00	; 0
     398:	0e 94 49 00 	call	0x92	; 0x92 <pinChange>

	if(a & 32)
     39c:	15 ff       	sbrs	r17, 5
     39e:	05 c0       	rjmp	.+10     	; 0x3aa <Lcd8_Port+0x98>
	pinChange(D5,1);
     3a0:	8b e1       	ldi	r24, 0x1B	; 27
     3a2:	90 e0       	ldi	r25, 0x00	; 0
     3a4:	61 e0       	ldi	r22, 0x01	; 1
     3a6:	70 e0       	ldi	r23, 0x00	; 0
     3a8:	04 c0       	rjmp	.+8      	; 0x3b2 <Lcd8_Port+0xa0>
	else
	pinChange(D5,0);
     3aa:	8b e1       	ldi	r24, 0x1B	; 27
     3ac:	90 e0       	ldi	r25, 0x00	; 0
     3ae:	60 e0       	ldi	r22, 0x00	; 0
     3b0:	70 e0       	ldi	r23, 0x00	; 0
     3b2:	0e 94 49 00 	call	0x92	; 0x92 <pinChange>
	
	if(a & 64)
     3b6:	16 ff       	sbrs	r17, 6
     3b8:	05 c0       	rjmp	.+10     	; 0x3c4 <Lcd8_Port+0xb2>
	pinChange(D6,1);
     3ba:	8c e1       	ldi	r24, 0x1C	; 28
     3bc:	90 e0       	ldi	r25, 0x00	; 0
     3be:	61 e0       	ldi	r22, 0x01	; 1
     3c0:	70 e0       	ldi	r23, 0x00	; 0
     3c2:	04 c0       	rjmp	.+8      	; 0x3cc <Lcd8_Port+0xba>
	else
	pinChange(D6,0);
     3c4:	8c e1       	ldi	r24, 0x1C	; 28
     3c6:	90 e0       	ldi	r25, 0x00	; 0
     3c8:	60 e0       	ldi	r22, 0x00	; 0
     3ca:	70 e0       	ldi	r23, 0x00	; 0
     3cc:	0e 94 49 00 	call	0x92	; 0x92 <pinChange>
	
	if(a & 128)
     3d0:	07 ff       	sbrs	r16, 7
     3d2:	05 c0       	rjmp	.+10     	; 0x3de <Lcd8_Port+0xcc>
	pinChange(D7,1);
     3d4:	8d e1       	ldi	r24, 0x1D	; 29
     3d6:	90 e0       	ldi	r25, 0x00	; 0
     3d8:	61 e0       	ldi	r22, 0x01	; 1
     3da:	70 e0       	ldi	r23, 0x00	; 0
     3dc:	04 c0       	rjmp	.+8      	; 0x3e6 <Lcd8_Port+0xd4>
	else
	pinChange(D7,0);
     3de:	8d e1       	ldi	r24, 0x1D	; 29
     3e0:	90 e0       	ldi	r25, 0x00	; 0
     3e2:	60 e0       	ldi	r22, 0x00	; 0
     3e4:	70 e0       	ldi	r23, 0x00	; 0
     3e6:	0e 94 49 00 	call	0x92	; 0x92 <pinChange>
}
     3ea:	1f 91       	pop	r17
     3ec:	0f 91       	pop	r16
     3ee:	08 95       	ret

000003f0 <Lcd8_Cmd>:
void Lcd8_Cmd(char a)
{
     3f0:	0f 93       	push	r16
     3f2:	1f 93       	push	r17
     3f4:	18 2f       	mov	r17, r24
	pinChange(RS,0);             // => RS = 0
     3f6:	86 e1       	ldi	r24, 0x16	; 22
     3f8:	90 e0       	ldi	r25, 0x00	; 0
     3fa:	60 e0       	ldi	r22, 0x00	; 0
     3fc:	70 e0       	ldi	r23, 0x00	; 0
     3fe:	0e 94 49 00 	call	0x92	; 0x92 <pinChange>
	Lcd8_Port(a);             //Data transfer
     402:	81 2f       	mov	r24, r17
     404:	0e 94 89 01 	call	0x312	; 0x312 <Lcd8_Port>
	pinChange(EN,1);             // => E = 1
     408:	88 e1       	ldi	r24, 0x18	; 24
     40a:	90 e0       	ldi	r25, 0x00	; 0
     40c:	61 e0       	ldi	r22, 0x01	; 1
     40e:	70 e0       	ldi	r23, 0x00	; 0
     410:	0e 94 49 00 	call	0x92	; 0x92 <pinChange>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     414:	00 ed       	ldi	r16, 0xD0	; 208
     416:	17 e0       	ldi	r17, 0x07	; 7
     418:	c8 01       	movw	r24, r16
     41a:	01 97       	sbiw	r24, 0x01	; 1
     41c:	f1 f7       	brne	.-4      	; 0x41a <Lcd8_Cmd+0x2a>
	_delay_ms(1);
	pinChange(EN,0);             // => E = 0
     41e:	88 e1       	ldi	r24, 0x18	; 24
     420:	90 e0       	ldi	r25, 0x00	; 0
     422:	60 e0       	ldi	r22, 0x00	; 0
     424:	70 e0       	ldi	r23, 0x00	; 0
     426:	0e 94 49 00 	call	0x92	; 0x92 <pinChange>
     42a:	c8 01       	movw	r24, r16
     42c:	01 97       	sbiw	r24, 0x01	; 1
     42e:	f1 f7       	brne	.-4      	; 0x42c <Lcd8_Cmd+0x3c>
	_delay_ms(1);
}
     430:	1f 91       	pop	r17
     432:	0f 91       	pop	r16
     434:	08 95       	ret

00000436 <Lcd8_Clear>:

void Lcd8_Clear()
{
	Lcd8_Cmd(1);
     436:	81 e0       	ldi	r24, 0x01	; 1
     438:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <Lcd8_Cmd>
}
     43c:	08 95       	ret

0000043e <Lcd8_Set_Cursor>:

void Lcd8_Set_Cursor(char a, char b)
{
	if(a == 1)
     43e:	81 30       	cpi	r24, 0x01	; 1
     440:	29 f4       	brne	.+10     	; 0x44c <Lcd8_Set_Cursor+0xe>
	Lcd8_Cmd(0x80 + b);
     442:	86 2f       	mov	r24, r22
     444:	80 58       	subi	r24, 0x80	; 128
     446:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <Lcd8_Cmd>
     44a:	08 95       	ret
	else if(a == 2)
     44c:	82 30       	cpi	r24, 0x02	; 2
     44e:	21 f4       	brne	.+8      	; 0x458 <Lcd8_Set_Cursor+0x1a>
	Lcd8_Cmd(0xC0 + b);
     450:	86 2f       	mov	r24, r22
     452:	80 54       	subi	r24, 0x40	; 64
     454:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <Lcd8_Cmd>
     458:	08 95       	ret

0000045a <Lcd8_Init>:
}

void Lcd8_Init()
{
	pinChange(RS,0);
     45a:	86 e1       	ldi	r24, 0x16	; 22
     45c:	90 e0       	ldi	r25, 0x00	; 0
     45e:	60 e0       	ldi	r22, 0x00	; 0
     460:	70 e0       	ldi	r23, 0x00	; 0
     462:	0e 94 49 00 	call	0x92	; 0x92 <pinChange>
	pinChange(EN,0);
     466:	88 e1       	ldi	r24, 0x18	; 24
     468:	90 e0       	ldi	r25, 0x00	; 0
     46a:	60 e0       	ldi	r22, 0x00	; 0
     46c:	70 e0       	ldi	r23, 0x00	; 0
     46e:	0e 94 49 00 	call	0x92	; 0x92 <pinChange>
     472:	80 e4       	ldi	r24, 0x40	; 64
     474:	9c e9       	ldi	r25, 0x9C	; 156
     476:	01 97       	sbiw	r24, 0x01	; 1
     478:	f1 f7       	brne	.-4      	; 0x476 <Lcd8_Init+0x1c>
	_delay_ms(20);
	///////////// Reset process from datasheet /////////
	Lcd8_Cmd(0x30);
     47a:	80 e3       	ldi	r24, 0x30	; 48
     47c:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <Lcd8_Cmd>
     480:	80 e1       	ldi	r24, 0x10	; 16
     482:	97 e2       	ldi	r25, 0x27	; 39
     484:	01 97       	sbiw	r24, 0x01	; 1
     486:	f1 f7       	brne	.-4      	; 0x484 <Lcd8_Init+0x2a>
	_delay_ms(5);
	Lcd8_Cmd(0x30);
     488:	80 e3       	ldi	r24, 0x30	; 48
     48a:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <Lcd8_Cmd>
     48e:	80 ed       	ldi	r24, 0xD0	; 208
     490:	97 e0       	ldi	r25, 0x07	; 7
     492:	01 97       	sbiw	r24, 0x01	; 1
     494:	f1 f7       	brne	.-4      	; 0x492 <Lcd8_Init+0x38>
	_delay_ms(1);
	Lcd8_Cmd(0x30);
     496:	80 e3       	ldi	r24, 0x30	; 48
     498:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <Lcd8_Cmd>
     49c:	80 e2       	ldi	r24, 0x20	; 32
     49e:	9e e4       	ldi	r25, 0x4E	; 78
     4a0:	01 97       	sbiw	r24, 0x01	; 1
     4a2:	f1 f7       	brne	.-4      	; 0x4a0 <Lcd8_Init+0x46>
	_delay_ms(10);
	/////////////////////////////////////////////////////
	Lcd8_Cmd(0x38);    //function set
     4a4:	88 e3       	ldi	r24, 0x38	; 56
     4a6:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <Lcd8_Cmd>
	Lcd8_Cmd(0x0C);    //display on,cursor off,blink off
     4aa:	8c e0       	ldi	r24, 0x0C	; 12
     4ac:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <Lcd8_Cmd>
	Lcd8_Cmd(0x01);    //clear display
     4b0:	81 e0       	ldi	r24, 0x01	; 1
     4b2:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <Lcd8_Cmd>
	Lcd8_Cmd(0x06);    //entry mode, set increment
     4b6:	86 e0       	ldi	r24, 0x06	; 6
     4b8:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <Lcd8_Cmd>
}
     4bc:	08 95       	ret

000004be <Lcd8_Write_Char>:

void Lcd8_Write_Char(char a)
{
     4be:	0f 93       	push	r16
     4c0:	1f 93       	push	r17
     4c2:	18 2f       	mov	r17, r24
	pinChange(RS,1);             // => RS = 1
     4c4:	86 e1       	ldi	r24, 0x16	; 22
     4c6:	90 e0       	ldi	r25, 0x00	; 0
     4c8:	61 e0       	ldi	r22, 0x01	; 1
     4ca:	70 e0       	ldi	r23, 0x00	; 0
     4cc:	0e 94 49 00 	call	0x92	; 0x92 <pinChange>
	Lcd8_Port(a);             //Data transfer
     4d0:	81 2f       	mov	r24, r17
     4d2:	0e 94 89 01 	call	0x312	; 0x312 <Lcd8_Port>
	pinChange(EN,1);             // => E = 1
     4d6:	88 e1       	ldi	r24, 0x18	; 24
     4d8:	90 e0       	ldi	r25, 0x00	; 0
     4da:	61 e0       	ldi	r22, 0x01	; 1
     4dc:	70 e0       	ldi	r23, 0x00	; 0
     4de:	0e 94 49 00 	call	0x92	; 0x92 <pinChange>
     4e2:	00 ed       	ldi	r16, 0xD0	; 208
     4e4:	17 e0       	ldi	r17, 0x07	; 7
     4e6:	c8 01       	movw	r24, r16
     4e8:	01 97       	sbiw	r24, 0x01	; 1
     4ea:	f1 f7       	brne	.-4      	; 0x4e8 <Lcd8_Write_Char+0x2a>
	_delay_ms(1);
	pinChange(EN,0);             // => E = 04
     4ec:	88 e1       	ldi	r24, 0x18	; 24
     4ee:	90 e0       	ldi	r25, 0x00	; 0
     4f0:	60 e0       	ldi	r22, 0x00	; 0
     4f2:	70 e0       	ldi	r23, 0x00	; 0
     4f4:	0e 94 49 00 	call	0x92	; 0x92 <pinChange>
     4f8:	c8 01       	movw	r24, r16
     4fa:	01 97       	sbiw	r24, 0x01	; 1
     4fc:	f1 f7       	brne	.-4      	; 0x4fa <Lcd8_Write_Char+0x3c>
	_delay_ms(1);
}
     4fe:	1f 91       	pop	r17
     500:	0f 91       	pop	r16
     502:	08 95       	ret

00000504 <Lcd8_Write_String>:

void Lcd8_Write_String(char *a)
{
     504:	cf 93       	push	r28
     506:	df 93       	push	r29
     508:	ec 01       	movw	r28, r24
     50a:	02 c0       	rjmp	.+4      	; 0x510 <Lcd8_Write_String+0xc>
	int i;
	for(i=0;a[i]!='\0';i++)
	Lcd8_Write_Char(a[i]);
     50c:	0e 94 5f 02 	call	0x4be	; 0x4be <Lcd8_Write_Char>
}

void Lcd8_Write_String(char *a)
{
	int i;
	for(i=0;a[i]!='\0';i++)
     510:	89 91       	ld	r24, Y+
     512:	88 23       	and	r24, r24
     514:	d9 f7       	brne	.-10     	; 0x50c <Lcd8_Write_String+0x8>
	Lcd8_Write_Char(a[i]);
}
     516:	df 91       	pop	r29
     518:	cf 91       	pop	r28
     51a:	08 95       	ret

0000051c <Lcd8_Shift_Right>:

void Lcd8_Shift_Right()
{
	Lcd8_Cmd(0x1C);
     51c:	8c e1       	ldi	r24, 0x1C	; 28
     51e:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <Lcd8_Cmd>
}
     522:	08 95       	ret

00000524 <Lcd8_Shift_Left>:

void Lcd8_Shift_Left()
{
	Lcd8_Cmd(0x18);
     524:	88 e1       	ldi	r24, 0x18	; 24
     526:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <Lcd8_Cmd>
}
     52a:	08 95       	ret

0000052c <Lcd4_Port>:
//End LCD 8 Bit Interfacing Functions

//LCD 4 Bit Interfacing Functions

void Lcd4_Port(char a)
{
     52c:	cf 93       	push	r28
     52e:	df 93       	push	r29
	if(a & 1)
     530:	c8 2f       	mov	r28, r24
     532:	80 ff       	sbrs	r24, 0
     534:	05 c0       	rjmp	.+10     	; 0x540 <Lcd4_Port+0x14>
	pinChange(D4,1);
     536:	8a e1       	ldi	r24, 0x1A	; 26
     538:	90 e0       	ldi	r25, 0x00	; 0
     53a:	61 e0       	ldi	r22, 0x01	; 1
     53c:	70 e0       	ldi	r23, 0x00	; 0
     53e:	04 c0       	rjmp	.+8      	; 0x548 <Lcd4_Port+0x1c>
	else
	pinChange(D4,0);
     540:	8a e1       	ldi	r24, 0x1A	; 26
     542:	90 e0       	ldi	r25, 0x00	; 0
     544:	60 e0       	ldi	r22, 0x00	; 0
     546:	70 e0       	ldi	r23, 0x00	; 0
     548:	0e 94 49 00 	call	0x92	; 0x92 <pinChange>
	
	if(a & 2)
     54c:	c1 ff       	sbrs	r28, 1
     54e:	05 c0       	rjmp	.+10     	; 0x55a <Lcd4_Port+0x2e>
	pinChange(D5,1);
     550:	8b e1       	ldi	r24, 0x1B	; 27
     552:	90 e0       	ldi	r25, 0x00	; 0
     554:	61 e0       	ldi	r22, 0x01	; 1
     556:	70 e0       	ldi	r23, 0x00	; 0
     558:	04 c0       	rjmp	.+8      	; 0x562 <Lcd4_Port+0x36>
	else
	pinChange(D5,0);
     55a:	8b e1       	ldi	r24, 0x1B	; 27
     55c:	90 e0       	ldi	r25, 0x00	; 0
     55e:	60 e0       	ldi	r22, 0x00	; 0
     560:	70 e0       	ldi	r23, 0x00	; 0
     562:	0e 94 49 00 	call	0x92	; 0x92 <pinChange>
	
	if(a & 4)
     566:	c2 ff       	sbrs	r28, 2
     568:	05 c0       	rjmp	.+10     	; 0x574 <Lcd4_Port+0x48>
	pinChange(D6,1);
     56a:	8c e1       	ldi	r24, 0x1C	; 28
     56c:	90 e0       	ldi	r25, 0x00	; 0
     56e:	61 e0       	ldi	r22, 0x01	; 1
     570:	70 e0       	ldi	r23, 0x00	; 0
     572:	04 c0       	rjmp	.+8      	; 0x57c <Lcd4_Port+0x50>
	else
	pinChange(D6,0);
     574:	8c e1       	ldi	r24, 0x1C	; 28
     576:	90 e0       	ldi	r25, 0x00	; 0
     578:	60 e0       	ldi	r22, 0x00	; 0
     57a:	70 e0       	ldi	r23, 0x00	; 0
     57c:	0e 94 49 00 	call	0x92	; 0x92 <pinChange>
	
	if(a & 8)
     580:	c3 ff       	sbrs	r28, 3
     582:	05 c0       	rjmp	.+10     	; 0x58e <Lcd4_Port+0x62>
	pinChange(D7,1);
     584:	8d e1       	ldi	r24, 0x1D	; 29
     586:	90 e0       	ldi	r25, 0x00	; 0
     588:	61 e0       	ldi	r22, 0x01	; 1
     58a:	70 e0       	ldi	r23, 0x00	; 0
     58c:	04 c0       	rjmp	.+8      	; 0x596 <Lcd4_Port+0x6a>
	else
	pinChange(D7,0);
     58e:	8d e1       	ldi	r24, 0x1D	; 29
     590:	90 e0       	ldi	r25, 0x00	; 0
     592:	60 e0       	ldi	r22, 0x00	; 0
     594:	70 e0       	ldi	r23, 0x00	; 0
     596:	0e 94 49 00 	call	0x92	; 0x92 <pinChange>
}
     59a:	df 91       	pop	r29
     59c:	cf 91       	pop	r28
     59e:	08 95       	ret

000005a0 <Lcd4_Cmd>:
void Lcd4_Cmd(char a)
{
     5a0:	0f 93       	push	r16
     5a2:	1f 93       	push	r17
     5a4:	18 2f       	mov	r17, r24
	pinChange(RS,0);             // => RS = 0
     5a6:	86 e1       	ldi	r24, 0x16	; 22
     5a8:	90 e0       	ldi	r25, 0x00	; 0
     5aa:	60 e0       	ldi	r22, 0x00	; 0
     5ac:	70 e0       	ldi	r23, 0x00	; 0
     5ae:	0e 94 49 00 	call	0x92	; 0x92 <pinChange>
	Lcd4_Port(a);
     5b2:	81 2f       	mov	r24, r17
     5b4:	0e 94 96 02 	call	0x52c	; 0x52c <Lcd4_Port>
	pinChange(EN,1);            // => E = 1
     5b8:	88 e1       	ldi	r24, 0x18	; 24
     5ba:	90 e0       	ldi	r25, 0x00	; 0
     5bc:	61 e0       	ldi	r22, 0x01	; 1
     5be:	70 e0       	ldi	r23, 0x00	; 0
     5c0:	0e 94 49 00 	call	0x92	; 0x92 <pinChange>
     5c4:	00 ed       	ldi	r16, 0xD0	; 208
     5c6:	17 e0       	ldi	r17, 0x07	; 7
     5c8:	c8 01       	movw	r24, r16
     5ca:	01 97       	sbiw	r24, 0x01	; 1
     5cc:	f1 f7       	brne	.-4      	; 0x5ca <Lcd4_Cmd+0x2a>
	_delay_ms(1);
	pinChange(EN,0);             // => E = 0
     5ce:	88 e1       	ldi	r24, 0x18	; 24
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	60 e0       	ldi	r22, 0x00	; 0
     5d4:	70 e0       	ldi	r23, 0x00	; 0
     5d6:	0e 94 49 00 	call	0x92	; 0x92 <pinChange>
     5da:	c8 01       	movw	r24, r16
     5dc:	01 97       	sbiw	r24, 0x01	; 1
     5de:	f1 f7       	brne	.-4      	; 0x5dc <Lcd4_Cmd+0x3c>
	_delay_ms(1);
}
     5e0:	1f 91       	pop	r17
     5e2:	0f 91       	pop	r16
     5e4:	08 95       	ret

000005e6 <Lcd4_Clear>:

void Lcd4_Clear()
{
	Lcd4_Cmd(0);
     5e6:	80 e0       	ldi	r24, 0x00	; 0
     5e8:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <Lcd4_Cmd>
	Lcd4_Cmd(1);
     5ec:	81 e0       	ldi	r24, 0x01	; 1
     5ee:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <Lcd4_Cmd>
}
     5f2:	08 95       	ret

000005f4 <Lcd4_Set_Cursor>:

void Lcd4_Set_Cursor(char a, char b)
{
     5f4:	1f 93       	push	r17
	char temp,z,y;
	if(a == 1)
     5f6:	81 30       	cpi	r24, 0x01	; 1
     5f8:	19 f4       	brne	.+6      	; 0x600 <Lcd4_Set_Cursor+0xc>
	{
		temp = 0x80 + b;
     5fa:	16 2f       	mov	r17, r22
     5fc:	10 58       	subi	r17, 0x80	; 128
     5fe:	04 c0       	rjmp	.+8      	; 0x608 <Lcd4_Set_Cursor+0x14>
		z = temp>>4;
		y = (0x80+b) & 0x0F;
		Lcd4_Cmd(z);
		Lcd4_Cmd(y);
	}
	else if(a == 2)
     600:	82 30       	cpi	r24, 0x02	; 2
     602:	59 f4       	brne	.+22     	; 0x61a <Lcd4_Set_Cursor+0x26>
	{
		temp = 0xC0 + b;
     604:	16 2f       	mov	r17, r22
     606:	10 54       	subi	r17, 0x40	; 64
		z = temp>>4;
		y = (0xC0+b) & 0x0F;
		Lcd4_Cmd(z);
     608:	81 2f       	mov	r24, r17
     60a:	82 95       	swap	r24
     60c:	8f 70       	andi	r24, 0x0F	; 15
     60e:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <Lcd4_Cmd>
		Lcd4_Cmd(y);
     612:	81 2f       	mov	r24, r17
     614:	8f 70       	andi	r24, 0x0F	; 15
     616:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <Lcd4_Cmd>
	}
}
     61a:	1f 91       	pop	r17
     61c:	08 95       	ret

0000061e <Lcd4_Init>:

void Lcd4_Init()
{
	Lcd4_Port(0x00);
     61e:	80 e0       	ldi	r24, 0x00	; 0
     620:	0e 94 96 02 	call	0x52c	; 0x52c <Lcd4_Port>
     624:	80 e4       	ldi	r24, 0x40	; 64
     626:	9c e9       	ldi	r25, 0x9C	; 156
     628:	01 97       	sbiw	r24, 0x01	; 1
     62a:	f1 f7       	brne	.-4      	; 0x628 <Lcd4_Init+0xa>
	_delay_ms(20);
	///////////// Reset process from datasheet /////////
	Lcd4_Cmd(0x03);
     62c:	83 e0       	ldi	r24, 0x03	; 3
     62e:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <Lcd4_Cmd>
     632:	80 e1       	ldi	r24, 0x10	; 16
     634:	97 e2       	ldi	r25, 0x27	; 39
     636:	01 97       	sbiw	r24, 0x01	; 1
     638:	f1 f7       	brne	.-4      	; 0x636 <Lcd4_Init+0x18>
	_delay_ms(5);
	Lcd4_Cmd(0x03);
     63a:	83 e0       	ldi	r24, 0x03	; 3
     63c:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <Lcd4_Cmd>
     640:	80 ef       	ldi	r24, 0xF0	; 240
     642:	95 e5       	ldi	r25, 0x55	; 85
     644:	01 97       	sbiw	r24, 0x01	; 1
     646:	f1 f7       	brne	.-4      	; 0x644 <Lcd4_Init+0x26>
	_delay_ms(11);
	Lcd4_Cmd(0x03);
     648:	83 e0       	ldi	r24, 0x03	; 3
     64a:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <Lcd4_Cmd>
	/////////////////////////////////////////////////////
	Lcd4_Cmd(0x02);
     64e:	82 e0       	ldi	r24, 0x02	; 2
     650:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <Lcd4_Cmd>
	Lcd4_Cmd(0x02);
     654:	82 e0       	ldi	r24, 0x02	; 2
     656:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <Lcd4_Cmd>
	Lcd4_Cmd(0x08);
     65a:	88 e0       	ldi	r24, 0x08	; 8
     65c:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <Lcd4_Cmd>
	Lcd4_Cmd(0x00);
     660:	80 e0       	ldi	r24, 0x00	; 0
     662:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <Lcd4_Cmd>
	Lcd4_Cmd(0x0C);
     666:	8c e0       	ldi	r24, 0x0C	; 12
     668:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <Lcd4_Cmd>
	Lcd4_Cmd(0x00);
     66c:	80 e0       	ldi	r24, 0x00	; 0
     66e:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <Lcd4_Cmd>
	Lcd4_Cmd(0x06);
     672:	86 e0       	ldi	r24, 0x06	; 6
     674:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <Lcd4_Cmd>
}
     678:	08 95       	ret

0000067a <Lcd4_Write_Char>:

void Lcd4_Write_Char(char a)
{
     67a:	ff 92       	push	r15
     67c:	0f 93       	push	r16
     67e:	1f 93       	push	r17
     680:	f8 2e       	mov	r15, r24
	char temp,y;
	temp = a&0x0F;
	y = a&0xF0;
	pinChange(RS,1);             // => RS = 1
     682:	86 e1       	ldi	r24, 0x16	; 22
     684:	90 e0       	ldi	r25, 0x00	; 0
     686:	61 e0       	ldi	r22, 0x01	; 1
     688:	70 e0       	ldi	r23, 0x00	; 0
     68a:	0e 94 49 00 	call	0x92	; 0x92 <pinChange>
	Lcd4_Port(y>>4);             //Data transfer
     68e:	8f 2d       	mov	r24, r15
     690:	82 95       	swap	r24
     692:	8f 70       	andi	r24, 0x0F	; 15
     694:	0e 94 96 02 	call	0x52c	; 0x52c <Lcd4_Port>
	pinChange(EN,1);
     698:	88 e1       	ldi	r24, 0x18	; 24
     69a:	90 e0       	ldi	r25, 0x00	; 0
     69c:	61 e0       	ldi	r22, 0x01	; 1
     69e:	70 e0       	ldi	r23, 0x00	; 0
     6a0:	0e 94 49 00 	call	0x92	; 0x92 <pinChange>
     6a4:	00 ed       	ldi	r16, 0xD0	; 208
     6a6:	17 e0       	ldi	r17, 0x07	; 7
     6a8:	c8 01       	movw	r24, r16
     6aa:	01 97       	sbiw	r24, 0x01	; 1
     6ac:	f1 f7       	brne	.-4      	; 0x6aa <Lcd4_Write_Char+0x30>
	_delay_ms(1);
	pinChange(EN,0);
     6ae:	88 e1       	ldi	r24, 0x18	; 24
     6b0:	90 e0       	ldi	r25, 0x00	; 0
     6b2:	60 e0       	ldi	r22, 0x00	; 0
     6b4:	70 e0       	ldi	r23, 0x00	; 0
     6b6:	0e 94 49 00 	call	0x92	; 0x92 <pinChange>
     6ba:	c8 01       	movw	r24, r16
     6bc:	01 97       	sbiw	r24, 0x01	; 1
     6be:	f1 f7       	brne	.-4      	; 0x6bc <Lcd4_Write_Char+0x42>
	_delay_ms(1);
	Lcd4_Port(temp);
     6c0:	8f 2d       	mov	r24, r15
     6c2:	8f 70       	andi	r24, 0x0F	; 15
     6c4:	0e 94 96 02 	call	0x52c	; 0x52c <Lcd4_Port>
	pinChange(EN,1);
     6c8:	88 e1       	ldi	r24, 0x18	; 24
     6ca:	90 e0       	ldi	r25, 0x00	; 0
     6cc:	61 e0       	ldi	r22, 0x01	; 1
     6ce:	70 e0       	ldi	r23, 0x00	; 0
     6d0:	0e 94 49 00 	call	0x92	; 0x92 <pinChange>
     6d4:	c8 01       	movw	r24, r16
     6d6:	01 97       	sbiw	r24, 0x01	; 1
     6d8:	f1 f7       	brne	.-4      	; 0x6d6 <Lcd4_Write_Char+0x5c>
	_delay_ms(1);
	pinChange(EN,0);
     6da:	88 e1       	ldi	r24, 0x18	; 24
     6dc:	90 e0       	ldi	r25, 0x00	; 0
     6de:	60 e0       	ldi	r22, 0x00	; 0
     6e0:	70 e0       	ldi	r23, 0x00	; 0
     6e2:	0e 94 49 00 	call	0x92	; 0x92 <pinChange>
     6e6:	c8 01       	movw	r24, r16
     6e8:	01 97       	sbiw	r24, 0x01	; 1
     6ea:	f1 f7       	brne	.-4      	; 0x6e8 <Lcd4_Write_Char+0x6e>
	_delay_ms(1);
}
     6ec:	1f 91       	pop	r17
     6ee:	0f 91       	pop	r16
     6f0:	ff 90       	pop	r15
     6f2:	08 95       	ret

000006f4 <Lcd4_Write_String>:

void Lcd4_Write_String(char *a)
{
     6f4:	cf 93       	push	r28
     6f6:	df 93       	push	r29
     6f8:	ec 01       	movw	r28, r24
     6fa:	02 c0       	rjmp	.+4      	; 0x700 <Lcd4_Write_String+0xc>
	int i;
	for(i=0;a[i]!='\0';i++)
	Lcd4_Write_Char(a[i]);
     6fc:	0e 94 3d 03 	call	0x67a	; 0x67a <Lcd4_Write_Char>
}

void Lcd4_Write_String(char *a)
{
	int i;
	for(i=0;a[i]!='\0';i++)
     700:	89 91       	ld	r24, Y+
     702:	88 23       	and	r24, r24
     704:	d9 f7       	brne	.-10     	; 0x6fc <Lcd4_Write_String+0x8>
	Lcd4_Write_Char(a[i]);
}
     706:	df 91       	pop	r29
     708:	cf 91       	pop	r28
     70a:	08 95       	ret

0000070c <Lcd4_Shift_Right>:

void Lcd4_Shift_Right()
{
	Lcd4_Cmd(0x01);
     70c:	81 e0       	ldi	r24, 0x01	; 1
     70e:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <Lcd4_Cmd>
	Lcd4_Cmd(0x0C);
     712:	8c e0       	ldi	r24, 0x0C	; 12
     714:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <Lcd4_Cmd>
}
     718:	08 95       	ret

0000071a <Lcd4_Shift_Left>:

void Lcd4_Shift_Left()
{
	Lcd4_Cmd(0x01);
     71a:	81 e0       	ldi	r24, 0x01	; 1
     71c:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <Lcd4_Cmd>
	Lcd4_Cmd(0x08);
     720:	88 e0       	ldi	r24, 0x08	; 8
     722:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <Lcd4_Cmd>
}
     726:	08 95       	ret

00000728 <init_port>:
    itoa(roundedDecPart, buffer + len, 10);
}
// function declare//
void init_port()
{
	DDRC = 0xFF; /// COPNFIG LCD
     728:	8f ef       	ldi	r24, 0xFF	; 255
     72a:	84 bb       	out	0x14, r24	; 20
	DDRD = 0b11110000;
     72c:	80 ef       	ldi	r24, 0xF0	; 240
     72e:	81 bb       	out	0x11, r24	; 17
	DDRB = 0b00000000;
     730:	17 ba       	out	0x17, r1	; 23
	PORTD = 0b00000000;
     732:	12 ba       	out	0x12, r1	; 18
	PORTB = 0x00;
     734:	18 ba       	out	0x18, r1	; 24
}
     736:	08 95       	ret

00000738 <find_key>:
		
			_delay_ms(2200);
        }
	}
}
char find_key() {
     738:	e0 e0       	ldi	r30, 0x00	; 0
     73a:	f0 e0       	ldi	r31, 0x00	; 0
    for (int i = 0; i < 4; i++) {
        // Set the i-th bit of PORTD to 1 (columns)
        PORTD = (1 << (i + 4));
     73c:	61 e0       	ldi	r22, 0x01	; 1
     73e:	70 e0       	ldi	r23, 0x00	; 0
     740:	40 e4       	ldi	r20, 0x40	; 64
     742:	5c e9       	ldi	r21, 0x9C	; 156
     744:	34 96       	adiw	r30, 0x04	; 4
     746:	cb 01       	movw	r24, r22
     748:	0e 2e       	mov	r0, r30
     74a:	02 c0       	rjmp	.+4      	; 0x750 <find_key+0x18>
     74c:	88 0f       	add	r24, r24
     74e:	99 1f       	adc	r25, r25
     750:	0a 94       	dec	r0
     752:	e2 f7       	brpl	.-8      	; 0x74c <find_key+0x14>
     754:	34 97       	sbiw	r30, 0x04	; 4
     756:	82 bb       	out	0x12, r24	; 18
     758:	20 e0       	ldi	r18, 0x00	; 0
     75a:	30 e0       	ldi	r19, 0x00	; 0
        // Check each row on PortB
        for (int j = 0; j < 4; j++) {
            if (bit_is_set(PINB, j)) {
     75c:	86 b3       	in	r24, 0x16	; 22
     75e:	90 e0       	ldi	r25, 0x00	; 0
     760:	02 2e       	mov	r0, r18
     762:	02 c0       	rjmp	.+4      	; 0x768 <find_key+0x30>
     764:	95 95       	asr	r25
     766:	87 95       	ror	r24
     768:	0a 94       	dec	r0
     76a:	e2 f7       	brpl	.-8      	; 0x764 <find_key+0x2c>
     76c:	80 ff       	sbrs	r24, 0
     76e:	0a c0       	rjmp	.+20     	; 0x784 <find_key+0x4c>
                // Key pressed, return corresponding character
                return keypad[i][j];
     770:	ee 0f       	add	r30, r30
     772:	ff 1f       	adc	r31, r31
     774:	ee 0f       	add	r30, r30
     776:	ff 1f       	adc	r31, r31
     778:	e2 0f       	add	r30, r18
     77a:	f3 1f       	adc	r31, r19
     77c:	e1 59       	subi	r30, 0x91	; 145
     77e:	ff 4f       	sbci	r31, 0xFF	; 255
     780:	80 81       	ld	r24, Z
     782:	08 95       	ret
char find_key() {
    for (int i = 0; i < 4; i++) {
        // Set the i-th bit of PORTD to 1 (columns)
        PORTD = (1 << (i + 4));
        // Check each row on PortB
        for (int j = 0; j < 4; j++) {
     784:	2f 5f       	subi	r18, 0xFF	; 255
     786:	3f 4f       	sbci	r19, 0xFF	; 255
     788:	24 30       	cpi	r18, 0x04	; 4
     78a:	31 05       	cpc	r19, r1
     78c:	39 f7       	brne	.-50     	; 0x75c <find_key+0x24>
     78e:	ca 01       	movw	r24, r20
     790:	01 97       	sbiw	r24, 0x01	; 1
     792:	f1 f7       	brne	.-4      	; 0x790 <find_key+0x58>
			_delay_ms(2200);
        }
	}
}
char find_key() {
    for (int i = 0; i < 4; i++) {
     794:	31 96       	adiw	r30, 0x01	; 1
     796:	e4 30       	cpi	r30, 0x04	; 4
     798:	f1 05       	cpc	r31, r1
     79a:	a1 f6       	brne	.-88     	; 0x744 <find_key+0xc>
     79c:	80 e0       	ldi	r24, 0x00	; 0
        // Delay for a short period for debounce
        _delay_ms(20);
    }

    return '\0'; // No key pressed
}
     79e:	08 95       	ret

000007a0 <Input_Num>:
	}

}

double Input_Num(double num, char key)
{
     7a0:	4f 92       	push	r4
     7a2:	5f 92       	push	r5
     7a4:	6f 92       	push	r6
     7a6:	7f 92       	push	r7
     7a8:	8f 92       	push	r8
     7aa:	9f 92       	push	r9
     7ac:	af 92       	push	r10
     7ae:	bf 92       	push	r11
     7b0:	cf 92       	push	r12
     7b2:	df 92       	push	r13
     7b4:	ef 92       	push	r14
     7b6:	ff 92       	push	r15
     7b8:	0f 93       	push	r16
     7ba:	1f 93       	push	r17
     7bc:	cf 93       	push	r28
     7be:	df 93       	push	r29
     7c0:	3b 01       	movw	r6, r22
     7c2:	4c 01       	movw	r8, r24
     7c4:	44 2e       	mov	r4, r20
     7c6:	80 91 89 01 	lds	r24, 0x0189
    if (key == '.')
     7ca:	9e e2       	ldi	r25, 0x2E	; 46
     7cc:	49 17       	cp	r20, r25
     7ce:	99 f4       	brne	.+38     	; 0x7f6 <Input_Num+0x56>
    {
        if (Dot_Flag == 0)
     7d0:	88 23       	and	r24, r24
     7d2:	09 f0       	breq	.+2      	; 0x7d6 <Input_Num+0x36>
     7d4:	a9 c0       	rjmp	.+338    	; 0x928 <__stack+0xc9>
        {
			Lcd4_Set_Cursor(1, c);
     7d6:	10 91 ad 01 	lds	r17, 0x01AD
     7da:	81 e0       	ldi	r24, 0x01	; 1
     7dc:	61 2f       	mov	r22, r17
     7de:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <Lcd4_Set_Cursor>
            Lcd4_Write_Char(key);
     7e2:	8e e2       	ldi	r24, 0x2E	; 46
     7e4:	0e 94 3d 03 	call	0x67a	; 0x67a <Lcd4_Write_Char>
            c++;
     7e8:	1f 5f       	subi	r17, 0xFF	; 255
     7ea:	10 93 ad 01 	sts	0x01AD, r17
            Dot_Flag = 1;
     7ee:	81 e0       	ldi	r24, 0x01	; 1
     7f0:	80 93 89 01 	sts	0x0189, r24
     7f4:	99 c0       	rjmp	.+306    	; 0x928 <__stack+0xc9>
        }
    }
    else
    {
        if (Dot_Flag == 1)
     7f6:	81 30       	cpi	r24, 0x01	; 1
     7f8:	a1 f5       	brne	.+104    	; 0x862 <__stack+0x3>
        {
            num = num + (key - '0') * 0.1;
     7fa:	64 2f       	mov	r22, r20
     7fc:	70 e0       	ldi	r23, 0x00	; 0
     7fe:	60 53       	subi	r22, 0x30	; 48
     800:	70 40       	sbci	r23, 0x00	; 0
     802:	88 27       	eor	r24, r24
     804:	77 fd       	sbrc	r23, 7
     806:	80 95       	com	r24
     808:	98 2f       	mov	r25, r24
     80a:	0e 94 a7 0a 	call	0x154e	; 0x154e <__floatsisf>
     80e:	2d ec       	ldi	r18, 0xCD	; 205
     810:	3c ec       	ldi	r19, 0xCC	; 204
     812:	4c ec       	ldi	r20, 0xCC	; 204
     814:	5d e3       	ldi	r21, 0x3D	; 61
     816:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <__mulsf3>
     81a:	9b 01       	movw	r18, r22
     81c:	ac 01       	movw	r20, r24
     81e:	c4 01       	movw	r24, r8
     820:	b3 01       	movw	r22, r6
     822:	0e 94 a4 08 	call	0x1148	; 0x1148 <__addsf3>
     826:	3b 01       	movw	r6, r22
     828:	4c 01       	movw	r8, r24
            Lcd4_Set_Cursor(1, c);
     82a:	10 91 ad 01 	lds	r17, 0x01AD
     82e:	81 e0       	ldi	r24, 0x01	; 1
     830:	61 2f       	mov	r22, r17
     832:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <Lcd4_Set_Cursor>
            Lcd4_Write_Char(key);
     836:	84 2d       	mov	r24, r4
     838:	0e 94 3d 03 	call	0x67a	; 0x67a <Lcd4_Write_Char>
            c++;
     83c:	1f 5f       	subi	r17, 0xFF	; 255
     83e:	10 93 ad 01 	sts	0x01AD, r17
            Dot_Flag = 2;
     842:	82 e0       	ldi	r24, 0x02	; 2
     844:	80 93 89 01 	sts	0x0189, r24
			Fl_Sign = 10;
     848:	80 e0       	ldi	r24, 0x00	; 0
     84a:	90 e0       	ldi	r25, 0x00	; 0
     84c:	a0 e2       	ldi	r26, 0x20	; 32
     84e:	b1 e4       	ldi	r27, 0x41	; 65
     850:	80 93 8d 01 	sts	0x018D, r24
     854:	90 93 8e 01 	sts	0x018E, r25
     858:	a0 93 8f 01 	sts	0x018F, r26
     85c:	b0 93 90 01 	sts	0x0190, r27
     860:	63 c0       	rjmp	.+198    	; 0x928 <__stack+0xc9>
     862:	50 90 ad 01 	lds	r5, 0x01AD
     866:	c4 2f       	mov	r28, r20
     868:	d0 e0       	ldi	r29, 0x00	; 0
            return num;
        }
		else if (Dot_Flag == 2)
     86a:	82 30       	cpi	r24, 0x02	; 2
     86c:	c9 f5       	brne	.+114    	; 0x8e0 <__stack+0x81>
		{
			num = num + (key - '0') * (0.1 /Fl_Sign);
     86e:	a0 90 8d 01 	lds	r10, 0x018D
     872:	b0 90 8e 01 	lds	r11, 0x018E
     876:	c0 90 8f 01 	lds	r12, 0x018F
     87a:	d0 90 90 01 	lds	r13, 0x0190
     87e:	e0 97       	sbiw	r28, 0x30	; 48
     880:	be 01       	movw	r22, r28
     882:	88 27       	eor	r24, r24
     884:	77 fd       	sbrc	r23, 7
     886:	80 95       	com	r24
     888:	98 2f       	mov	r25, r24
     88a:	0e 94 a7 0a 	call	0x154e	; 0x154e <__floatsisf>
     88e:	7b 01       	movw	r14, r22
     890:	8c 01       	movw	r16, r24
     892:	6d ec       	ldi	r22, 0xCD	; 205
     894:	7c ec       	ldi	r23, 0xCC	; 204
     896:	8c ec       	ldi	r24, 0xCC	; 204
     898:	9d e3       	ldi	r25, 0x3D	; 61
     89a:	a6 01       	movw	r20, r12
     89c:	95 01       	movw	r18, r10
     89e:	0e 94 cb 09 	call	0x1396	; 0x1396 <__divsf3>
     8a2:	9b 01       	movw	r18, r22
     8a4:	ac 01       	movw	r20, r24
     8a6:	c8 01       	movw	r24, r16
     8a8:	b7 01       	movw	r22, r14
     8aa:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <__mulsf3>
     8ae:	9b 01       	movw	r18, r22
     8b0:	ac 01       	movw	r20, r24
     8b2:	c4 01       	movw	r24, r8
     8b4:	b3 01       	movw	r22, r6
     8b6:	0e 94 a4 08 	call	0x1148	; 0x1148 <__addsf3>
     8ba:	3b 01       	movw	r6, r22
     8bc:	4c 01       	movw	r8, r24
			Fl_Sign = Fl_Sign*10;
     8be:	c6 01       	movw	r24, r12
     8c0:	b5 01       	movw	r22, r10
     8c2:	20 e0       	ldi	r18, 0x00	; 0
     8c4:	30 e0       	ldi	r19, 0x00	; 0
     8c6:	40 e2       	ldi	r20, 0x20	; 32
     8c8:	51 e4       	ldi	r21, 0x41	; 65
     8ca:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <__mulsf3>
     8ce:	60 93 8d 01 	sts	0x018D, r22
     8d2:	70 93 8e 01 	sts	0x018E, r23
     8d6:	80 93 8f 01 	sts	0x018F, r24
     8da:	90 93 90 01 	sts	0x0190, r25
     8de:	1a c0       	rjmp	.+52     	; 0x914 <__stack+0xb5>
			c++;
			return num;
		}
        else
        {
            num = num * 10 + (key - '0');
     8e0:	c4 01       	movw	r24, r8
     8e2:	b3 01       	movw	r22, r6
     8e4:	20 e0       	ldi	r18, 0x00	; 0
     8e6:	30 e0       	ldi	r19, 0x00	; 0
     8e8:	40 e2       	ldi	r20, 0x20	; 32
     8ea:	51 e4       	ldi	r21, 0x41	; 65
     8ec:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <__mulsf3>
     8f0:	7b 01       	movw	r14, r22
     8f2:	8c 01       	movw	r16, r24
     8f4:	e0 97       	sbiw	r28, 0x30	; 48
     8f6:	be 01       	movw	r22, r28
     8f8:	88 27       	eor	r24, r24
     8fa:	77 fd       	sbrc	r23, 7
     8fc:	80 95       	com	r24
     8fe:	98 2f       	mov	r25, r24
     900:	0e 94 a7 0a 	call	0x154e	; 0x154e <__floatsisf>
     904:	9b 01       	movw	r18, r22
     906:	ac 01       	movw	r20, r24
     908:	c8 01       	movw	r24, r16
     90a:	b7 01       	movw	r22, r14
     90c:	0e 94 a4 08 	call	0x1148	; 0x1148 <__addsf3>
     910:	3b 01       	movw	r6, r22
     912:	4c 01       	movw	r8, r24
            Lcd4_Set_Cursor(1, c);
     914:	81 e0       	ldi	r24, 0x01	; 1
     916:	65 2d       	mov	r22, r5
     918:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <Lcd4_Set_Cursor>
            Lcd4_Write_Char(key);
     91c:	84 2d       	mov	r24, r4
     91e:	0e 94 3d 03 	call	0x67a	; 0x67a <Lcd4_Write_Char>
            c++;
     922:	53 94       	inc	r5
     924:	50 92 ad 01 	sts	0x01AD, r5
            return num;
        }
    }

    return num;
}
     928:	b3 01       	movw	r22, r6
     92a:	c4 01       	movw	r24, r8
     92c:	df 91       	pop	r29
     92e:	cf 91       	pop	r28
     930:	1f 91       	pop	r17
     932:	0f 91       	pop	r16
     934:	ff 90       	pop	r15
     936:	ef 90       	pop	r14
     938:	df 90       	pop	r13
     93a:	cf 90       	pop	r12
     93c:	bf 90       	pop	r11
     93e:	af 90       	pop	r10
     940:	9f 90       	pop	r9
     942:	8f 90       	pop	r8
     944:	7f 90       	pop	r7
     946:	6f 90       	pop	r6
     948:	5f 90       	pop	r5
     94a:	4f 90       	pop	r4
     94c:	08 95       	ret

0000094e <__vector_1>:

ISR (INT0_vect){ 		// ISR for external interrupt 0
     94e:	1f 92       	push	r1
     950:	0f 92       	push	r0
     952:	0f b6       	in	r0, 0x3f	; 63
     954:	0f 92       	push	r0
     956:	11 24       	eor	r1, r1
     958:	2f 93       	push	r18
     95a:	3f 93       	push	r19
     95c:	4f 93       	push	r20
     95e:	5f 93       	push	r21
     960:	6f 93       	push	r22
     962:	7f 93       	push	r23
     964:	8f 93       	push	r24
     966:	9f 93       	push	r25
     968:	af 93       	push	r26
     96a:	bf 93       	push	r27
     96c:	ef 93       	push	r30
     96e:	ff 93       	push	r31
	Lcd4_Clear();
     970:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <Lcd4_Clear>
     974:	80 e4       	ldi	r24, 0x40	; 64
     976:	9c e9       	ldi	r25, 0x9C	; 156
     978:	01 97       	sbiw	r24, 0x01	; 1
     97a:	f1 f7       	brne	.-4      	; 0x978 <__vector_1+0x2a>
	_delay_ms(20);
	result = 0;
     97c:	80 e0       	ldi	r24, 0x00	; 0
     97e:	90 e0       	ldi	r25, 0x00	; 0
     980:	a0 e0       	ldi	r26, 0x00	; 0
     982:	b0 e0       	ldi	r27, 0x00	; 0
     984:	80 93 a5 01 	sts	0x01A5, r24
     988:	90 93 a6 01 	sts	0x01A6, r25
     98c:	a0 93 a7 01 	sts	0x01A7, r26
     990:	b0 93 a8 01 	sts	0x01A8, r27
	a = 0;
     994:	80 93 a9 01 	sts	0x01A9, r24
     998:	90 93 aa 01 	sts	0x01AA, r25
     99c:	a0 93 ab 01 	sts	0x01AB, r26
     9a0:	b0 93 ac 01 	sts	0x01AC, r27
	c = 0;
     9a4:	10 92 ad 01 	sts	0x01AD, r1
	b = 0;
     9a8:	80 93 ae 01 	sts	0x01AE, r24
     9ac:	90 93 af 01 	sts	0x01AF, r25
     9b0:	a0 93 b0 01 	sts	0x01B0, r26
     9b4:	b0 93 b1 01 	sts	0x01B1, r27
	Dot_Flag = 0;
     9b8:	10 92 89 01 	sts	0x0189, r1
	Op_Flag = 0;
     9bc:	10 92 8a 01 	sts	0x018A, r1
	D_Flag = 0;
     9c0:	10 92 8b 01 	sts	0x018B, r1
	A_Flag = 0;
     9c4:	10 92 8c 01 	sts	0x018C, r1

}
     9c8:	ff 91       	pop	r31
     9ca:	ef 91       	pop	r30
     9cc:	bf 91       	pop	r27
     9ce:	af 91       	pop	r26
     9d0:	9f 91       	pop	r25
     9d2:	8f 91       	pop	r24
     9d4:	7f 91       	pop	r23
     9d6:	6f 91       	pop	r22
     9d8:	5f 91       	pop	r21
     9da:	4f 91       	pop	r20
     9dc:	3f 91       	pop	r19
     9de:	2f 91       	pop	r18
     9e0:	0f 90       	pop	r0
     9e2:	0f be       	out	0x3f, r0	; 63
     9e4:	0f 90       	pop	r0
     9e6:	1f 90       	pop	r1
     9e8:	18 95       	reti

000009ea <floatToString>:
void lcd_display();
char find_key();
double Input_Num(double num, char key); 
void enter_number(char key);

void floatToString(float number, char* buffer, int precision) {
     9ea:	8f 92       	push	r8
     9ec:	9f 92       	push	r9
     9ee:	af 92       	push	r10
     9f0:	bf 92       	push	r11
     9f2:	cf 92       	push	r12
     9f4:	df 92       	push	r13
     9f6:	ef 92       	push	r14
     9f8:	ff 92       	push	r15
     9fa:	0f 93       	push	r16
     9fc:	1f 93       	push	r17
     9fe:	cf 93       	push	r28
     a00:	df 93       	push	r29
     a02:	7b 01       	movw	r14, r22
     a04:	8c 01       	movw	r16, r24
     a06:	5a 01       	movw	r10, r20
     a08:	69 01       	movw	r12, r18
    int intPart = (int)number;
     a0a:	0e 94 05 0b 	call	0x160a	; 0x160a <__fixsfsi>
     a0e:	4b 01       	movw	r8, r22
     a10:	c1 e0       	ldi	r28, 0x01	; 1
     a12:	d0 e0       	ldi	r29, 0x00	; 0
     a14:	20 e0       	ldi	r18, 0x00	; 0
     a16:	30 e0       	ldi	r19, 0x00	; 0
     a18:	0c c0       	rjmp	.+24     	; 0xa32 <floatToString+0x48>
    float decPart = number - intPart;

    // Calculate the multiplier based on desired precision
    int multiplier = 1;
    for (int i = 0; i < precision; i++) {
        multiplier *= 10;
     a1a:	ce 01       	movw	r24, r28
     a1c:	88 0f       	add	r24, r24
     a1e:	99 1f       	adc	r25, r25
     a20:	43 e0       	ldi	r20, 0x03	; 3
     a22:	cc 0f       	add	r28, r28
     a24:	dd 1f       	adc	r29, r29
     a26:	4a 95       	dec	r20
     a28:	e1 f7       	brne	.-8      	; 0xa22 <floatToString+0x38>
     a2a:	c8 0f       	add	r28, r24
     a2c:	d9 1f       	adc	r29, r25
    int intPart = (int)number;
    float decPart = number - intPart;

    // Calculate the multiplier based on desired precision
    int multiplier = 1;
    for (int i = 0; i < precision; i++) {
     a2e:	2f 5f       	subi	r18, 0xFF	; 255
     a30:	3f 4f       	sbci	r19, 0xFF	; 255
     a32:	2c 15       	cp	r18, r12
     a34:	3d 05       	cpc	r19, r13
     a36:	8c f3       	brlt	.-30     	; 0xa1a <floatToString+0x30>

    // Round the decimal part to the desired precision
    int roundedDecPart = (int)(decPart * multiplier + 0.5);

    // Convert integer part to string
    itoa(intPart, buffer, 10);
     a38:	c4 01       	movw	r24, r8
     a3a:	b5 01       	movw	r22, r10
     a3c:	4a e0       	ldi	r20, 0x0A	; 10
     a3e:	50 e0       	ldi	r21, 0x00	; 0
     a40:	0e 94 85 0d 	call	0x1b0a	; 0x1b0a <itoa>
     a44:	f5 01       	movw	r30, r10
     a46:	60 e0       	ldi	r22, 0x00	; 0
     a48:	70 e0       	ldi	r23, 0x00	; 0
     a4a:	01 c0       	rjmp	.+2      	; 0xa4e <floatToString+0x64>

    // Find the length of the integer part
    int len = 0;
    while (buffer[len] != '\0') {
        len++;
     a4c:	b6 01       	movw	r22, r12
     a4e:	df 01       	movw	r26, r30
    // Convert integer part to string
    itoa(intPart, buffer, 10);

    // Find the length of the integer part
    int len = 0;
    while (buffer[len] != '\0') {
     a50:	81 91       	ld	r24, Z+
     a52:	6b 01       	movw	r12, r22
     a54:	08 94       	sec
     a56:	c1 1c       	adc	r12, r1
     a58:	d1 1c       	adc	r13, r1
     a5a:	88 23       	and	r24, r24
     a5c:	b9 f7       	brne	.-18     	; 0xa4c <floatToString+0x62>
        len++;
    }

    // Add decimal point
    buffer[len] = '.';
     a5e:	8e e2       	ldi	r24, 0x2E	; 46
     a60:	8c 93       	st	X, r24
    len++;

    // Convert rounded decimal part to string
    itoa(roundedDecPart, buffer + len, 10);
     a62:	b4 01       	movw	r22, r8
     a64:	88 27       	eor	r24, r24
     a66:	77 fd       	sbrc	r23, 7
     a68:	80 95       	com	r24
     a6a:	98 2f       	mov	r25, r24
     a6c:	0e 94 a7 0a 	call	0x154e	; 0x154e <__floatsisf>
     a70:	9b 01       	movw	r18, r22
     a72:	ac 01       	movw	r20, r24
     a74:	c8 01       	movw	r24, r16
     a76:	b7 01       	movw	r22, r14
     a78:	0e 94 73 08 	call	0x10e6	; 0x10e6 <__subsf3>
     a7c:	7b 01       	movw	r14, r22
     a7e:	8c 01       	movw	r16, r24
     a80:	be 01       	movw	r22, r28
     a82:	88 27       	eor	r24, r24
     a84:	77 fd       	sbrc	r23, 7
     a86:	80 95       	com	r24
     a88:	98 2f       	mov	r25, r24
     a8a:	0e 94 a7 0a 	call	0x154e	; 0x154e <__floatsisf>
     a8e:	9b 01       	movw	r18, r22
     a90:	ac 01       	movw	r20, r24
     a92:	c8 01       	movw	r24, r16
     a94:	b7 01       	movw	r22, r14
     a96:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <__mulsf3>
     a9a:	20 e0       	ldi	r18, 0x00	; 0
     a9c:	30 e0       	ldi	r19, 0x00	; 0
     a9e:	40 e0       	ldi	r20, 0x00	; 0
     aa0:	5f e3       	ldi	r21, 0x3F	; 63
     aa2:	0e 94 a4 08 	call	0x1148	; 0x1148 <__addsf3>
     aa6:	0e 94 05 0b 	call	0x160a	; 0x160a <__fixsfsi>
     aaa:	dc 01       	movw	r26, r24
     aac:	cb 01       	movw	r24, r22
     aae:	ca 0c       	add	r12, r10
     ab0:	db 1c       	adc	r13, r11
     ab2:	b6 01       	movw	r22, r12
     ab4:	4a e0       	ldi	r20, 0x0A	; 10
     ab6:	50 e0       	ldi	r21, 0x00	; 0
     ab8:	0e 94 85 0d 	call	0x1b0a	; 0x1b0a <itoa>
}
     abc:	df 91       	pop	r29
     abe:	cf 91       	pop	r28
     ac0:	1f 91       	pop	r17
     ac2:	0f 91       	pop	r16
     ac4:	ff 90       	pop	r15
     ac6:	ef 90       	pop	r14
     ac8:	df 90       	pop	r13
     aca:	cf 90       	pop	r12
     acc:	bf 90       	pop	r11
     ace:	af 90       	pop	r10
     ad0:	9f 90       	pop	r9
     ad2:	8f 90       	pop	r8
     ad4:	08 95       	ret

00000ad6 <enter_number>:

    return '\0'; // No key pressed
}
//
void enter_number(char key)
{
     ad6:	af 92       	push	r10
     ad8:	bf 92       	push	r11
     ada:	cf 92       	push	r12
     adc:	df 92       	push	r13
     ade:	ef 92       	push	r14
     ae0:	ff 92       	push	r15
     ae2:	0f 93       	push	r16
     ae4:	1f 93       	push	r17
     ae6:	08 2f       	mov	r16, r24
	
	if((key == '.'||(key >= '0' && key <= '9')))
     ae8:	8e 32       	cpi	r24, 0x2E	; 46
     aea:	19 f0       	breq	.+6      	; 0xaf2 <enter_number+0x1c>
     aec:	80 53       	subi	r24, 0x30	; 48
     aee:	8a 30       	cpi	r24, 0x0A	; 10
     af0:	78 f5       	brcc	.+94     	; 0xb50 <enter_number+0x7a>
	{
		if(Op_Flag == 0) // enter num for A
     af2:	80 91 8a 01 	lds	r24, 0x018A
     af6:	88 23       	and	r24, r24
     af8:	a1 f4       	brne	.+40     	; 0xb22 <enter_number+0x4c>
		{
			a = Input_Num(a,key);
     afa:	60 91 a9 01 	lds	r22, 0x01A9
     afe:	70 91 aa 01 	lds	r23, 0x01AA
     b02:	80 91 ab 01 	lds	r24, 0x01AB
     b06:	90 91 ac 01 	lds	r25, 0x01AC
     b0a:	40 2f       	mov	r20, r16
     b0c:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <Input_Num>
     b10:	60 93 a9 01 	sts	0x01A9, r22
     b14:	70 93 aa 01 	sts	0x01AA, r23
     b18:	80 93 ab 01 	sts	0x01AB, r24
     b1c:	90 93 ac 01 	sts	0x01AC, r25
     b20:	66 c1       	rjmp	.+716    	; 0xdee <enter_number+0x318>
		}
		else
		{
			Op_Flag = 1; // enter num for B
     b22:	81 e0       	ldi	r24, 0x01	; 1
     b24:	80 93 8a 01 	sts	0x018A, r24
			b = Input_Num(b,key);
     b28:	60 91 ae 01 	lds	r22, 0x01AE
     b2c:	70 91 af 01 	lds	r23, 0x01AF
     b30:	80 91 b0 01 	lds	r24, 0x01B0
     b34:	90 91 b1 01 	lds	r25, 0x01B1
     b38:	40 2f       	mov	r20, r16
     b3a:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <Input_Num>
     b3e:	60 93 ae 01 	sts	0x01AE, r22
     b42:	70 93 af 01 	sts	0x01AF, r23
     b46:	80 93 b0 01 	sts	0x01B0, r24
     b4a:	90 93 b1 01 	sts	0x01B1, r25
     b4e:	4f c1       	rjmp	.+670    	; 0xdee <enter_number+0x318>
		}
	}
	else if( key == '=')
     b50:	0d 33       	cpi	r16, 0x3D	; 61
     b52:	09 f0       	breq	.+2      	; 0xb56 <enter_number+0x80>
     b54:	00 c1       	rjmp	.+512    	; 0xd56 <enter_number+0x280>
	{
		if(Op_Flag  == 0)
     b56:	80 91 8a 01 	lds	r24, 0x018A
     b5a:	88 23       	and	r24, r24
     b5c:	a9 f4       	brne	.+42     	; 0xb88 <enter_number+0xb2>
		{
			Lcd4_Set_Cursor(2, 1);
     b5e:	82 e0       	ldi	r24, 0x02	; 2
     b60:	61 e0       	ldi	r22, 0x01	; 1
     b62:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <Lcd4_Set_Cursor>
			result = a;	
     b66:	e0 90 a9 01 	lds	r14, 0x01A9
     b6a:	f0 90 aa 01 	lds	r15, 0x01AA
     b6e:	00 91 ab 01 	lds	r16, 0x01AB
     b72:	10 91 ac 01 	lds	r17, 0x01AC
     b76:	e0 92 a5 01 	sts	0x01A5, r14
     b7a:	f0 92 a6 01 	sts	0x01A6, r15
     b7e:	00 93 a7 01 	sts	0x01A7, r16
     b82:	10 93 a8 01 	sts	0x01A8, r17
     b86:	93 c0       	rjmp	.+294    	; 0xcae <enter_number+0x1d8>
			A_Flag = 1;
			b = 0;
		}
		else
		{
			Op_Flag = 0;
     b88:	10 92 8a 01 	sts	0x018A, r1
			switch(operate)
     b8c:	80 91 88 01 	lds	r24, 0x0188
     b90:	8f 32       	cpi	r24, 0x2F	; 47
     b92:	09 f4       	brne	.+2      	; 0xb96 <enter_number+0xc0>
     b94:	45 c0       	rjmp	.+138    	; 0xc20 <enter_number+0x14a>
     b96:	80 33       	cpi	r24, 0x30	; 48
     b98:	30 f4       	brcc	.+12     	; 0xba6 <enter_number+0xd0>
     b9a:	8b 32       	cpi	r24, 0x2B	; 43
     b9c:	41 f0       	breq	.+16     	; 0xbae <enter_number+0xd8>
     b9e:	8d 32       	cpi	r24, 0x2D	; 45
     ba0:	09 f0       	breq	.+2      	; 0xba4 <enter_number+0xce>
     ba2:	79 c0       	rjmp	.+242    	; 0xc96 <enter_number+0x1c0>
     ba4:	17 c0       	rjmp	.+46     	; 0xbd4 <enter_number+0xfe>
     ba6:	88 37       	cpi	r24, 0x78	; 120
     ba8:	09 f0       	breq	.+2      	; 0xbac <enter_number+0xd6>
     baa:	75 c0       	rjmp	.+234    	; 0xc96 <enter_number+0x1c0>
     bac:	26 c0       	rjmp	.+76     	; 0xbfa <enter_number+0x124>
			{
				case '+':
					result = a + b;
     bae:	60 91 a9 01 	lds	r22, 0x01A9
     bb2:	70 91 aa 01 	lds	r23, 0x01AA
     bb6:	80 91 ab 01 	lds	r24, 0x01AB
     bba:	90 91 ac 01 	lds	r25, 0x01AC
     bbe:	20 91 ae 01 	lds	r18, 0x01AE
     bc2:	30 91 af 01 	lds	r19, 0x01AF
     bc6:	40 91 b0 01 	lds	r20, 0x01B0
     bca:	50 91 b1 01 	lds	r21, 0x01B1
     bce:	0e 94 a4 08 	call	0x1148	; 0x1148 <__addsf3>
     bd2:	4d c0       	rjmp	.+154    	; 0xc6e <enter_number+0x198>
					a = result;
					break;
				case '-':
					result = a - b;
     bd4:	60 91 a9 01 	lds	r22, 0x01A9
     bd8:	70 91 aa 01 	lds	r23, 0x01AA
     bdc:	80 91 ab 01 	lds	r24, 0x01AB
     be0:	90 91 ac 01 	lds	r25, 0x01AC
     be4:	20 91 ae 01 	lds	r18, 0x01AE
     be8:	30 91 af 01 	lds	r19, 0x01AF
     bec:	40 91 b0 01 	lds	r20, 0x01B0
     bf0:	50 91 b1 01 	lds	r21, 0x01B1
     bf4:	0e 94 73 08 	call	0x10e6	; 0x10e6 <__subsf3>
     bf8:	3a c0       	rjmp	.+116    	; 0xc6e <enter_number+0x198>
					a = result;
					break;
				case 'x':
					result = a * b;
     bfa:	60 91 a9 01 	lds	r22, 0x01A9
     bfe:	70 91 aa 01 	lds	r23, 0x01AA
     c02:	80 91 ab 01 	lds	r24, 0x01AB
     c06:	90 91 ac 01 	lds	r25, 0x01AC
     c0a:	20 91 ae 01 	lds	r18, 0x01AE
     c0e:	30 91 af 01 	lds	r19, 0x01AF
     c12:	40 91 b0 01 	lds	r20, 0x01B0
     c16:	50 91 b1 01 	lds	r21, 0x01B1
     c1a:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <__mulsf3>
     c1e:	27 c0       	rjmp	.+78     	; 0xc6e <enter_number+0x198>
					a = result;
					break;
				case '/':
					if(b == 0)
     c20:	e0 90 ae 01 	lds	r14, 0x01AE
     c24:	f0 90 af 01 	lds	r15, 0x01AF
     c28:	00 91 b0 01 	lds	r16, 0x01B0
     c2c:	10 91 b1 01 	lds	r17, 0x01B1
     c30:	c8 01       	movw	r24, r16
     c32:	b7 01       	movw	r22, r14
     c34:	20 e0       	ldi	r18, 0x00	; 0
     c36:	30 e0       	ldi	r19, 0x00	; 0
     c38:	40 e0       	ldi	r20, 0x00	; 0
     c3a:	50 e0       	ldi	r21, 0x00	; 0
     c3c:	0e 94 77 0a 	call	0x14ee	; 0x14ee <__eqsf2>
     c40:	88 23       	and	r24, r24
     c42:	49 f4       	brne	.+18     	; 0xc56 <enter_number+0x180>
					{
						Lcd4_Set_Cursor(2,1);
     c44:	82 e0       	ldi	r24, 0x02	; 2
     c46:	61 e0       	ldi	r22, 0x01	; 1
     c48:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <Lcd4_Set_Cursor>
						Lcd4_Write_String("INVALID");
     c4c:	83 e6       	ldi	r24, 0x63	; 99
     c4e:	90 e0       	ldi	r25, 0x00	; 0
     c50:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <Lcd4_Write_String>
     c54:	20 c0       	rjmp	.+64     	; 0xc96 <enter_number+0x1c0>
						break;			
					}
					result = a / b;
     c56:	60 91 a9 01 	lds	r22, 0x01A9
     c5a:	70 91 aa 01 	lds	r23, 0x01AA
     c5e:	80 91 ab 01 	lds	r24, 0x01AB
     c62:	90 91 ac 01 	lds	r25, 0x01AC
     c66:	a8 01       	movw	r20, r16
     c68:	97 01       	movw	r18, r14
     c6a:	0e 94 cb 09 	call	0x1396	; 0x1396 <__divsf3>
     c6e:	dc 01       	movw	r26, r24
     c70:	9b 01       	movw	r18, r22
     c72:	ac 01       	movw	r20, r24
     c74:	20 93 a5 01 	sts	0x01A5, r18
     c78:	30 93 a6 01 	sts	0x01A6, r19
     c7c:	40 93 a7 01 	sts	0x01A7, r20
     c80:	50 93 a8 01 	sts	0x01A8, r21
					a = result;
     c84:	cb 01       	movw	r24, r22
     c86:	80 93 a9 01 	sts	0x01A9, r24
     c8a:	90 93 aa 01 	sts	0x01AA, r25
     c8e:	a0 93 ab 01 	sts	0x01AB, r26
     c92:	b0 93 ac 01 	sts	0x01AC, r27
					break;
				default:
					break;
			}
			Lcd4_Set_Cursor(2, 1);
     c96:	82 e0       	ldi	r24, 0x02	; 2
     c98:	61 e0       	ldi	r22, 0x01	; 1
     c9a:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <Lcd4_Set_Cursor>

	    // Check if the result is an integer (no decimal part)
	    	if ((result - (int)result) == 0)
     c9e:	e0 90 a5 01 	lds	r14, 0x01A5
     ca2:	f0 90 a6 01 	lds	r15, 0x01A6
     ca6:	00 91 a7 01 	lds	r16, 0x01A7
     caa:	10 91 a8 01 	lds	r17, 0x01A8
     cae:	c8 01       	movw	r24, r16
     cb0:	b7 01       	movw	r22, r14
     cb2:	0e 94 05 0b 	call	0x160a	; 0x160a <__fixsfsi>
     cb6:	5b 01       	movw	r10, r22
     cb8:	6c 01       	movw	r12, r24
     cba:	b5 01       	movw	r22, r10
     cbc:	88 27       	eor	r24, r24
     cbe:	77 fd       	sbrc	r23, 7
     cc0:	80 95       	com	r24
     cc2:	98 2f       	mov	r25, r24
     cc4:	0e 94 a7 0a 	call	0x154e	; 0x154e <__floatsisf>
     cc8:	9b 01       	movw	r18, r22
     cca:	ac 01       	movw	r20, r24
     ccc:	c8 01       	movw	r24, r16
     cce:	b7 01       	movw	r22, r14
     cd0:	0e 94 73 08 	call	0x10e6	; 0x10e6 <__subsf3>
     cd4:	20 e0       	ldi	r18, 0x00	; 0
     cd6:	30 e0       	ldi	r19, 0x00	; 0
     cd8:	40 e0       	ldi	r20, 0x00	; 0
     cda:	50 e0       	ldi	r21, 0x00	; 0
     cdc:	0e 94 77 0a 	call	0x14ee	; 0x14ee <__eqsf2>
     ce0:	41 e9       	ldi	r20, 0x91	; 145
     ce2:	51 e0       	ldi	r21, 0x01	; 1
     ce4:	88 23       	and	r24, r24
     ce6:	e9 f4       	brne	.+58     	; 0xd22 <enter_number+0x24c>
	    	{
	        	sprintf(Lcd_Result, "%d", (int)result);
     ce8:	00 d0       	rcall	.+0      	; 0xcea <enter_number+0x214>
     cea:	00 d0       	rcall	.+0      	; 0xcec <enter_number+0x216>
     cec:	00 d0       	rcall	.+0      	; 0xcee <enter_number+0x218>
     cee:	ed b7       	in	r30, 0x3d	; 61
     cf0:	fe b7       	in	r31, 0x3e	; 62
     cf2:	31 96       	adiw	r30, 0x01	; 1
     cf4:	ad b7       	in	r26, 0x3d	; 61
     cf6:	be b7       	in	r27, 0x3e	; 62
     cf8:	12 96       	adiw	r26, 0x02	; 2
     cfa:	5c 93       	st	X, r21
     cfc:	4e 93       	st	-X, r20
     cfe:	11 97       	sbiw	r26, 0x01	; 1
     d00:	80 e6       	ldi	r24, 0x60	; 96
     d02:	90 e0       	ldi	r25, 0x00	; 0
     d04:	93 83       	std	Z+3, r25	; 0x03
     d06:	82 83       	std	Z+2, r24	; 0x02
     d08:	b5 82       	std	Z+5, r11	; 0x05
     d0a:	a4 82       	std	Z+4, r10	; 0x04
     d0c:	0e 94 a6 0d 	call	0x1b4c	; 0x1b4c <sprintf>
     d10:	8d b7       	in	r24, 0x3d	; 61
     d12:	9e b7       	in	r25, 0x3e	; 62
     d14:	06 96       	adiw	r24, 0x06	; 6
     d16:	0f b6       	in	r0, 0x3f	; 63
     d18:	f8 94       	cli
     d1a:	9e bf       	out	0x3e, r25	; 62
     d1c:	0f be       	out	0x3f, r0	; 63
     d1e:	8d bf       	out	0x3d, r24	; 61
     d20:	06 c0       	rjmp	.+12     	; 0xd2e <enter_number+0x258>
	    	}
	    	else
	    	{
				floatToString(result,Lcd_Result,2);
     d22:	c8 01       	movw	r24, r16
     d24:	b7 01       	movw	r22, r14
     d26:	22 e0       	ldi	r18, 0x02	; 2
     d28:	30 e0       	ldi	r19, 0x00	; 0
     d2a:	0e 94 f5 04 	call	0x9ea	; 0x9ea <floatToString>
	    	}

	    	Lcd4_Write_String(Lcd_Result);
     d2e:	81 e9       	ldi	r24, 0x91	; 145
     d30:	91 e0       	ldi	r25, 0x01	; 1
     d32:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <Lcd4_Write_String>
			A_Flag = 1;
     d36:	81 e0       	ldi	r24, 0x01	; 1
     d38:	80 93 8c 01 	sts	0x018C, r24
			b = 0;
     d3c:	80 e0       	ldi	r24, 0x00	; 0
     d3e:	90 e0       	ldi	r25, 0x00	; 0
     d40:	a0 e0       	ldi	r26, 0x00	; 0
     d42:	b0 e0       	ldi	r27, 0x00	; 0
     d44:	80 93 ae 01 	sts	0x01AE, r24
     d48:	90 93 af 01 	sts	0x01AF, r25
     d4c:	a0 93 b0 01 	sts	0x01B0, r26
     d50:	b0 93 b1 01 	sts	0x01B1, r27
     d54:	4c c0       	rjmp	.+152    	; 0xdee <enter_number+0x318>
		}
	}
	else
	{
		Fl_Sign = 0;
     d56:	80 e0       	ldi	r24, 0x00	; 0
     d58:	90 e0       	ldi	r25, 0x00	; 0
     d5a:	a0 e0       	ldi	r26, 0x00	; 0
     d5c:	b0 e0       	ldi	r27, 0x00	; 0
     d5e:	80 93 8d 01 	sts	0x018D, r24
     d62:	90 93 8e 01 	sts	0x018E, r25
     d66:	a0 93 8f 01 	sts	0x018F, r26
     d6a:	b0 93 90 01 	sts	0x0190, r27
		if(A_Flag == 1)
     d6e:	80 91 8c 01 	lds	r24, 0x018C
     d72:	81 30       	cpi	r24, 0x01	; 1
     d74:	29 f5       	brne	.+74     	; 0xdc0 <enter_number+0x2ea>
		{
			Lcd4_Clear();
     d76:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <Lcd4_Clear>
     d7a:	80 e4       	ldi	r24, 0x40	; 64
     d7c:	9c e9       	ldi	r25, 0x9C	; 156
     d7e:	01 97       	sbiw	r24, 0x01	; 1
     d80:	f1 f7       	brne	.-4      	; 0xd7e <enter_number+0x2a8>
			_delay_ms(20);// delay for cd
			Lcd4_Set_Cursor(1,0);
     d82:	81 e0       	ldi	r24, 0x01	; 1
     d84:	60 e0       	ldi	r22, 0x00	; 0
     d86:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <Lcd4_Set_Cursor>
			Lcd4_Write_String("ANS");
     d8a:	8b e6       	ldi	r24, 0x6B	; 107
     d8c:	90 e0       	ldi	r25, 0x00	; 0
     d8e:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <Lcd4_Write_String>
			c = 3;
     d92:	83 e0       	ldi	r24, 0x03	; 3
     d94:	80 93 ad 01 	sts	0x01AD, r24
			a = result;
     d98:	80 91 a5 01 	lds	r24, 0x01A5
     d9c:	90 91 a6 01 	lds	r25, 0x01A6
     da0:	a0 91 a7 01 	lds	r26, 0x01A7
     da4:	b0 91 a8 01 	lds	r27, 0x01A8
     da8:	80 93 a9 01 	sts	0x01A9, r24
     dac:	90 93 aa 01 	sts	0x01AA, r25
     db0:	a0 93 ab 01 	sts	0x01AB, r26
     db4:	b0 93 ac 01 	sts	0x01AC, r27
			Op_Flag = 0;
     db8:	10 92 8a 01 	sts	0x018A, r1
			A_Flag = 0;
     dbc:	10 92 8c 01 	sts	0x018C, r1

		}
		if(Op_Flag == 1)
     dc0:	80 91 8a 01 	lds	r24, 0x018A
     dc4:	81 30       	cpi	r24, 0x01	; 1
     dc6:	99 f0       	breq	.+38     	; 0xdee <enter_number+0x318>
		{
			Op_Flag = 1; // if operation was called keep previous status
		}
		else
		{
			Lcd4_Set_Cursor(1,c);
     dc8:	10 91 ad 01 	lds	r17, 0x01AD
     dcc:	81 e0       	ldi	r24, 0x01	; 1
     dce:	61 2f       	mov	r22, r17
     dd0:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <Lcd4_Set_Cursor>
			Lcd4_Write_Char(key);
     dd4:	80 2f       	mov	r24, r16
     dd6:	0e 94 3d 03 	call	0x67a	; 0x67a <Lcd4_Write_Char>
			c++;
     dda:	1f 5f       	subi	r17, 0xFF	; 255
     ddc:	10 93 ad 01 	sts	0x01AD, r17
			operate = key;
     de0:	00 93 88 01 	sts	0x0188, r16
			Op_Flag = 1;
     de4:	81 e0       	ldi	r24, 0x01	; 1
     de6:	80 93 8a 01 	sts	0x018A, r24
			Dot_Flag = 0;
     dea:	10 92 89 01 	sts	0x0189, r1
		}
	}

}
     dee:	1f 91       	pop	r17
     df0:	0f 91       	pop	r16
     df2:	ff 90       	pop	r15
     df4:	ef 90       	pop	r14
     df6:	df 90       	pop	r13
     df8:	cf 90       	pop	r12
     dfa:	bf 90       	pop	r11
     dfc:	af 90       	pop	r10
     dfe:	08 95       	ret

00000e00 <main>:
	PORTB = 0x00;
}
//-----------------------------//	

int main(void)
{
     e00:	cf 93       	push	r28
     e02:	df 93       	push	r29
    itoa(roundedDecPart, buffer + len, 10);
}
// function declare//
void init_port()
{
	DDRC = 0xFF; /// COPNFIG LCD
     e04:	8f ef       	ldi	r24, 0xFF	; 255
     e06:	84 bb       	out	0x14, r24	; 20
	DDRD = 0b11110000;
     e08:	80 ef       	ldi	r24, 0xF0	; 240
     e0a:	81 bb       	out	0x11, r24	; 17
	DDRB = 0b00000000;
     e0c:	17 ba       	out	0x17, r1	; 23
	PORTD = 0b00000000;
     e0e:	12 ba       	out	0x12, r1	; 18
	PORTB = 0x00;
     e10:	18 ba       	out	0x18, r1	; 24

int main(void)
{
	// INIT//
	init_port();
	Lcd4_Init();
     e12:	0e 94 0f 03 	call	0x61e	; 0x61e <Lcd4_Init>
	// set up interupt
	MCUCR = 0x00;    // make INT0 low level triggered
     e16:	15 be       	out	0x35, r1	; 53
  	GICR  = (1<<INT0);
     e18:	80 e4       	ldi	r24, 0x40	; 64
     e1a:	8b bf       	out	0x3b, r24	; 59
	Lcd4_Set_Cursor(2, 1);
     e1c:	82 e0       	ldi	r24, 0x02	; 2
     e1e:	61 e0       	ldi	r22, 0x01	; 1
     e20:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <Lcd4_Set_Cursor>
	Lcd4_Write_String("INVALID");
     e24:	83 e6       	ldi	r24, 0x63	; 99
     e26:	90 e0       	ldi	r25, 0x00	; 0
     e28:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <Lcd4_Write_String>
	sei(); 
     e2c:	78 94       	sei
     e2e:	c8 ec       	ldi	r28, 0xC8	; 200
     e30:	d0 e0       	ldi	r29, 0x00	; 0
	while(1)
	{
		char key = find_key();
     e32:	0e 94 9c 03 	call	0x738	; 0x738 <find_key>

        if (key != '\0') {
     e36:	88 23       	and	r24, r24
     e38:	e1 f3       	breq	.-8      	; 0xe32 <main+0x32>
            enter_number(key);
     e3a:	0e 94 6b 05 	call	0xad6	; 0xad6 <enter_number>
     e3e:	80 ef       	ldi	r24, 0xF0	; 240
     e40:	95 e5       	ldi	r25, 0x55	; 85
     e42:	fe 01       	movw	r30, r28
     e44:	31 97       	sbiw	r30, 0x01	; 1
     e46:	f1 f7       	brne	.-4      	; 0xe44 <main+0x44>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e48:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e4a:	d9 f7       	brne	.-10     	; 0xe42 <main+0x42>
     e4c:	f2 cf       	rjmp	.-28     	; 0xe32 <main+0x32>

00000e4e <_fpadd_parts>:
     e4e:	a0 e0       	ldi	r26, 0x00	; 0
     e50:	b0 e0       	ldi	r27, 0x00	; 0
     e52:	ed e2       	ldi	r30, 0x2D	; 45
     e54:	f7 e0       	ldi	r31, 0x07	; 7
     e56:	0c 94 4e 0d 	jmp	0x1a9c	; 0x1a9c <__prologue_saves__>
     e5a:	dc 01       	movw	r26, r24
     e5c:	2b 01       	movw	r4, r22
     e5e:	fa 01       	movw	r30, r20
     e60:	9c 91       	ld	r25, X
     e62:	92 30       	cpi	r25, 0x02	; 2
     e64:	08 f4       	brcc	.+2      	; 0xe68 <_fpadd_parts+0x1a>
     e66:	39 c1       	rjmp	.+626    	; 0x10da <_fpadd_parts+0x28c>
     e68:	eb 01       	movw	r28, r22
     e6a:	88 81       	ld	r24, Y
     e6c:	82 30       	cpi	r24, 0x02	; 2
     e6e:	08 f4       	brcc	.+2      	; 0xe72 <_fpadd_parts+0x24>
     e70:	33 c1       	rjmp	.+614    	; 0x10d8 <_fpadd_parts+0x28a>
     e72:	94 30       	cpi	r25, 0x04	; 4
     e74:	69 f4       	brne	.+26     	; 0xe90 <_fpadd_parts+0x42>
     e76:	84 30       	cpi	r24, 0x04	; 4
     e78:	09 f0       	breq	.+2      	; 0xe7c <_fpadd_parts+0x2e>
     e7a:	2f c1       	rjmp	.+606    	; 0x10da <_fpadd_parts+0x28c>
     e7c:	11 96       	adiw	r26, 0x01	; 1
     e7e:	9c 91       	ld	r25, X
     e80:	11 97       	sbiw	r26, 0x01	; 1
     e82:	89 81       	ldd	r24, Y+1	; 0x01
     e84:	98 17       	cp	r25, r24
     e86:	09 f4       	brne	.+2      	; 0xe8a <_fpadd_parts+0x3c>
     e88:	28 c1       	rjmp	.+592    	; 0x10da <_fpadd_parts+0x28c>
     e8a:	af e7       	ldi	r26, 0x7F	; 127
     e8c:	b0 e0       	ldi	r27, 0x00	; 0
     e8e:	25 c1       	rjmp	.+586    	; 0x10da <_fpadd_parts+0x28c>
     e90:	84 30       	cpi	r24, 0x04	; 4
     e92:	09 f4       	brne	.+2      	; 0xe96 <_fpadd_parts+0x48>
     e94:	21 c1       	rjmp	.+578    	; 0x10d8 <_fpadd_parts+0x28a>
     e96:	82 30       	cpi	r24, 0x02	; 2
     e98:	a9 f4       	brne	.+42     	; 0xec4 <_fpadd_parts+0x76>
     e9a:	92 30       	cpi	r25, 0x02	; 2
     e9c:	09 f0       	breq	.+2      	; 0xea0 <_fpadd_parts+0x52>
     e9e:	1d c1       	rjmp	.+570    	; 0x10da <_fpadd_parts+0x28c>
     ea0:	9a 01       	movw	r18, r20
     ea2:	ad 01       	movw	r20, r26
     ea4:	88 e0       	ldi	r24, 0x08	; 8
     ea6:	ea 01       	movw	r28, r20
     ea8:	09 90       	ld	r0, Y+
     eaa:	ae 01       	movw	r20, r28
     eac:	e9 01       	movw	r28, r18
     eae:	09 92       	st	Y+, r0
     eb0:	9e 01       	movw	r18, r28
     eb2:	81 50       	subi	r24, 0x01	; 1
     eb4:	c1 f7       	brne	.-16     	; 0xea6 <_fpadd_parts+0x58>
     eb6:	e2 01       	movw	r28, r4
     eb8:	89 81       	ldd	r24, Y+1	; 0x01
     eba:	11 96       	adiw	r26, 0x01	; 1
     ebc:	9c 91       	ld	r25, X
     ebe:	89 23       	and	r24, r25
     ec0:	81 83       	std	Z+1, r24	; 0x01
     ec2:	08 c1       	rjmp	.+528    	; 0x10d4 <_fpadd_parts+0x286>
     ec4:	92 30       	cpi	r25, 0x02	; 2
     ec6:	09 f4       	brne	.+2      	; 0xeca <_fpadd_parts+0x7c>
     ec8:	07 c1       	rjmp	.+526    	; 0x10d8 <_fpadd_parts+0x28a>
     eca:	12 96       	adiw	r26, 0x02	; 2
     ecc:	2d 90       	ld	r2, X+
     ece:	3c 90       	ld	r3, X
     ed0:	13 97       	sbiw	r26, 0x03	; 3
     ed2:	eb 01       	movw	r28, r22
     ed4:	8a 81       	ldd	r24, Y+2	; 0x02
     ed6:	9b 81       	ldd	r25, Y+3	; 0x03
     ed8:	14 96       	adiw	r26, 0x04	; 4
     eda:	ad 90       	ld	r10, X+
     edc:	bd 90       	ld	r11, X+
     ede:	cd 90       	ld	r12, X+
     ee0:	dc 90       	ld	r13, X
     ee2:	17 97       	sbiw	r26, 0x07	; 7
     ee4:	ec 80       	ldd	r14, Y+4	; 0x04
     ee6:	fd 80       	ldd	r15, Y+5	; 0x05
     ee8:	0e 81       	ldd	r16, Y+6	; 0x06
     eea:	1f 81       	ldd	r17, Y+7	; 0x07
     eec:	91 01       	movw	r18, r2
     eee:	28 1b       	sub	r18, r24
     ef0:	39 0b       	sbc	r19, r25
     ef2:	b9 01       	movw	r22, r18
     ef4:	37 ff       	sbrs	r19, 7
     ef6:	04 c0       	rjmp	.+8      	; 0xf00 <_fpadd_parts+0xb2>
     ef8:	66 27       	eor	r22, r22
     efa:	77 27       	eor	r23, r23
     efc:	62 1b       	sub	r22, r18
     efe:	73 0b       	sbc	r23, r19
     f00:	60 32       	cpi	r22, 0x20	; 32
     f02:	71 05       	cpc	r23, r1
     f04:	0c f0       	brlt	.+2      	; 0xf08 <_fpadd_parts+0xba>
     f06:	61 c0       	rjmp	.+194    	; 0xfca <_fpadd_parts+0x17c>
     f08:	12 16       	cp	r1, r18
     f0a:	13 06       	cpc	r1, r19
     f0c:	6c f5       	brge	.+90     	; 0xf68 <_fpadd_parts+0x11a>
     f0e:	37 01       	movw	r6, r14
     f10:	48 01       	movw	r8, r16
     f12:	06 2e       	mov	r0, r22
     f14:	04 c0       	rjmp	.+8      	; 0xf1e <_fpadd_parts+0xd0>
     f16:	96 94       	lsr	r9
     f18:	87 94       	ror	r8
     f1a:	77 94       	ror	r7
     f1c:	67 94       	ror	r6
     f1e:	0a 94       	dec	r0
     f20:	d2 f7       	brpl	.-12     	; 0xf16 <_fpadd_parts+0xc8>
     f22:	21 e0       	ldi	r18, 0x01	; 1
     f24:	30 e0       	ldi	r19, 0x00	; 0
     f26:	40 e0       	ldi	r20, 0x00	; 0
     f28:	50 e0       	ldi	r21, 0x00	; 0
     f2a:	04 c0       	rjmp	.+8      	; 0xf34 <_fpadd_parts+0xe6>
     f2c:	22 0f       	add	r18, r18
     f2e:	33 1f       	adc	r19, r19
     f30:	44 1f       	adc	r20, r20
     f32:	55 1f       	adc	r21, r21
     f34:	6a 95       	dec	r22
     f36:	d2 f7       	brpl	.-12     	; 0xf2c <_fpadd_parts+0xde>
     f38:	21 50       	subi	r18, 0x01	; 1
     f3a:	30 40       	sbci	r19, 0x00	; 0
     f3c:	40 40       	sbci	r20, 0x00	; 0
     f3e:	50 40       	sbci	r21, 0x00	; 0
     f40:	2e 21       	and	r18, r14
     f42:	3f 21       	and	r19, r15
     f44:	40 23       	and	r20, r16
     f46:	51 23       	and	r21, r17
     f48:	21 15       	cp	r18, r1
     f4a:	31 05       	cpc	r19, r1
     f4c:	41 05       	cpc	r20, r1
     f4e:	51 05       	cpc	r21, r1
     f50:	21 f0       	breq	.+8      	; 0xf5a <_fpadd_parts+0x10c>
     f52:	21 e0       	ldi	r18, 0x01	; 1
     f54:	30 e0       	ldi	r19, 0x00	; 0
     f56:	40 e0       	ldi	r20, 0x00	; 0
     f58:	50 e0       	ldi	r21, 0x00	; 0
     f5a:	79 01       	movw	r14, r18
     f5c:	8a 01       	movw	r16, r20
     f5e:	e6 28       	or	r14, r6
     f60:	f7 28       	or	r15, r7
     f62:	08 29       	or	r16, r8
     f64:	19 29       	or	r17, r9
     f66:	3c c0       	rjmp	.+120    	; 0xfe0 <_fpadd_parts+0x192>
     f68:	23 2b       	or	r18, r19
     f6a:	d1 f1       	breq	.+116    	; 0xfe0 <_fpadd_parts+0x192>
     f6c:	26 0e       	add	r2, r22
     f6e:	37 1e       	adc	r3, r23
     f70:	35 01       	movw	r6, r10
     f72:	46 01       	movw	r8, r12
     f74:	06 2e       	mov	r0, r22
     f76:	04 c0       	rjmp	.+8      	; 0xf80 <_fpadd_parts+0x132>
     f78:	96 94       	lsr	r9
     f7a:	87 94       	ror	r8
     f7c:	77 94       	ror	r7
     f7e:	67 94       	ror	r6
     f80:	0a 94       	dec	r0
     f82:	d2 f7       	brpl	.-12     	; 0xf78 <_fpadd_parts+0x12a>
     f84:	21 e0       	ldi	r18, 0x01	; 1
     f86:	30 e0       	ldi	r19, 0x00	; 0
     f88:	40 e0       	ldi	r20, 0x00	; 0
     f8a:	50 e0       	ldi	r21, 0x00	; 0
     f8c:	04 c0       	rjmp	.+8      	; 0xf96 <_fpadd_parts+0x148>
     f8e:	22 0f       	add	r18, r18
     f90:	33 1f       	adc	r19, r19
     f92:	44 1f       	adc	r20, r20
     f94:	55 1f       	adc	r21, r21
     f96:	6a 95       	dec	r22
     f98:	d2 f7       	brpl	.-12     	; 0xf8e <_fpadd_parts+0x140>
     f9a:	21 50       	subi	r18, 0x01	; 1
     f9c:	30 40       	sbci	r19, 0x00	; 0
     f9e:	40 40       	sbci	r20, 0x00	; 0
     fa0:	50 40       	sbci	r21, 0x00	; 0
     fa2:	2a 21       	and	r18, r10
     fa4:	3b 21       	and	r19, r11
     fa6:	4c 21       	and	r20, r12
     fa8:	5d 21       	and	r21, r13
     faa:	21 15       	cp	r18, r1
     fac:	31 05       	cpc	r19, r1
     fae:	41 05       	cpc	r20, r1
     fb0:	51 05       	cpc	r21, r1
     fb2:	21 f0       	breq	.+8      	; 0xfbc <_fpadd_parts+0x16e>
     fb4:	21 e0       	ldi	r18, 0x01	; 1
     fb6:	30 e0       	ldi	r19, 0x00	; 0
     fb8:	40 e0       	ldi	r20, 0x00	; 0
     fba:	50 e0       	ldi	r21, 0x00	; 0
     fbc:	59 01       	movw	r10, r18
     fbe:	6a 01       	movw	r12, r20
     fc0:	a6 28       	or	r10, r6
     fc2:	b7 28       	or	r11, r7
     fc4:	c8 28       	or	r12, r8
     fc6:	d9 28       	or	r13, r9
     fc8:	0b c0       	rjmp	.+22     	; 0xfe0 <_fpadd_parts+0x192>
     fca:	82 15       	cp	r24, r2
     fcc:	93 05       	cpc	r25, r3
     fce:	2c f0       	brlt	.+10     	; 0xfda <_fpadd_parts+0x18c>
     fd0:	1c 01       	movw	r2, r24
     fd2:	aa 24       	eor	r10, r10
     fd4:	bb 24       	eor	r11, r11
     fd6:	65 01       	movw	r12, r10
     fd8:	03 c0       	rjmp	.+6      	; 0xfe0 <_fpadd_parts+0x192>
     fda:	ee 24       	eor	r14, r14
     fdc:	ff 24       	eor	r15, r15
     fde:	87 01       	movw	r16, r14
     fe0:	11 96       	adiw	r26, 0x01	; 1
     fe2:	9c 91       	ld	r25, X
     fe4:	d2 01       	movw	r26, r4
     fe6:	11 96       	adiw	r26, 0x01	; 1
     fe8:	8c 91       	ld	r24, X
     fea:	98 17       	cp	r25, r24
     fec:	09 f4       	brne	.+2      	; 0xff0 <_fpadd_parts+0x1a2>
     fee:	45 c0       	rjmp	.+138    	; 0x107a <_fpadd_parts+0x22c>
     ff0:	99 23       	and	r25, r25
     ff2:	39 f0       	breq	.+14     	; 0x1002 <_fpadd_parts+0x1b4>
     ff4:	a8 01       	movw	r20, r16
     ff6:	97 01       	movw	r18, r14
     ff8:	2a 19       	sub	r18, r10
     ffa:	3b 09       	sbc	r19, r11
     ffc:	4c 09       	sbc	r20, r12
     ffe:	5d 09       	sbc	r21, r13
    1000:	06 c0       	rjmp	.+12     	; 0x100e <_fpadd_parts+0x1c0>
    1002:	a6 01       	movw	r20, r12
    1004:	95 01       	movw	r18, r10
    1006:	2e 19       	sub	r18, r14
    1008:	3f 09       	sbc	r19, r15
    100a:	40 0b       	sbc	r20, r16
    100c:	51 0b       	sbc	r21, r17
    100e:	57 fd       	sbrc	r21, 7
    1010:	08 c0       	rjmp	.+16     	; 0x1022 <_fpadd_parts+0x1d4>
    1012:	11 82       	std	Z+1, r1	; 0x01
    1014:	33 82       	std	Z+3, r3	; 0x03
    1016:	22 82       	std	Z+2, r2	; 0x02
    1018:	24 83       	std	Z+4, r18	; 0x04
    101a:	35 83       	std	Z+5, r19	; 0x05
    101c:	46 83       	std	Z+6, r20	; 0x06
    101e:	57 83       	std	Z+7, r21	; 0x07
    1020:	1d c0       	rjmp	.+58     	; 0x105c <_fpadd_parts+0x20e>
    1022:	81 e0       	ldi	r24, 0x01	; 1
    1024:	81 83       	std	Z+1, r24	; 0x01
    1026:	33 82       	std	Z+3, r3	; 0x03
    1028:	22 82       	std	Z+2, r2	; 0x02
    102a:	88 27       	eor	r24, r24
    102c:	99 27       	eor	r25, r25
    102e:	dc 01       	movw	r26, r24
    1030:	82 1b       	sub	r24, r18
    1032:	93 0b       	sbc	r25, r19
    1034:	a4 0b       	sbc	r26, r20
    1036:	b5 0b       	sbc	r27, r21
    1038:	84 83       	std	Z+4, r24	; 0x04
    103a:	95 83       	std	Z+5, r25	; 0x05
    103c:	a6 83       	std	Z+6, r26	; 0x06
    103e:	b7 83       	std	Z+7, r27	; 0x07
    1040:	0d c0       	rjmp	.+26     	; 0x105c <_fpadd_parts+0x20e>
    1042:	22 0f       	add	r18, r18
    1044:	33 1f       	adc	r19, r19
    1046:	44 1f       	adc	r20, r20
    1048:	55 1f       	adc	r21, r21
    104a:	24 83       	std	Z+4, r18	; 0x04
    104c:	35 83       	std	Z+5, r19	; 0x05
    104e:	46 83       	std	Z+6, r20	; 0x06
    1050:	57 83       	std	Z+7, r21	; 0x07
    1052:	82 81       	ldd	r24, Z+2	; 0x02
    1054:	93 81       	ldd	r25, Z+3	; 0x03
    1056:	01 97       	sbiw	r24, 0x01	; 1
    1058:	93 83       	std	Z+3, r25	; 0x03
    105a:	82 83       	std	Z+2, r24	; 0x02
    105c:	24 81       	ldd	r18, Z+4	; 0x04
    105e:	35 81       	ldd	r19, Z+5	; 0x05
    1060:	46 81       	ldd	r20, Z+6	; 0x06
    1062:	57 81       	ldd	r21, Z+7	; 0x07
    1064:	da 01       	movw	r26, r20
    1066:	c9 01       	movw	r24, r18
    1068:	01 97       	sbiw	r24, 0x01	; 1
    106a:	a1 09       	sbc	r26, r1
    106c:	b1 09       	sbc	r27, r1
    106e:	8f 5f       	subi	r24, 0xFF	; 255
    1070:	9f 4f       	sbci	r25, 0xFF	; 255
    1072:	af 4f       	sbci	r26, 0xFF	; 255
    1074:	bf 43       	sbci	r27, 0x3F	; 63
    1076:	28 f3       	brcs	.-54     	; 0x1042 <_fpadd_parts+0x1f4>
    1078:	0b c0       	rjmp	.+22     	; 0x1090 <_fpadd_parts+0x242>
    107a:	91 83       	std	Z+1, r25	; 0x01
    107c:	33 82       	std	Z+3, r3	; 0x03
    107e:	22 82       	std	Z+2, r2	; 0x02
    1080:	ea 0c       	add	r14, r10
    1082:	fb 1c       	adc	r15, r11
    1084:	0c 1d       	adc	r16, r12
    1086:	1d 1d       	adc	r17, r13
    1088:	e4 82       	std	Z+4, r14	; 0x04
    108a:	f5 82       	std	Z+5, r15	; 0x05
    108c:	06 83       	std	Z+6, r16	; 0x06
    108e:	17 83       	std	Z+7, r17	; 0x07
    1090:	83 e0       	ldi	r24, 0x03	; 3
    1092:	80 83       	st	Z, r24
    1094:	24 81       	ldd	r18, Z+4	; 0x04
    1096:	35 81       	ldd	r19, Z+5	; 0x05
    1098:	46 81       	ldd	r20, Z+6	; 0x06
    109a:	57 81       	ldd	r21, Z+7	; 0x07
    109c:	57 ff       	sbrs	r21, 7
    109e:	1a c0       	rjmp	.+52     	; 0x10d4 <_fpadd_parts+0x286>
    10a0:	c9 01       	movw	r24, r18
    10a2:	aa 27       	eor	r26, r26
    10a4:	97 fd       	sbrc	r25, 7
    10a6:	a0 95       	com	r26
    10a8:	ba 2f       	mov	r27, r26
    10aa:	81 70       	andi	r24, 0x01	; 1
    10ac:	90 70       	andi	r25, 0x00	; 0
    10ae:	a0 70       	andi	r26, 0x00	; 0
    10b0:	b0 70       	andi	r27, 0x00	; 0
    10b2:	56 95       	lsr	r21
    10b4:	47 95       	ror	r20
    10b6:	37 95       	ror	r19
    10b8:	27 95       	ror	r18
    10ba:	82 2b       	or	r24, r18
    10bc:	93 2b       	or	r25, r19
    10be:	a4 2b       	or	r26, r20
    10c0:	b5 2b       	or	r27, r21
    10c2:	84 83       	std	Z+4, r24	; 0x04
    10c4:	95 83       	std	Z+5, r25	; 0x05
    10c6:	a6 83       	std	Z+6, r26	; 0x06
    10c8:	b7 83       	std	Z+7, r27	; 0x07
    10ca:	82 81       	ldd	r24, Z+2	; 0x02
    10cc:	93 81       	ldd	r25, Z+3	; 0x03
    10ce:	01 96       	adiw	r24, 0x01	; 1
    10d0:	93 83       	std	Z+3, r25	; 0x03
    10d2:	82 83       	std	Z+2, r24	; 0x02
    10d4:	df 01       	movw	r26, r30
    10d6:	01 c0       	rjmp	.+2      	; 0x10da <_fpadd_parts+0x28c>
    10d8:	d2 01       	movw	r26, r4
    10da:	cd 01       	movw	r24, r26
    10dc:	cd b7       	in	r28, 0x3d	; 61
    10de:	de b7       	in	r29, 0x3e	; 62
    10e0:	e2 e1       	ldi	r30, 0x12	; 18
    10e2:	0c 94 6a 0d 	jmp	0x1ad4	; 0x1ad4 <__epilogue_restores__>

000010e6 <__subsf3>:
    10e6:	a0 e2       	ldi	r26, 0x20	; 32
    10e8:	b0 e0       	ldi	r27, 0x00	; 0
    10ea:	e9 e7       	ldi	r30, 0x79	; 121
    10ec:	f8 e0       	ldi	r31, 0x08	; 8
    10ee:	0c 94 5a 0d 	jmp	0x1ab4	; 0x1ab4 <__prologue_saves__+0x18>
    10f2:	69 83       	std	Y+1, r22	; 0x01
    10f4:	7a 83       	std	Y+2, r23	; 0x02
    10f6:	8b 83       	std	Y+3, r24	; 0x03
    10f8:	9c 83       	std	Y+4, r25	; 0x04
    10fa:	2d 83       	std	Y+5, r18	; 0x05
    10fc:	3e 83       	std	Y+6, r19	; 0x06
    10fe:	4f 83       	std	Y+7, r20	; 0x07
    1100:	58 87       	std	Y+8, r21	; 0x08
    1102:	e9 e0       	ldi	r30, 0x09	; 9
    1104:	ee 2e       	mov	r14, r30
    1106:	f1 2c       	mov	r15, r1
    1108:	ec 0e       	add	r14, r28
    110a:	fd 1e       	adc	r15, r29
    110c:	ce 01       	movw	r24, r28
    110e:	01 96       	adiw	r24, 0x01	; 1
    1110:	b7 01       	movw	r22, r14
    1112:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <__unpack_f>
    1116:	8e 01       	movw	r16, r28
    1118:	0f 5e       	subi	r16, 0xEF	; 239
    111a:	1f 4f       	sbci	r17, 0xFF	; 255
    111c:	ce 01       	movw	r24, r28
    111e:	05 96       	adiw	r24, 0x05	; 5
    1120:	b8 01       	movw	r22, r16
    1122:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <__unpack_f>
    1126:	8a 89       	ldd	r24, Y+18	; 0x12
    1128:	91 e0       	ldi	r25, 0x01	; 1
    112a:	89 27       	eor	r24, r25
    112c:	8a 8b       	std	Y+18, r24	; 0x12
    112e:	c7 01       	movw	r24, r14
    1130:	b8 01       	movw	r22, r16
    1132:	ae 01       	movw	r20, r28
    1134:	47 5e       	subi	r20, 0xE7	; 231
    1136:	5f 4f       	sbci	r21, 0xFF	; 255
    1138:	0e 94 27 07 	call	0xe4e	; 0xe4e <_fpadd_parts>
    113c:	0e 94 a8 0b 	call	0x1750	; 0x1750 <__pack_f>
    1140:	a0 96       	adiw	r28, 0x20	; 32
    1142:	e6 e0       	ldi	r30, 0x06	; 6
    1144:	0c 94 76 0d 	jmp	0x1aec	; 0x1aec <__epilogue_restores__+0x18>

00001148 <__addsf3>:
    1148:	a0 e2       	ldi	r26, 0x20	; 32
    114a:	b0 e0       	ldi	r27, 0x00	; 0
    114c:	ea ea       	ldi	r30, 0xAA	; 170
    114e:	f8 e0       	ldi	r31, 0x08	; 8
    1150:	0c 94 5a 0d 	jmp	0x1ab4	; 0x1ab4 <__prologue_saves__+0x18>
    1154:	69 83       	std	Y+1, r22	; 0x01
    1156:	7a 83       	std	Y+2, r23	; 0x02
    1158:	8b 83       	std	Y+3, r24	; 0x03
    115a:	9c 83       	std	Y+4, r25	; 0x04
    115c:	2d 83       	std	Y+5, r18	; 0x05
    115e:	3e 83       	std	Y+6, r19	; 0x06
    1160:	4f 83       	std	Y+7, r20	; 0x07
    1162:	58 87       	std	Y+8, r21	; 0x08
    1164:	f9 e0       	ldi	r31, 0x09	; 9
    1166:	ef 2e       	mov	r14, r31
    1168:	f1 2c       	mov	r15, r1
    116a:	ec 0e       	add	r14, r28
    116c:	fd 1e       	adc	r15, r29
    116e:	ce 01       	movw	r24, r28
    1170:	01 96       	adiw	r24, 0x01	; 1
    1172:	b7 01       	movw	r22, r14
    1174:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <__unpack_f>
    1178:	8e 01       	movw	r16, r28
    117a:	0f 5e       	subi	r16, 0xEF	; 239
    117c:	1f 4f       	sbci	r17, 0xFF	; 255
    117e:	ce 01       	movw	r24, r28
    1180:	05 96       	adiw	r24, 0x05	; 5
    1182:	b8 01       	movw	r22, r16
    1184:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <__unpack_f>
    1188:	c7 01       	movw	r24, r14
    118a:	b8 01       	movw	r22, r16
    118c:	ae 01       	movw	r20, r28
    118e:	47 5e       	subi	r20, 0xE7	; 231
    1190:	5f 4f       	sbci	r21, 0xFF	; 255
    1192:	0e 94 27 07 	call	0xe4e	; 0xe4e <_fpadd_parts>
    1196:	0e 94 a8 0b 	call	0x1750	; 0x1750 <__pack_f>
    119a:	a0 96       	adiw	r28, 0x20	; 32
    119c:	e6 e0       	ldi	r30, 0x06	; 6
    119e:	0c 94 76 0d 	jmp	0x1aec	; 0x1aec <__epilogue_restores__+0x18>

000011a2 <__mulsf3>:
    11a2:	a0 e2       	ldi	r26, 0x20	; 32
    11a4:	b0 e0       	ldi	r27, 0x00	; 0
    11a6:	e7 ed       	ldi	r30, 0xD7	; 215
    11a8:	f8 e0       	ldi	r31, 0x08	; 8
    11aa:	0c 94 4e 0d 	jmp	0x1a9c	; 0x1a9c <__prologue_saves__>
    11ae:	69 83       	std	Y+1, r22	; 0x01
    11b0:	7a 83       	std	Y+2, r23	; 0x02
    11b2:	8b 83       	std	Y+3, r24	; 0x03
    11b4:	9c 83       	std	Y+4, r25	; 0x04
    11b6:	2d 83       	std	Y+5, r18	; 0x05
    11b8:	3e 83       	std	Y+6, r19	; 0x06
    11ba:	4f 83       	std	Y+7, r20	; 0x07
    11bc:	58 87       	std	Y+8, r21	; 0x08
    11be:	ce 01       	movw	r24, r28
    11c0:	01 96       	adiw	r24, 0x01	; 1
    11c2:	be 01       	movw	r22, r28
    11c4:	67 5f       	subi	r22, 0xF7	; 247
    11c6:	7f 4f       	sbci	r23, 0xFF	; 255
    11c8:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <__unpack_f>
    11cc:	ce 01       	movw	r24, r28
    11ce:	05 96       	adiw	r24, 0x05	; 5
    11d0:	be 01       	movw	r22, r28
    11d2:	6f 5e       	subi	r22, 0xEF	; 239
    11d4:	7f 4f       	sbci	r23, 0xFF	; 255
    11d6:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <__unpack_f>
    11da:	99 85       	ldd	r25, Y+9	; 0x09
    11dc:	92 30       	cpi	r25, 0x02	; 2
    11de:	88 f0       	brcs	.+34     	; 0x1202 <__mulsf3+0x60>
    11e0:	89 89       	ldd	r24, Y+17	; 0x11
    11e2:	82 30       	cpi	r24, 0x02	; 2
    11e4:	c8 f0       	brcs	.+50     	; 0x1218 <__mulsf3+0x76>
    11e6:	94 30       	cpi	r25, 0x04	; 4
    11e8:	19 f4       	brne	.+6      	; 0x11f0 <__mulsf3+0x4e>
    11ea:	82 30       	cpi	r24, 0x02	; 2
    11ec:	51 f4       	brne	.+20     	; 0x1202 <__mulsf3+0x60>
    11ee:	04 c0       	rjmp	.+8      	; 0x11f8 <__mulsf3+0x56>
    11f0:	84 30       	cpi	r24, 0x04	; 4
    11f2:	29 f4       	brne	.+10     	; 0x11fe <__mulsf3+0x5c>
    11f4:	92 30       	cpi	r25, 0x02	; 2
    11f6:	81 f4       	brne	.+32     	; 0x1218 <__mulsf3+0x76>
    11f8:	8f e7       	ldi	r24, 0x7F	; 127
    11fa:	90 e0       	ldi	r25, 0x00	; 0
    11fc:	c6 c0       	rjmp	.+396    	; 0x138a <__mulsf3+0x1e8>
    11fe:	92 30       	cpi	r25, 0x02	; 2
    1200:	49 f4       	brne	.+18     	; 0x1214 <__mulsf3+0x72>
    1202:	20 e0       	ldi	r18, 0x00	; 0
    1204:	9a 85       	ldd	r25, Y+10	; 0x0a
    1206:	8a 89       	ldd	r24, Y+18	; 0x12
    1208:	98 13       	cpse	r25, r24
    120a:	21 e0       	ldi	r18, 0x01	; 1
    120c:	2a 87       	std	Y+10, r18	; 0x0a
    120e:	ce 01       	movw	r24, r28
    1210:	09 96       	adiw	r24, 0x09	; 9
    1212:	bb c0       	rjmp	.+374    	; 0x138a <__mulsf3+0x1e8>
    1214:	82 30       	cpi	r24, 0x02	; 2
    1216:	49 f4       	brne	.+18     	; 0x122a <__mulsf3+0x88>
    1218:	20 e0       	ldi	r18, 0x00	; 0
    121a:	9a 85       	ldd	r25, Y+10	; 0x0a
    121c:	8a 89       	ldd	r24, Y+18	; 0x12
    121e:	98 13       	cpse	r25, r24
    1220:	21 e0       	ldi	r18, 0x01	; 1
    1222:	2a 8b       	std	Y+18, r18	; 0x12
    1224:	ce 01       	movw	r24, r28
    1226:	41 96       	adiw	r24, 0x11	; 17
    1228:	b0 c0       	rjmp	.+352    	; 0x138a <__mulsf3+0x1e8>
    122a:	2d 84       	ldd	r2, Y+13	; 0x0d
    122c:	3e 84       	ldd	r3, Y+14	; 0x0e
    122e:	4f 84       	ldd	r4, Y+15	; 0x0f
    1230:	58 88       	ldd	r5, Y+16	; 0x10
    1232:	6d 88       	ldd	r6, Y+21	; 0x15
    1234:	7e 88       	ldd	r7, Y+22	; 0x16
    1236:	8f 88       	ldd	r8, Y+23	; 0x17
    1238:	98 8c       	ldd	r9, Y+24	; 0x18
    123a:	ee 24       	eor	r14, r14
    123c:	ff 24       	eor	r15, r15
    123e:	87 01       	movw	r16, r14
    1240:	aa 24       	eor	r10, r10
    1242:	bb 24       	eor	r11, r11
    1244:	65 01       	movw	r12, r10
    1246:	40 e0       	ldi	r20, 0x00	; 0
    1248:	50 e0       	ldi	r21, 0x00	; 0
    124a:	60 e0       	ldi	r22, 0x00	; 0
    124c:	70 e0       	ldi	r23, 0x00	; 0
    124e:	e0 e0       	ldi	r30, 0x00	; 0
    1250:	f0 e0       	ldi	r31, 0x00	; 0
    1252:	c1 01       	movw	r24, r2
    1254:	81 70       	andi	r24, 0x01	; 1
    1256:	90 70       	andi	r25, 0x00	; 0
    1258:	89 2b       	or	r24, r25
    125a:	e9 f0       	breq	.+58     	; 0x1296 <__mulsf3+0xf4>
    125c:	e6 0c       	add	r14, r6
    125e:	f7 1c       	adc	r15, r7
    1260:	08 1d       	adc	r16, r8
    1262:	19 1d       	adc	r17, r9
    1264:	9a 01       	movw	r18, r20
    1266:	ab 01       	movw	r20, r22
    1268:	2a 0d       	add	r18, r10
    126a:	3b 1d       	adc	r19, r11
    126c:	4c 1d       	adc	r20, r12
    126e:	5d 1d       	adc	r21, r13
    1270:	80 e0       	ldi	r24, 0x00	; 0
    1272:	90 e0       	ldi	r25, 0x00	; 0
    1274:	a0 e0       	ldi	r26, 0x00	; 0
    1276:	b0 e0       	ldi	r27, 0x00	; 0
    1278:	e6 14       	cp	r14, r6
    127a:	f7 04       	cpc	r15, r7
    127c:	08 05       	cpc	r16, r8
    127e:	19 05       	cpc	r17, r9
    1280:	20 f4       	brcc	.+8      	; 0x128a <__mulsf3+0xe8>
    1282:	81 e0       	ldi	r24, 0x01	; 1
    1284:	90 e0       	ldi	r25, 0x00	; 0
    1286:	a0 e0       	ldi	r26, 0x00	; 0
    1288:	b0 e0       	ldi	r27, 0x00	; 0
    128a:	ba 01       	movw	r22, r20
    128c:	a9 01       	movw	r20, r18
    128e:	48 0f       	add	r20, r24
    1290:	59 1f       	adc	r21, r25
    1292:	6a 1f       	adc	r22, r26
    1294:	7b 1f       	adc	r23, r27
    1296:	aa 0c       	add	r10, r10
    1298:	bb 1c       	adc	r11, r11
    129a:	cc 1c       	adc	r12, r12
    129c:	dd 1c       	adc	r13, r13
    129e:	97 fe       	sbrs	r9, 7
    12a0:	08 c0       	rjmp	.+16     	; 0x12b2 <__mulsf3+0x110>
    12a2:	81 e0       	ldi	r24, 0x01	; 1
    12a4:	90 e0       	ldi	r25, 0x00	; 0
    12a6:	a0 e0       	ldi	r26, 0x00	; 0
    12a8:	b0 e0       	ldi	r27, 0x00	; 0
    12aa:	a8 2a       	or	r10, r24
    12ac:	b9 2a       	or	r11, r25
    12ae:	ca 2a       	or	r12, r26
    12b0:	db 2a       	or	r13, r27
    12b2:	31 96       	adiw	r30, 0x01	; 1
    12b4:	e0 32       	cpi	r30, 0x20	; 32
    12b6:	f1 05       	cpc	r31, r1
    12b8:	49 f0       	breq	.+18     	; 0x12cc <__mulsf3+0x12a>
    12ba:	66 0c       	add	r6, r6
    12bc:	77 1c       	adc	r7, r7
    12be:	88 1c       	adc	r8, r8
    12c0:	99 1c       	adc	r9, r9
    12c2:	56 94       	lsr	r5
    12c4:	47 94       	ror	r4
    12c6:	37 94       	ror	r3
    12c8:	27 94       	ror	r2
    12ca:	c3 cf       	rjmp	.-122    	; 0x1252 <__mulsf3+0xb0>
    12cc:	fa 85       	ldd	r31, Y+10	; 0x0a
    12ce:	ea 89       	ldd	r30, Y+18	; 0x12
    12d0:	2b 89       	ldd	r18, Y+19	; 0x13
    12d2:	3c 89       	ldd	r19, Y+20	; 0x14
    12d4:	8b 85       	ldd	r24, Y+11	; 0x0b
    12d6:	9c 85       	ldd	r25, Y+12	; 0x0c
    12d8:	28 0f       	add	r18, r24
    12da:	39 1f       	adc	r19, r25
    12dc:	2e 5f       	subi	r18, 0xFE	; 254
    12de:	3f 4f       	sbci	r19, 0xFF	; 255
    12e0:	17 c0       	rjmp	.+46     	; 0x1310 <__mulsf3+0x16e>
    12e2:	ca 01       	movw	r24, r20
    12e4:	81 70       	andi	r24, 0x01	; 1
    12e6:	90 70       	andi	r25, 0x00	; 0
    12e8:	89 2b       	or	r24, r25
    12ea:	61 f0       	breq	.+24     	; 0x1304 <__mulsf3+0x162>
    12ec:	16 95       	lsr	r17
    12ee:	07 95       	ror	r16
    12f0:	f7 94       	ror	r15
    12f2:	e7 94       	ror	r14
    12f4:	80 e0       	ldi	r24, 0x00	; 0
    12f6:	90 e0       	ldi	r25, 0x00	; 0
    12f8:	a0 e0       	ldi	r26, 0x00	; 0
    12fa:	b0 e8       	ldi	r27, 0x80	; 128
    12fc:	e8 2a       	or	r14, r24
    12fe:	f9 2a       	or	r15, r25
    1300:	0a 2b       	or	r16, r26
    1302:	1b 2b       	or	r17, r27
    1304:	76 95       	lsr	r23
    1306:	67 95       	ror	r22
    1308:	57 95       	ror	r21
    130a:	47 95       	ror	r20
    130c:	2f 5f       	subi	r18, 0xFF	; 255
    130e:	3f 4f       	sbci	r19, 0xFF	; 255
    1310:	77 fd       	sbrc	r23, 7
    1312:	e7 cf       	rjmp	.-50     	; 0x12e2 <__mulsf3+0x140>
    1314:	0c c0       	rjmp	.+24     	; 0x132e <__mulsf3+0x18c>
    1316:	44 0f       	add	r20, r20
    1318:	55 1f       	adc	r21, r21
    131a:	66 1f       	adc	r22, r22
    131c:	77 1f       	adc	r23, r23
    131e:	17 fd       	sbrc	r17, 7
    1320:	41 60       	ori	r20, 0x01	; 1
    1322:	ee 0c       	add	r14, r14
    1324:	ff 1c       	adc	r15, r15
    1326:	00 1f       	adc	r16, r16
    1328:	11 1f       	adc	r17, r17
    132a:	21 50       	subi	r18, 0x01	; 1
    132c:	30 40       	sbci	r19, 0x00	; 0
    132e:	40 30       	cpi	r20, 0x00	; 0
    1330:	90 e0       	ldi	r25, 0x00	; 0
    1332:	59 07       	cpc	r21, r25
    1334:	90 e0       	ldi	r25, 0x00	; 0
    1336:	69 07       	cpc	r22, r25
    1338:	90 e4       	ldi	r25, 0x40	; 64
    133a:	79 07       	cpc	r23, r25
    133c:	60 f3       	brcs	.-40     	; 0x1316 <__mulsf3+0x174>
    133e:	2b 8f       	std	Y+27, r18	; 0x1b
    1340:	3c 8f       	std	Y+28, r19	; 0x1c
    1342:	db 01       	movw	r26, r22
    1344:	ca 01       	movw	r24, r20
    1346:	8f 77       	andi	r24, 0x7F	; 127
    1348:	90 70       	andi	r25, 0x00	; 0
    134a:	a0 70       	andi	r26, 0x00	; 0
    134c:	b0 70       	andi	r27, 0x00	; 0
    134e:	80 34       	cpi	r24, 0x40	; 64
    1350:	91 05       	cpc	r25, r1
    1352:	a1 05       	cpc	r26, r1
    1354:	b1 05       	cpc	r27, r1
    1356:	61 f4       	brne	.+24     	; 0x1370 <__mulsf3+0x1ce>
    1358:	47 fd       	sbrc	r20, 7
    135a:	0a c0       	rjmp	.+20     	; 0x1370 <__mulsf3+0x1ce>
    135c:	e1 14       	cp	r14, r1
    135e:	f1 04       	cpc	r15, r1
    1360:	01 05       	cpc	r16, r1
    1362:	11 05       	cpc	r17, r1
    1364:	29 f0       	breq	.+10     	; 0x1370 <__mulsf3+0x1ce>
    1366:	40 5c       	subi	r20, 0xC0	; 192
    1368:	5f 4f       	sbci	r21, 0xFF	; 255
    136a:	6f 4f       	sbci	r22, 0xFF	; 255
    136c:	7f 4f       	sbci	r23, 0xFF	; 255
    136e:	40 78       	andi	r20, 0x80	; 128
    1370:	1a 8e       	std	Y+26, r1	; 0x1a
    1372:	fe 17       	cp	r31, r30
    1374:	11 f0       	breq	.+4      	; 0x137a <__mulsf3+0x1d8>
    1376:	81 e0       	ldi	r24, 0x01	; 1
    1378:	8a 8f       	std	Y+26, r24	; 0x1a
    137a:	4d 8f       	std	Y+29, r20	; 0x1d
    137c:	5e 8f       	std	Y+30, r21	; 0x1e
    137e:	6f 8f       	std	Y+31, r22	; 0x1f
    1380:	78 a3       	std	Y+32, r23	; 0x20
    1382:	83 e0       	ldi	r24, 0x03	; 3
    1384:	89 8f       	std	Y+25, r24	; 0x19
    1386:	ce 01       	movw	r24, r28
    1388:	49 96       	adiw	r24, 0x19	; 25
    138a:	0e 94 a8 0b 	call	0x1750	; 0x1750 <__pack_f>
    138e:	a0 96       	adiw	r28, 0x20	; 32
    1390:	e2 e1       	ldi	r30, 0x12	; 18
    1392:	0c 94 6a 0d 	jmp	0x1ad4	; 0x1ad4 <__epilogue_restores__>

00001396 <__divsf3>:
    1396:	a8 e1       	ldi	r26, 0x18	; 24
    1398:	b0 e0       	ldi	r27, 0x00	; 0
    139a:	e1 ed       	ldi	r30, 0xD1	; 209
    139c:	f9 e0       	ldi	r31, 0x09	; 9
    139e:	0c 94 56 0d 	jmp	0x1aac	; 0x1aac <__prologue_saves__+0x10>
    13a2:	69 83       	std	Y+1, r22	; 0x01
    13a4:	7a 83       	std	Y+2, r23	; 0x02
    13a6:	8b 83       	std	Y+3, r24	; 0x03
    13a8:	9c 83       	std	Y+4, r25	; 0x04
    13aa:	2d 83       	std	Y+5, r18	; 0x05
    13ac:	3e 83       	std	Y+6, r19	; 0x06
    13ae:	4f 83       	std	Y+7, r20	; 0x07
    13b0:	58 87       	std	Y+8, r21	; 0x08
    13b2:	b9 e0       	ldi	r27, 0x09	; 9
    13b4:	eb 2e       	mov	r14, r27
    13b6:	f1 2c       	mov	r15, r1
    13b8:	ec 0e       	add	r14, r28
    13ba:	fd 1e       	adc	r15, r29
    13bc:	ce 01       	movw	r24, r28
    13be:	01 96       	adiw	r24, 0x01	; 1
    13c0:	b7 01       	movw	r22, r14
    13c2:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <__unpack_f>
    13c6:	8e 01       	movw	r16, r28
    13c8:	0f 5e       	subi	r16, 0xEF	; 239
    13ca:	1f 4f       	sbci	r17, 0xFF	; 255
    13cc:	ce 01       	movw	r24, r28
    13ce:	05 96       	adiw	r24, 0x05	; 5
    13d0:	b8 01       	movw	r22, r16
    13d2:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <__unpack_f>
    13d6:	29 85       	ldd	r18, Y+9	; 0x09
    13d8:	22 30       	cpi	r18, 0x02	; 2
    13da:	08 f4       	brcc	.+2      	; 0x13de <__divsf3+0x48>
    13dc:	7e c0       	rjmp	.+252    	; 0x14da <__divsf3+0x144>
    13de:	39 89       	ldd	r19, Y+17	; 0x11
    13e0:	32 30       	cpi	r19, 0x02	; 2
    13e2:	10 f4       	brcc	.+4      	; 0x13e8 <__divsf3+0x52>
    13e4:	b8 01       	movw	r22, r16
    13e6:	7c c0       	rjmp	.+248    	; 0x14e0 <__divsf3+0x14a>
    13e8:	8a 85       	ldd	r24, Y+10	; 0x0a
    13ea:	9a 89       	ldd	r25, Y+18	; 0x12
    13ec:	89 27       	eor	r24, r25
    13ee:	8a 87       	std	Y+10, r24	; 0x0a
    13f0:	24 30       	cpi	r18, 0x04	; 4
    13f2:	11 f0       	breq	.+4      	; 0x13f8 <__divsf3+0x62>
    13f4:	22 30       	cpi	r18, 0x02	; 2
    13f6:	31 f4       	brne	.+12     	; 0x1404 <__divsf3+0x6e>
    13f8:	23 17       	cp	r18, r19
    13fa:	09 f0       	breq	.+2      	; 0x13fe <__divsf3+0x68>
    13fc:	6e c0       	rjmp	.+220    	; 0x14da <__divsf3+0x144>
    13fe:	6f e7       	ldi	r22, 0x7F	; 127
    1400:	70 e0       	ldi	r23, 0x00	; 0
    1402:	6e c0       	rjmp	.+220    	; 0x14e0 <__divsf3+0x14a>
    1404:	34 30       	cpi	r19, 0x04	; 4
    1406:	39 f4       	brne	.+14     	; 0x1416 <__divsf3+0x80>
    1408:	1d 86       	std	Y+13, r1	; 0x0d
    140a:	1e 86       	std	Y+14, r1	; 0x0e
    140c:	1f 86       	std	Y+15, r1	; 0x0f
    140e:	18 8a       	std	Y+16, r1	; 0x10
    1410:	1c 86       	std	Y+12, r1	; 0x0c
    1412:	1b 86       	std	Y+11, r1	; 0x0b
    1414:	04 c0       	rjmp	.+8      	; 0x141e <__divsf3+0x88>
    1416:	32 30       	cpi	r19, 0x02	; 2
    1418:	21 f4       	brne	.+8      	; 0x1422 <__divsf3+0x8c>
    141a:	84 e0       	ldi	r24, 0x04	; 4
    141c:	89 87       	std	Y+9, r24	; 0x09
    141e:	b7 01       	movw	r22, r14
    1420:	5f c0       	rjmp	.+190    	; 0x14e0 <__divsf3+0x14a>
    1422:	2b 85       	ldd	r18, Y+11	; 0x0b
    1424:	3c 85       	ldd	r19, Y+12	; 0x0c
    1426:	8b 89       	ldd	r24, Y+19	; 0x13
    1428:	9c 89       	ldd	r25, Y+20	; 0x14
    142a:	28 1b       	sub	r18, r24
    142c:	39 0b       	sbc	r19, r25
    142e:	3c 87       	std	Y+12, r19	; 0x0c
    1430:	2b 87       	std	Y+11, r18	; 0x0b
    1432:	ed 84       	ldd	r14, Y+13	; 0x0d
    1434:	fe 84       	ldd	r15, Y+14	; 0x0e
    1436:	0f 85       	ldd	r16, Y+15	; 0x0f
    1438:	18 89       	ldd	r17, Y+16	; 0x10
    143a:	ad 88       	ldd	r10, Y+21	; 0x15
    143c:	be 88       	ldd	r11, Y+22	; 0x16
    143e:	cf 88       	ldd	r12, Y+23	; 0x17
    1440:	d8 8c       	ldd	r13, Y+24	; 0x18
    1442:	ea 14       	cp	r14, r10
    1444:	fb 04       	cpc	r15, r11
    1446:	0c 05       	cpc	r16, r12
    1448:	1d 05       	cpc	r17, r13
    144a:	40 f4       	brcc	.+16     	; 0x145c <__divsf3+0xc6>
    144c:	ee 0c       	add	r14, r14
    144e:	ff 1c       	adc	r15, r15
    1450:	00 1f       	adc	r16, r16
    1452:	11 1f       	adc	r17, r17
    1454:	21 50       	subi	r18, 0x01	; 1
    1456:	30 40       	sbci	r19, 0x00	; 0
    1458:	3c 87       	std	Y+12, r19	; 0x0c
    145a:	2b 87       	std	Y+11, r18	; 0x0b
    145c:	20 e0       	ldi	r18, 0x00	; 0
    145e:	30 e0       	ldi	r19, 0x00	; 0
    1460:	40 e0       	ldi	r20, 0x00	; 0
    1462:	50 e0       	ldi	r21, 0x00	; 0
    1464:	80 e0       	ldi	r24, 0x00	; 0
    1466:	90 e0       	ldi	r25, 0x00	; 0
    1468:	a0 e0       	ldi	r26, 0x00	; 0
    146a:	b0 e4       	ldi	r27, 0x40	; 64
    146c:	60 e0       	ldi	r22, 0x00	; 0
    146e:	70 e0       	ldi	r23, 0x00	; 0
    1470:	ea 14       	cp	r14, r10
    1472:	fb 04       	cpc	r15, r11
    1474:	0c 05       	cpc	r16, r12
    1476:	1d 05       	cpc	r17, r13
    1478:	40 f0       	brcs	.+16     	; 0x148a <__divsf3+0xf4>
    147a:	28 2b       	or	r18, r24
    147c:	39 2b       	or	r19, r25
    147e:	4a 2b       	or	r20, r26
    1480:	5b 2b       	or	r21, r27
    1482:	ea 18       	sub	r14, r10
    1484:	fb 08       	sbc	r15, r11
    1486:	0c 09       	sbc	r16, r12
    1488:	1d 09       	sbc	r17, r13
    148a:	b6 95       	lsr	r27
    148c:	a7 95       	ror	r26
    148e:	97 95       	ror	r25
    1490:	87 95       	ror	r24
    1492:	ee 0c       	add	r14, r14
    1494:	ff 1c       	adc	r15, r15
    1496:	00 1f       	adc	r16, r16
    1498:	11 1f       	adc	r17, r17
    149a:	6f 5f       	subi	r22, 0xFF	; 255
    149c:	7f 4f       	sbci	r23, 0xFF	; 255
    149e:	6f 31       	cpi	r22, 0x1F	; 31
    14a0:	71 05       	cpc	r23, r1
    14a2:	31 f7       	brne	.-52     	; 0x1470 <__divsf3+0xda>
    14a4:	da 01       	movw	r26, r20
    14a6:	c9 01       	movw	r24, r18
    14a8:	8f 77       	andi	r24, 0x7F	; 127
    14aa:	90 70       	andi	r25, 0x00	; 0
    14ac:	a0 70       	andi	r26, 0x00	; 0
    14ae:	b0 70       	andi	r27, 0x00	; 0
    14b0:	80 34       	cpi	r24, 0x40	; 64
    14b2:	91 05       	cpc	r25, r1
    14b4:	a1 05       	cpc	r26, r1
    14b6:	b1 05       	cpc	r27, r1
    14b8:	61 f4       	brne	.+24     	; 0x14d2 <__divsf3+0x13c>
    14ba:	27 fd       	sbrc	r18, 7
    14bc:	0a c0       	rjmp	.+20     	; 0x14d2 <__divsf3+0x13c>
    14be:	e1 14       	cp	r14, r1
    14c0:	f1 04       	cpc	r15, r1
    14c2:	01 05       	cpc	r16, r1
    14c4:	11 05       	cpc	r17, r1
    14c6:	29 f0       	breq	.+10     	; 0x14d2 <__divsf3+0x13c>
    14c8:	20 5c       	subi	r18, 0xC0	; 192
    14ca:	3f 4f       	sbci	r19, 0xFF	; 255
    14cc:	4f 4f       	sbci	r20, 0xFF	; 255
    14ce:	5f 4f       	sbci	r21, 0xFF	; 255
    14d0:	20 78       	andi	r18, 0x80	; 128
    14d2:	2d 87       	std	Y+13, r18	; 0x0d
    14d4:	3e 87       	std	Y+14, r19	; 0x0e
    14d6:	4f 87       	std	Y+15, r20	; 0x0f
    14d8:	58 8b       	std	Y+16, r21	; 0x10
    14da:	be 01       	movw	r22, r28
    14dc:	67 5f       	subi	r22, 0xF7	; 247
    14de:	7f 4f       	sbci	r23, 0xFF	; 255
    14e0:	cb 01       	movw	r24, r22
    14e2:	0e 94 a8 0b 	call	0x1750	; 0x1750 <__pack_f>
    14e6:	68 96       	adiw	r28, 0x18	; 24
    14e8:	ea e0       	ldi	r30, 0x0A	; 10
    14ea:	0c 94 72 0d 	jmp	0x1ae4	; 0x1ae4 <__epilogue_restores__+0x10>

000014ee <__eqsf2>:
    14ee:	a8 e1       	ldi	r26, 0x18	; 24
    14f0:	b0 e0       	ldi	r27, 0x00	; 0
    14f2:	ed e7       	ldi	r30, 0x7D	; 125
    14f4:	fa e0       	ldi	r31, 0x0A	; 10
    14f6:	0c 94 5a 0d 	jmp	0x1ab4	; 0x1ab4 <__prologue_saves__+0x18>
    14fa:	69 83       	std	Y+1, r22	; 0x01
    14fc:	7a 83       	std	Y+2, r23	; 0x02
    14fe:	8b 83       	std	Y+3, r24	; 0x03
    1500:	9c 83       	std	Y+4, r25	; 0x04
    1502:	2d 83       	std	Y+5, r18	; 0x05
    1504:	3e 83       	std	Y+6, r19	; 0x06
    1506:	4f 83       	std	Y+7, r20	; 0x07
    1508:	58 87       	std	Y+8, r21	; 0x08
    150a:	89 e0       	ldi	r24, 0x09	; 9
    150c:	e8 2e       	mov	r14, r24
    150e:	f1 2c       	mov	r15, r1
    1510:	ec 0e       	add	r14, r28
    1512:	fd 1e       	adc	r15, r29
    1514:	ce 01       	movw	r24, r28
    1516:	01 96       	adiw	r24, 0x01	; 1
    1518:	b7 01       	movw	r22, r14
    151a:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <__unpack_f>
    151e:	8e 01       	movw	r16, r28
    1520:	0f 5e       	subi	r16, 0xEF	; 239
    1522:	1f 4f       	sbci	r17, 0xFF	; 255
    1524:	ce 01       	movw	r24, r28
    1526:	05 96       	adiw	r24, 0x05	; 5
    1528:	b8 01       	movw	r22, r16
    152a:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <__unpack_f>
    152e:	89 85       	ldd	r24, Y+9	; 0x09
    1530:	82 30       	cpi	r24, 0x02	; 2
    1532:	40 f0       	brcs	.+16     	; 0x1544 <__eqsf2+0x56>
    1534:	89 89       	ldd	r24, Y+17	; 0x11
    1536:	82 30       	cpi	r24, 0x02	; 2
    1538:	28 f0       	brcs	.+10     	; 0x1544 <__eqsf2+0x56>
    153a:	c7 01       	movw	r24, r14
    153c:	b8 01       	movw	r22, r16
    153e:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <__fpcmp_parts_f>
    1542:	01 c0       	rjmp	.+2      	; 0x1546 <__eqsf2+0x58>
    1544:	81 e0       	ldi	r24, 0x01	; 1
    1546:	68 96       	adiw	r28, 0x18	; 24
    1548:	e6 e0       	ldi	r30, 0x06	; 6
    154a:	0c 94 76 0d 	jmp	0x1aec	; 0x1aec <__epilogue_restores__+0x18>

0000154e <__floatsisf>:
    154e:	a8 e0       	ldi	r26, 0x08	; 8
    1550:	b0 e0       	ldi	r27, 0x00	; 0
    1552:	ed ea       	ldi	r30, 0xAD	; 173
    1554:	fa e0       	ldi	r31, 0x0A	; 10
    1556:	0c 94 57 0d 	jmp	0x1aae	; 0x1aae <__prologue_saves__+0x12>
    155a:	9b 01       	movw	r18, r22
    155c:	ac 01       	movw	r20, r24
    155e:	83 e0       	ldi	r24, 0x03	; 3
    1560:	89 83       	std	Y+1, r24	; 0x01
    1562:	da 01       	movw	r26, r20
    1564:	c9 01       	movw	r24, r18
    1566:	88 27       	eor	r24, r24
    1568:	b7 fd       	sbrc	r27, 7
    156a:	83 95       	inc	r24
    156c:	99 27       	eor	r25, r25
    156e:	aa 27       	eor	r26, r26
    1570:	bb 27       	eor	r27, r27
    1572:	b8 2e       	mov	r11, r24
    1574:	21 15       	cp	r18, r1
    1576:	31 05       	cpc	r19, r1
    1578:	41 05       	cpc	r20, r1
    157a:	51 05       	cpc	r21, r1
    157c:	19 f4       	brne	.+6      	; 0x1584 <__floatsisf+0x36>
    157e:	82 e0       	ldi	r24, 0x02	; 2
    1580:	89 83       	std	Y+1, r24	; 0x01
    1582:	3a c0       	rjmp	.+116    	; 0x15f8 <__floatsisf+0xaa>
    1584:	88 23       	and	r24, r24
    1586:	a9 f0       	breq	.+42     	; 0x15b2 <__floatsisf+0x64>
    1588:	20 30       	cpi	r18, 0x00	; 0
    158a:	80 e0       	ldi	r24, 0x00	; 0
    158c:	38 07       	cpc	r19, r24
    158e:	80 e0       	ldi	r24, 0x00	; 0
    1590:	48 07       	cpc	r20, r24
    1592:	80 e8       	ldi	r24, 0x80	; 128
    1594:	58 07       	cpc	r21, r24
    1596:	29 f4       	brne	.+10     	; 0x15a2 <__floatsisf+0x54>
    1598:	60 e0       	ldi	r22, 0x00	; 0
    159a:	70 e0       	ldi	r23, 0x00	; 0
    159c:	80 e0       	ldi	r24, 0x00	; 0
    159e:	9f ec       	ldi	r25, 0xCF	; 207
    15a0:	30 c0       	rjmp	.+96     	; 0x1602 <__floatsisf+0xb4>
    15a2:	ee 24       	eor	r14, r14
    15a4:	ff 24       	eor	r15, r15
    15a6:	87 01       	movw	r16, r14
    15a8:	e2 1a       	sub	r14, r18
    15aa:	f3 0a       	sbc	r15, r19
    15ac:	04 0b       	sbc	r16, r20
    15ae:	15 0b       	sbc	r17, r21
    15b0:	02 c0       	rjmp	.+4      	; 0x15b6 <__floatsisf+0x68>
    15b2:	79 01       	movw	r14, r18
    15b4:	8a 01       	movw	r16, r20
    15b6:	8e e1       	ldi	r24, 0x1E	; 30
    15b8:	c8 2e       	mov	r12, r24
    15ba:	d1 2c       	mov	r13, r1
    15bc:	dc 82       	std	Y+4, r13	; 0x04
    15be:	cb 82       	std	Y+3, r12	; 0x03
    15c0:	ed 82       	std	Y+5, r14	; 0x05
    15c2:	fe 82       	std	Y+6, r15	; 0x06
    15c4:	0f 83       	std	Y+7, r16	; 0x07
    15c6:	18 87       	std	Y+8, r17	; 0x08
    15c8:	c8 01       	movw	r24, r16
    15ca:	b7 01       	movw	r22, r14
    15cc:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <__clzsi2>
    15d0:	01 97       	sbiw	r24, 0x01	; 1
    15d2:	18 16       	cp	r1, r24
    15d4:	19 06       	cpc	r1, r25
    15d6:	84 f4       	brge	.+32     	; 0x15f8 <__floatsisf+0xaa>
    15d8:	08 2e       	mov	r0, r24
    15da:	04 c0       	rjmp	.+8      	; 0x15e4 <__floatsisf+0x96>
    15dc:	ee 0c       	add	r14, r14
    15de:	ff 1c       	adc	r15, r15
    15e0:	00 1f       	adc	r16, r16
    15e2:	11 1f       	adc	r17, r17
    15e4:	0a 94       	dec	r0
    15e6:	d2 f7       	brpl	.-12     	; 0x15dc <__floatsisf+0x8e>
    15e8:	ed 82       	std	Y+5, r14	; 0x05
    15ea:	fe 82       	std	Y+6, r15	; 0x06
    15ec:	0f 83       	std	Y+7, r16	; 0x07
    15ee:	18 87       	std	Y+8, r17	; 0x08
    15f0:	c8 1a       	sub	r12, r24
    15f2:	d9 0a       	sbc	r13, r25
    15f4:	dc 82       	std	Y+4, r13	; 0x04
    15f6:	cb 82       	std	Y+3, r12	; 0x03
    15f8:	ba 82       	std	Y+2, r11	; 0x02
    15fa:	ce 01       	movw	r24, r28
    15fc:	01 96       	adiw	r24, 0x01	; 1
    15fe:	0e 94 a8 0b 	call	0x1750	; 0x1750 <__pack_f>
    1602:	28 96       	adiw	r28, 0x08	; 8
    1604:	e9 e0       	ldi	r30, 0x09	; 9
    1606:	0c 94 73 0d 	jmp	0x1ae6	; 0x1ae6 <__epilogue_restores__+0x12>

0000160a <__fixsfsi>:
    160a:	ac e0       	ldi	r26, 0x0C	; 12
    160c:	b0 e0       	ldi	r27, 0x00	; 0
    160e:	eb e0       	ldi	r30, 0x0B	; 11
    1610:	fb e0       	ldi	r31, 0x0B	; 11
    1612:	0c 94 5e 0d 	jmp	0x1abc	; 0x1abc <__prologue_saves__+0x20>
    1616:	69 83       	std	Y+1, r22	; 0x01
    1618:	7a 83       	std	Y+2, r23	; 0x02
    161a:	8b 83       	std	Y+3, r24	; 0x03
    161c:	9c 83       	std	Y+4, r25	; 0x04
    161e:	ce 01       	movw	r24, r28
    1620:	01 96       	adiw	r24, 0x01	; 1
    1622:	be 01       	movw	r22, r28
    1624:	6b 5f       	subi	r22, 0xFB	; 251
    1626:	7f 4f       	sbci	r23, 0xFF	; 255
    1628:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <__unpack_f>
    162c:	8d 81       	ldd	r24, Y+5	; 0x05
    162e:	82 30       	cpi	r24, 0x02	; 2
    1630:	61 f1       	breq	.+88     	; 0x168a <__fixsfsi+0x80>
    1632:	82 30       	cpi	r24, 0x02	; 2
    1634:	50 f1       	brcs	.+84     	; 0x168a <__fixsfsi+0x80>
    1636:	84 30       	cpi	r24, 0x04	; 4
    1638:	21 f4       	brne	.+8      	; 0x1642 <__fixsfsi+0x38>
    163a:	8e 81       	ldd	r24, Y+6	; 0x06
    163c:	88 23       	and	r24, r24
    163e:	51 f1       	breq	.+84     	; 0x1694 <__fixsfsi+0x8a>
    1640:	2e c0       	rjmp	.+92     	; 0x169e <__fixsfsi+0x94>
    1642:	2f 81       	ldd	r18, Y+7	; 0x07
    1644:	38 85       	ldd	r19, Y+8	; 0x08
    1646:	37 fd       	sbrc	r19, 7
    1648:	20 c0       	rjmp	.+64     	; 0x168a <__fixsfsi+0x80>
    164a:	6e 81       	ldd	r22, Y+6	; 0x06
    164c:	2f 31       	cpi	r18, 0x1F	; 31
    164e:	31 05       	cpc	r19, r1
    1650:	1c f0       	brlt	.+6      	; 0x1658 <__fixsfsi+0x4e>
    1652:	66 23       	and	r22, r22
    1654:	f9 f0       	breq	.+62     	; 0x1694 <__fixsfsi+0x8a>
    1656:	23 c0       	rjmp	.+70     	; 0x169e <__fixsfsi+0x94>
    1658:	8e e1       	ldi	r24, 0x1E	; 30
    165a:	90 e0       	ldi	r25, 0x00	; 0
    165c:	82 1b       	sub	r24, r18
    165e:	93 0b       	sbc	r25, r19
    1660:	29 85       	ldd	r18, Y+9	; 0x09
    1662:	3a 85       	ldd	r19, Y+10	; 0x0a
    1664:	4b 85       	ldd	r20, Y+11	; 0x0b
    1666:	5c 85       	ldd	r21, Y+12	; 0x0c
    1668:	04 c0       	rjmp	.+8      	; 0x1672 <__fixsfsi+0x68>
    166a:	56 95       	lsr	r21
    166c:	47 95       	ror	r20
    166e:	37 95       	ror	r19
    1670:	27 95       	ror	r18
    1672:	8a 95       	dec	r24
    1674:	d2 f7       	brpl	.-12     	; 0x166a <__fixsfsi+0x60>
    1676:	66 23       	and	r22, r22
    1678:	b1 f0       	breq	.+44     	; 0x16a6 <__fixsfsi+0x9c>
    167a:	50 95       	com	r21
    167c:	40 95       	com	r20
    167e:	30 95       	com	r19
    1680:	21 95       	neg	r18
    1682:	3f 4f       	sbci	r19, 0xFF	; 255
    1684:	4f 4f       	sbci	r20, 0xFF	; 255
    1686:	5f 4f       	sbci	r21, 0xFF	; 255
    1688:	0e c0       	rjmp	.+28     	; 0x16a6 <__fixsfsi+0x9c>
    168a:	20 e0       	ldi	r18, 0x00	; 0
    168c:	30 e0       	ldi	r19, 0x00	; 0
    168e:	40 e0       	ldi	r20, 0x00	; 0
    1690:	50 e0       	ldi	r21, 0x00	; 0
    1692:	09 c0       	rjmp	.+18     	; 0x16a6 <__fixsfsi+0x9c>
    1694:	2f ef       	ldi	r18, 0xFF	; 255
    1696:	3f ef       	ldi	r19, 0xFF	; 255
    1698:	4f ef       	ldi	r20, 0xFF	; 255
    169a:	5f e7       	ldi	r21, 0x7F	; 127
    169c:	04 c0       	rjmp	.+8      	; 0x16a6 <__fixsfsi+0x9c>
    169e:	20 e0       	ldi	r18, 0x00	; 0
    16a0:	30 e0       	ldi	r19, 0x00	; 0
    16a2:	40 e0       	ldi	r20, 0x00	; 0
    16a4:	50 e8       	ldi	r21, 0x80	; 128
    16a6:	b9 01       	movw	r22, r18
    16a8:	ca 01       	movw	r24, r20
    16aa:	2c 96       	adiw	r28, 0x0c	; 12
    16ac:	e2 e0       	ldi	r30, 0x02	; 2
    16ae:	0c 94 7a 0d 	jmp	0x1af4	; 0x1af4 <__epilogue_restores__+0x20>

000016b2 <__clzsi2>:
    16b2:	ef 92       	push	r14
    16b4:	ff 92       	push	r15
    16b6:	0f 93       	push	r16
    16b8:	1f 93       	push	r17
    16ba:	7b 01       	movw	r14, r22
    16bc:	8c 01       	movw	r16, r24
    16be:	80 e0       	ldi	r24, 0x00	; 0
    16c0:	e8 16       	cp	r14, r24
    16c2:	80 e0       	ldi	r24, 0x00	; 0
    16c4:	f8 06       	cpc	r15, r24
    16c6:	81 e0       	ldi	r24, 0x01	; 1
    16c8:	08 07       	cpc	r16, r24
    16ca:	80 e0       	ldi	r24, 0x00	; 0
    16cc:	18 07       	cpc	r17, r24
    16ce:	88 f4       	brcc	.+34     	; 0x16f2 <__clzsi2+0x40>
    16d0:	8f ef       	ldi	r24, 0xFF	; 255
    16d2:	e8 16       	cp	r14, r24
    16d4:	f1 04       	cpc	r15, r1
    16d6:	01 05       	cpc	r16, r1
    16d8:	11 05       	cpc	r17, r1
    16da:	31 f0       	breq	.+12     	; 0x16e8 <__clzsi2+0x36>
    16dc:	28 f0       	brcs	.+10     	; 0x16e8 <__clzsi2+0x36>
    16de:	88 e0       	ldi	r24, 0x08	; 8
    16e0:	90 e0       	ldi	r25, 0x00	; 0
    16e2:	a0 e0       	ldi	r26, 0x00	; 0
    16e4:	b0 e0       	ldi	r27, 0x00	; 0
    16e6:	17 c0       	rjmp	.+46     	; 0x1716 <__clzsi2+0x64>
    16e8:	80 e0       	ldi	r24, 0x00	; 0
    16ea:	90 e0       	ldi	r25, 0x00	; 0
    16ec:	a0 e0       	ldi	r26, 0x00	; 0
    16ee:	b0 e0       	ldi	r27, 0x00	; 0
    16f0:	12 c0       	rjmp	.+36     	; 0x1716 <__clzsi2+0x64>
    16f2:	80 e0       	ldi	r24, 0x00	; 0
    16f4:	e8 16       	cp	r14, r24
    16f6:	80 e0       	ldi	r24, 0x00	; 0
    16f8:	f8 06       	cpc	r15, r24
    16fa:	80 e0       	ldi	r24, 0x00	; 0
    16fc:	08 07       	cpc	r16, r24
    16fe:	81 e0       	ldi	r24, 0x01	; 1
    1700:	18 07       	cpc	r17, r24
    1702:	28 f0       	brcs	.+10     	; 0x170e <__clzsi2+0x5c>
    1704:	88 e1       	ldi	r24, 0x18	; 24
    1706:	90 e0       	ldi	r25, 0x00	; 0
    1708:	a0 e0       	ldi	r26, 0x00	; 0
    170a:	b0 e0       	ldi	r27, 0x00	; 0
    170c:	04 c0       	rjmp	.+8      	; 0x1716 <__clzsi2+0x64>
    170e:	80 e1       	ldi	r24, 0x10	; 16
    1710:	90 e0       	ldi	r25, 0x00	; 0
    1712:	a0 e0       	ldi	r26, 0x00	; 0
    1714:	b0 e0       	ldi	r27, 0x00	; 0
    1716:	20 e2       	ldi	r18, 0x20	; 32
    1718:	30 e0       	ldi	r19, 0x00	; 0
    171a:	40 e0       	ldi	r20, 0x00	; 0
    171c:	50 e0       	ldi	r21, 0x00	; 0
    171e:	28 1b       	sub	r18, r24
    1720:	39 0b       	sbc	r19, r25
    1722:	4a 0b       	sbc	r20, r26
    1724:	5b 0b       	sbc	r21, r27
    1726:	04 c0       	rjmp	.+8      	; 0x1730 <__clzsi2+0x7e>
    1728:	16 95       	lsr	r17
    172a:	07 95       	ror	r16
    172c:	f7 94       	ror	r15
    172e:	e7 94       	ror	r14
    1730:	8a 95       	dec	r24
    1732:	d2 f7       	brpl	.-12     	; 0x1728 <__clzsi2+0x76>
    1734:	f7 01       	movw	r30, r14
    1736:	e9 57       	subi	r30, 0x79	; 121
    1738:	ff 4f       	sbci	r31, 0xFF	; 255
    173a:	80 81       	ld	r24, Z
    173c:	28 1b       	sub	r18, r24
    173e:	31 09       	sbc	r19, r1
    1740:	41 09       	sbc	r20, r1
    1742:	51 09       	sbc	r21, r1
    1744:	c9 01       	movw	r24, r18
    1746:	1f 91       	pop	r17
    1748:	0f 91       	pop	r16
    174a:	ff 90       	pop	r15
    174c:	ef 90       	pop	r14
    174e:	08 95       	ret

00001750 <__pack_f>:
    1750:	df 92       	push	r13
    1752:	ef 92       	push	r14
    1754:	ff 92       	push	r15
    1756:	0f 93       	push	r16
    1758:	1f 93       	push	r17
    175a:	fc 01       	movw	r30, r24
    175c:	e4 80       	ldd	r14, Z+4	; 0x04
    175e:	f5 80       	ldd	r15, Z+5	; 0x05
    1760:	06 81       	ldd	r16, Z+6	; 0x06
    1762:	17 81       	ldd	r17, Z+7	; 0x07
    1764:	d1 80       	ldd	r13, Z+1	; 0x01
    1766:	80 81       	ld	r24, Z
    1768:	82 30       	cpi	r24, 0x02	; 2
    176a:	48 f4       	brcc	.+18     	; 0x177e <__pack_f+0x2e>
    176c:	80 e0       	ldi	r24, 0x00	; 0
    176e:	90 e0       	ldi	r25, 0x00	; 0
    1770:	a0 e1       	ldi	r26, 0x10	; 16
    1772:	b0 e0       	ldi	r27, 0x00	; 0
    1774:	e8 2a       	or	r14, r24
    1776:	f9 2a       	or	r15, r25
    1778:	0a 2b       	or	r16, r26
    177a:	1b 2b       	or	r17, r27
    177c:	a5 c0       	rjmp	.+330    	; 0x18c8 <__pack_f+0x178>
    177e:	84 30       	cpi	r24, 0x04	; 4
    1780:	09 f4       	brne	.+2      	; 0x1784 <__pack_f+0x34>
    1782:	9f c0       	rjmp	.+318    	; 0x18c2 <__pack_f+0x172>
    1784:	82 30       	cpi	r24, 0x02	; 2
    1786:	21 f4       	brne	.+8      	; 0x1790 <__pack_f+0x40>
    1788:	ee 24       	eor	r14, r14
    178a:	ff 24       	eor	r15, r15
    178c:	87 01       	movw	r16, r14
    178e:	05 c0       	rjmp	.+10     	; 0x179a <__pack_f+0x4a>
    1790:	e1 14       	cp	r14, r1
    1792:	f1 04       	cpc	r15, r1
    1794:	01 05       	cpc	r16, r1
    1796:	11 05       	cpc	r17, r1
    1798:	19 f4       	brne	.+6      	; 0x17a0 <__pack_f+0x50>
    179a:	e0 e0       	ldi	r30, 0x00	; 0
    179c:	f0 e0       	ldi	r31, 0x00	; 0
    179e:	96 c0       	rjmp	.+300    	; 0x18cc <__pack_f+0x17c>
    17a0:	62 81       	ldd	r22, Z+2	; 0x02
    17a2:	73 81       	ldd	r23, Z+3	; 0x03
    17a4:	9f ef       	ldi	r25, 0xFF	; 255
    17a6:	62 38       	cpi	r22, 0x82	; 130
    17a8:	79 07       	cpc	r23, r25
    17aa:	0c f0       	brlt	.+2      	; 0x17ae <__pack_f+0x5e>
    17ac:	5b c0       	rjmp	.+182    	; 0x1864 <__pack_f+0x114>
    17ae:	22 e8       	ldi	r18, 0x82	; 130
    17b0:	3f ef       	ldi	r19, 0xFF	; 255
    17b2:	26 1b       	sub	r18, r22
    17b4:	37 0b       	sbc	r19, r23
    17b6:	2a 31       	cpi	r18, 0x1A	; 26
    17b8:	31 05       	cpc	r19, r1
    17ba:	2c f0       	brlt	.+10     	; 0x17c6 <__pack_f+0x76>
    17bc:	20 e0       	ldi	r18, 0x00	; 0
    17be:	30 e0       	ldi	r19, 0x00	; 0
    17c0:	40 e0       	ldi	r20, 0x00	; 0
    17c2:	50 e0       	ldi	r21, 0x00	; 0
    17c4:	2a c0       	rjmp	.+84     	; 0x181a <__pack_f+0xca>
    17c6:	b8 01       	movw	r22, r16
    17c8:	a7 01       	movw	r20, r14
    17ca:	02 2e       	mov	r0, r18
    17cc:	04 c0       	rjmp	.+8      	; 0x17d6 <__pack_f+0x86>
    17ce:	76 95       	lsr	r23
    17d0:	67 95       	ror	r22
    17d2:	57 95       	ror	r21
    17d4:	47 95       	ror	r20
    17d6:	0a 94       	dec	r0
    17d8:	d2 f7       	brpl	.-12     	; 0x17ce <__pack_f+0x7e>
    17da:	81 e0       	ldi	r24, 0x01	; 1
    17dc:	90 e0       	ldi	r25, 0x00	; 0
    17de:	a0 e0       	ldi	r26, 0x00	; 0
    17e0:	b0 e0       	ldi	r27, 0x00	; 0
    17e2:	04 c0       	rjmp	.+8      	; 0x17ec <__pack_f+0x9c>
    17e4:	88 0f       	add	r24, r24
    17e6:	99 1f       	adc	r25, r25
    17e8:	aa 1f       	adc	r26, r26
    17ea:	bb 1f       	adc	r27, r27
    17ec:	2a 95       	dec	r18
    17ee:	d2 f7       	brpl	.-12     	; 0x17e4 <__pack_f+0x94>
    17f0:	01 97       	sbiw	r24, 0x01	; 1
    17f2:	a1 09       	sbc	r26, r1
    17f4:	b1 09       	sbc	r27, r1
    17f6:	8e 21       	and	r24, r14
    17f8:	9f 21       	and	r25, r15
    17fa:	a0 23       	and	r26, r16
    17fc:	b1 23       	and	r27, r17
    17fe:	00 97       	sbiw	r24, 0x00	; 0
    1800:	a1 05       	cpc	r26, r1
    1802:	b1 05       	cpc	r27, r1
    1804:	21 f0       	breq	.+8      	; 0x180e <__pack_f+0xbe>
    1806:	81 e0       	ldi	r24, 0x01	; 1
    1808:	90 e0       	ldi	r25, 0x00	; 0
    180a:	a0 e0       	ldi	r26, 0x00	; 0
    180c:	b0 e0       	ldi	r27, 0x00	; 0
    180e:	9a 01       	movw	r18, r20
    1810:	ab 01       	movw	r20, r22
    1812:	28 2b       	or	r18, r24
    1814:	39 2b       	or	r19, r25
    1816:	4a 2b       	or	r20, r26
    1818:	5b 2b       	or	r21, r27
    181a:	da 01       	movw	r26, r20
    181c:	c9 01       	movw	r24, r18
    181e:	8f 77       	andi	r24, 0x7F	; 127
    1820:	90 70       	andi	r25, 0x00	; 0
    1822:	a0 70       	andi	r26, 0x00	; 0
    1824:	b0 70       	andi	r27, 0x00	; 0
    1826:	80 34       	cpi	r24, 0x40	; 64
    1828:	91 05       	cpc	r25, r1
    182a:	a1 05       	cpc	r26, r1
    182c:	b1 05       	cpc	r27, r1
    182e:	39 f4       	brne	.+14     	; 0x183e <__pack_f+0xee>
    1830:	27 ff       	sbrs	r18, 7
    1832:	09 c0       	rjmp	.+18     	; 0x1846 <__pack_f+0xf6>
    1834:	20 5c       	subi	r18, 0xC0	; 192
    1836:	3f 4f       	sbci	r19, 0xFF	; 255
    1838:	4f 4f       	sbci	r20, 0xFF	; 255
    183a:	5f 4f       	sbci	r21, 0xFF	; 255
    183c:	04 c0       	rjmp	.+8      	; 0x1846 <__pack_f+0xf6>
    183e:	21 5c       	subi	r18, 0xC1	; 193
    1840:	3f 4f       	sbci	r19, 0xFF	; 255
    1842:	4f 4f       	sbci	r20, 0xFF	; 255
    1844:	5f 4f       	sbci	r21, 0xFF	; 255
    1846:	e0 e0       	ldi	r30, 0x00	; 0
    1848:	f0 e0       	ldi	r31, 0x00	; 0
    184a:	20 30       	cpi	r18, 0x00	; 0
    184c:	a0 e0       	ldi	r26, 0x00	; 0
    184e:	3a 07       	cpc	r19, r26
    1850:	a0 e0       	ldi	r26, 0x00	; 0
    1852:	4a 07       	cpc	r20, r26
    1854:	a0 e4       	ldi	r26, 0x40	; 64
    1856:	5a 07       	cpc	r21, r26
    1858:	10 f0       	brcs	.+4      	; 0x185e <__pack_f+0x10e>
    185a:	e1 e0       	ldi	r30, 0x01	; 1
    185c:	f0 e0       	ldi	r31, 0x00	; 0
    185e:	79 01       	movw	r14, r18
    1860:	8a 01       	movw	r16, r20
    1862:	27 c0       	rjmp	.+78     	; 0x18b2 <__pack_f+0x162>
    1864:	60 38       	cpi	r22, 0x80	; 128
    1866:	71 05       	cpc	r23, r1
    1868:	64 f5       	brge	.+88     	; 0x18c2 <__pack_f+0x172>
    186a:	fb 01       	movw	r30, r22
    186c:	e1 58       	subi	r30, 0x81	; 129
    186e:	ff 4f       	sbci	r31, 0xFF	; 255
    1870:	d8 01       	movw	r26, r16
    1872:	c7 01       	movw	r24, r14
    1874:	8f 77       	andi	r24, 0x7F	; 127
    1876:	90 70       	andi	r25, 0x00	; 0
    1878:	a0 70       	andi	r26, 0x00	; 0
    187a:	b0 70       	andi	r27, 0x00	; 0
    187c:	80 34       	cpi	r24, 0x40	; 64
    187e:	91 05       	cpc	r25, r1
    1880:	a1 05       	cpc	r26, r1
    1882:	b1 05       	cpc	r27, r1
    1884:	39 f4       	brne	.+14     	; 0x1894 <__pack_f+0x144>
    1886:	e7 fe       	sbrs	r14, 7
    1888:	0d c0       	rjmp	.+26     	; 0x18a4 <__pack_f+0x154>
    188a:	80 e4       	ldi	r24, 0x40	; 64
    188c:	90 e0       	ldi	r25, 0x00	; 0
    188e:	a0 e0       	ldi	r26, 0x00	; 0
    1890:	b0 e0       	ldi	r27, 0x00	; 0
    1892:	04 c0       	rjmp	.+8      	; 0x189c <__pack_f+0x14c>
    1894:	8f e3       	ldi	r24, 0x3F	; 63
    1896:	90 e0       	ldi	r25, 0x00	; 0
    1898:	a0 e0       	ldi	r26, 0x00	; 0
    189a:	b0 e0       	ldi	r27, 0x00	; 0
    189c:	e8 0e       	add	r14, r24
    189e:	f9 1e       	adc	r15, r25
    18a0:	0a 1f       	adc	r16, r26
    18a2:	1b 1f       	adc	r17, r27
    18a4:	17 ff       	sbrs	r17, 7
    18a6:	05 c0       	rjmp	.+10     	; 0x18b2 <__pack_f+0x162>
    18a8:	16 95       	lsr	r17
    18aa:	07 95       	ror	r16
    18ac:	f7 94       	ror	r15
    18ae:	e7 94       	ror	r14
    18b0:	31 96       	adiw	r30, 0x01	; 1
    18b2:	87 e0       	ldi	r24, 0x07	; 7
    18b4:	16 95       	lsr	r17
    18b6:	07 95       	ror	r16
    18b8:	f7 94       	ror	r15
    18ba:	e7 94       	ror	r14
    18bc:	8a 95       	dec	r24
    18be:	d1 f7       	brne	.-12     	; 0x18b4 <__pack_f+0x164>
    18c0:	05 c0       	rjmp	.+10     	; 0x18cc <__pack_f+0x17c>
    18c2:	ee 24       	eor	r14, r14
    18c4:	ff 24       	eor	r15, r15
    18c6:	87 01       	movw	r16, r14
    18c8:	ef ef       	ldi	r30, 0xFF	; 255
    18ca:	f0 e0       	ldi	r31, 0x00	; 0
    18cc:	6e 2f       	mov	r22, r30
    18ce:	67 95       	ror	r22
    18d0:	66 27       	eor	r22, r22
    18d2:	67 95       	ror	r22
    18d4:	90 2f       	mov	r25, r16
    18d6:	9f 77       	andi	r25, 0x7F	; 127
    18d8:	d7 94       	ror	r13
    18da:	dd 24       	eor	r13, r13
    18dc:	d7 94       	ror	r13
    18de:	8e 2f       	mov	r24, r30
    18e0:	86 95       	lsr	r24
    18e2:	49 2f       	mov	r20, r25
    18e4:	46 2b       	or	r20, r22
    18e6:	58 2f       	mov	r21, r24
    18e8:	5d 29       	or	r21, r13
    18ea:	b7 01       	movw	r22, r14
    18ec:	ca 01       	movw	r24, r20
    18ee:	1f 91       	pop	r17
    18f0:	0f 91       	pop	r16
    18f2:	ff 90       	pop	r15
    18f4:	ef 90       	pop	r14
    18f6:	df 90       	pop	r13
    18f8:	08 95       	ret

000018fa <__unpack_f>:
    18fa:	fc 01       	movw	r30, r24
    18fc:	db 01       	movw	r26, r22
    18fe:	40 81       	ld	r20, Z
    1900:	51 81       	ldd	r21, Z+1	; 0x01
    1902:	22 81       	ldd	r18, Z+2	; 0x02
    1904:	62 2f       	mov	r22, r18
    1906:	6f 77       	andi	r22, 0x7F	; 127
    1908:	70 e0       	ldi	r23, 0x00	; 0
    190a:	22 1f       	adc	r18, r18
    190c:	22 27       	eor	r18, r18
    190e:	22 1f       	adc	r18, r18
    1910:	93 81       	ldd	r25, Z+3	; 0x03
    1912:	89 2f       	mov	r24, r25
    1914:	88 0f       	add	r24, r24
    1916:	82 2b       	or	r24, r18
    1918:	28 2f       	mov	r18, r24
    191a:	30 e0       	ldi	r19, 0x00	; 0
    191c:	99 1f       	adc	r25, r25
    191e:	99 27       	eor	r25, r25
    1920:	99 1f       	adc	r25, r25
    1922:	11 96       	adiw	r26, 0x01	; 1
    1924:	9c 93       	st	X, r25
    1926:	11 97       	sbiw	r26, 0x01	; 1
    1928:	21 15       	cp	r18, r1
    192a:	31 05       	cpc	r19, r1
    192c:	a9 f5       	brne	.+106    	; 0x1998 <__unpack_f+0x9e>
    192e:	41 15       	cp	r20, r1
    1930:	51 05       	cpc	r21, r1
    1932:	61 05       	cpc	r22, r1
    1934:	71 05       	cpc	r23, r1
    1936:	11 f4       	brne	.+4      	; 0x193c <__unpack_f+0x42>
    1938:	82 e0       	ldi	r24, 0x02	; 2
    193a:	37 c0       	rjmp	.+110    	; 0x19aa <__unpack_f+0xb0>
    193c:	82 e8       	ldi	r24, 0x82	; 130
    193e:	9f ef       	ldi	r25, 0xFF	; 255
    1940:	13 96       	adiw	r26, 0x03	; 3
    1942:	9c 93       	st	X, r25
    1944:	8e 93       	st	-X, r24
    1946:	12 97       	sbiw	r26, 0x02	; 2
    1948:	9a 01       	movw	r18, r20
    194a:	ab 01       	movw	r20, r22
    194c:	67 e0       	ldi	r22, 0x07	; 7
    194e:	22 0f       	add	r18, r18
    1950:	33 1f       	adc	r19, r19
    1952:	44 1f       	adc	r20, r20
    1954:	55 1f       	adc	r21, r21
    1956:	6a 95       	dec	r22
    1958:	d1 f7       	brne	.-12     	; 0x194e <__unpack_f+0x54>
    195a:	83 e0       	ldi	r24, 0x03	; 3
    195c:	8c 93       	st	X, r24
    195e:	0d c0       	rjmp	.+26     	; 0x197a <__unpack_f+0x80>
    1960:	22 0f       	add	r18, r18
    1962:	33 1f       	adc	r19, r19
    1964:	44 1f       	adc	r20, r20
    1966:	55 1f       	adc	r21, r21
    1968:	12 96       	adiw	r26, 0x02	; 2
    196a:	8d 91       	ld	r24, X+
    196c:	9c 91       	ld	r25, X
    196e:	13 97       	sbiw	r26, 0x03	; 3
    1970:	01 97       	sbiw	r24, 0x01	; 1
    1972:	13 96       	adiw	r26, 0x03	; 3
    1974:	9c 93       	st	X, r25
    1976:	8e 93       	st	-X, r24
    1978:	12 97       	sbiw	r26, 0x02	; 2
    197a:	20 30       	cpi	r18, 0x00	; 0
    197c:	80 e0       	ldi	r24, 0x00	; 0
    197e:	38 07       	cpc	r19, r24
    1980:	80 e0       	ldi	r24, 0x00	; 0
    1982:	48 07       	cpc	r20, r24
    1984:	80 e4       	ldi	r24, 0x40	; 64
    1986:	58 07       	cpc	r21, r24
    1988:	58 f3       	brcs	.-42     	; 0x1960 <__unpack_f+0x66>
    198a:	14 96       	adiw	r26, 0x04	; 4
    198c:	2d 93       	st	X+, r18
    198e:	3d 93       	st	X+, r19
    1990:	4d 93       	st	X+, r20
    1992:	5c 93       	st	X, r21
    1994:	17 97       	sbiw	r26, 0x07	; 7
    1996:	08 95       	ret
    1998:	2f 3f       	cpi	r18, 0xFF	; 255
    199a:	31 05       	cpc	r19, r1
    199c:	79 f4       	brne	.+30     	; 0x19bc <__unpack_f+0xc2>
    199e:	41 15       	cp	r20, r1
    19a0:	51 05       	cpc	r21, r1
    19a2:	61 05       	cpc	r22, r1
    19a4:	71 05       	cpc	r23, r1
    19a6:	19 f4       	brne	.+6      	; 0x19ae <__unpack_f+0xb4>
    19a8:	84 e0       	ldi	r24, 0x04	; 4
    19aa:	8c 93       	st	X, r24
    19ac:	08 95       	ret
    19ae:	64 ff       	sbrs	r22, 4
    19b0:	03 c0       	rjmp	.+6      	; 0x19b8 <__unpack_f+0xbe>
    19b2:	81 e0       	ldi	r24, 0x01	; 1
    19b4:	8c 93       	st	X, r24
    19b6:	12 c0       	rjmp	.+36     	; 0x19dc <__unpack_f+0xe2>
    19b8:	1c 92       	st	X, r1
    19ba:	10 c0       	rjmp	.+32     	; 0x19dc <__unpack_f+0xe2>
    19bc:	2f 57       	subi	r18, 0x7F	; 127
    19be:	30 40       	sbci	r19, 0x00	; 0
    19c0:	13 96       	adiw	r26, 0x03	; 3
    19c2:	3c 93       	st	X, r19
    19c4:	2e 93       	st	-X, r18
    19c6:	12 97       	sbiw	r26, 0x02	; 2
    19c8:	83 e0       	ldi	r24, 0x03	; 3
    19ca:	8c 93       	st	X, r24
    19cc:	87 e0       	ldi	r24, 0x07	; 7
    19ce:	44 0f       	add	r20, r20
    19d0:	55 1f       	adc	r21, r21
    19d2:	66 1f       	adc	r22, r22
    19d4:	77 1f       	adc	r23, r23
    19d6:	8a 95       	dec	r24
    19d8:	d1 f7       	brne	.-12     	; 0x19ce <__unpack_f+0xd4>
    19da:	70 64       	ori	r23, 0x40	; 64
    19dc:	14 96       	adiw	r26, 0x04	; 4
    19de:	4d 93       	st	X+, r20
    19e0:	5d 93       	st	X+, r21
    19e2:	6d 93       	st	X+, r22
    19e4:	7c 93       	st	X, r23
    19e6:	17 97       	sbiw	r26, 0x07	; 7
    19e8:	08 95       	ret

000019ea <__fpcmp_parts_f>:
    19ea:	1f 93       	push	r17
    19ec:	dc 01       	movw	r26, r24
    19ee:	fb 01       	movw	r30, r22
    19f0:	9c 91       	ld	r25, X
    19f2:	92 30       	cpi	r25, 0x02	; 2
    19f4:	08 f4       	brcc	.+2      	; 0x19f8 <__fpcmp_parts_f+0xe>
    19f6:	47 c0       	rjmp	.+142    	; 0x1a86 <__fpcmp_parts_f+0x9c>
    19f8:	80 81       	ld	r24, Z
    19fa:	82 30       	cpi	r24, 0x02	; 2
    19fc:	08 f4       	brcc	.+2      	; 0x1a00 <__fpcmp_parts_f+0x16>
    19fe:	43 c0       	rjmp	.+134    	; 0x1a86 <__fpcmp_parts_f+0x9c>
    1a00:	94 30       	cpi	r25, 0x04	; 4
    1a02:	51 f4       	brne	.+20     	; 0x1a18 <__fpcmp_parts_f+0x2e>
    1a04:	11 96       	adiw	r26, 0x01	; 1
    1a06:	1c 91       	ld	r17, X
    1a08:	84 30       	cpi	r24, 0x04	; 4
    1a0a:	99 f5       	brne	.+102    	; 0x1a72 <__fpcmp_parts_f+0x88>
    1a0c:	81 81       	ldd	r24, Z+1	; 0x01
    1a0e:	68 2f       	mov	r22, r24
    1a10:	70 e0       	ldi	r23, 0x00	; 0
    1a12:	61 1b       	sub	r22, r17
    1a14:	71 09       	sbc	r23, r1
    1a16:	3f c0       	rjmp	.+126    	; 0x1a96 <__fpcmp_parts_f+0xac>
    1a18:	84 30       	cpi	r24, 0x04	; 4
    1a1a:	21 f0       	breq	.+8      	; 0x1a24 <__fpcmp_parts_f+0x3a>
    1a1c:	92 30       	cpi	r25, 0x02	; 2
    1a1e:	31 f4       	brne	.+12     	; 0x1a2c <__fpcmp_parts_f+0x42>
    1a20:	82 30       	cpi	r24, 0x02	; 2
    1a22:	b9 f1       	breq	.+110    	; 0x1a92 <__fpcmp_parts_f+0xa8>
    1a24:	81 81       	ldd	r24, Z+1	; 0x01
    1a26:	88 23       	and	r24, r24
    1a28:	89 f1       	breq	.+98     	; 0x1a8c <__fpcmp_parts_f+0xa2>
    1a2a:	2d c0       	rjmp	.+90     	; 0x1a86 <__fpcmp_parts_f+0x9c>
    1a2c:	11 96       	adiw	r26, 0x01	; 1
    1a2e:	1c 91       	ld	r17, X
    1a30:	11 97       	sbiw	r26, 0x01	; 1
    1a32:	82 30       	cpi	r24, 0x02	; 2
    1a34:	f1 f0       	breq	.+60     	; 0x1a72 <__fpcmp_parts_f+0x88>
    1a36:	81 81       	ldd	r24, Z+1	; 0x01
    1a38:	18 17       	cp	r17, r24
    1a3a:	d9 f4       	brne	.+54     	; 0x1a72 <__fpcmp_parts_f+0x88>
    1a3c:	12 96       	adiw	r26, 0x02	; 2
    1a3e:	2d 91       	ld	r18, X+
    1a40:	3c 91       	ld	r19, X
    1a42:	13 97       	sbiw	r26, 0x03	; 3
    1a44:	82 81       	ldd	r24, Z+2	; 0x02
    1a46:	93 81       	ldd	r25, Z+3	; 0x03
    1a48:	82 17       	cp	r24, r18
    1a4a:	93 07       	cpc	r25, r19
    1a4c:	94 f0       	brlt	.+36     	; 0x1a72 <__fpcmp_parts_f+0x88>
    1a4e:	28 17       	cp	r18, r24
    1a50:	39 07       	cpc	r19, r25
    1a52:	bc f0       	brlt	.+46     	; 0x1a82 <__fpcmp_parts_f+0x98>
    1a54:	14 96       	adiw	r26, 0x04	; 4
    1a56:	8d 91       	ld	r24, X+
    1a58:	9d 91       	ld	r25, X+
    1a5a:	0d 90       	ld	r0, X+
    1a5c:	bc 91       	ld	r27, X
    1a5e:	a0 2d       	mov	r26, r0
    1a60:	24 81       	ldd	r18, Z+4	; 0x04
    1a62:	35 81       	ldd	r19, Z+5	; 0x05
    1a64:	46 81       	ldd	r20, Z+6	; 0x06
    1a66:	57 81       	ldd	r21, Z+7	; 0x07
    1a68:	28 17       	cp	r18, r24
    1a6a:	39 07       	cpc	r19, r25
    1a6c:	4a 07       	cpc	r20, r26
    1a6e:	5b 07       	cpc	r21, r27
    1a70:	18 f4       	brcc	.+6      	; 0x1a78 <__fpcmp_parts_f+0x8e>
    1a72:	11 23       	and	r17, r17
    1a74:	41 f0       	breq	.+16     	; 0x1a86 <__fpcmp_parts_f+0x9c>
    1a76:	0a c0       	rjmp	.+20     	; 0x1a8c <__fpcmp_parts_f+0xa2>
    1a78:	82 17       	cp	r24, r18
    1a7a:	93 07       	cpc	r25, r19
    1a7c:	a4 07       	cpc	r26, r20
    1a7e:	b5 07       	cpc	r27, r21
    1a80:	40 f4       	brcc	.+16     	; 0x1a92 <__fpcmp_parts_f+0xa8>
    1a82:	11 23       	and	r17, r17
    1a84:	19 f0       	breq	.+6      	; 0x1a8c <__fpcmp_parts_f+0xa2>
    1a86:	61 e0       	ldi	r22, 0x01	; 1
    1a88:	70 e0       	ldi	r23, 0x00	; 0
    1a8a:	05 c0       	rjmp	.+10     	; 0x1a96 <__fpcmp_parts_f+0xac>
    1a8c:	6f ef       	ldi	r22, 0xFF	; 255
    1a8e:	7f ef       	ldi	r23, 0xFF	; 255
    1a90:	02 c0       	rjmp	.+4      	; 0x1a96 <__fpcmp_parts_f+0xac>
    1a92:	60 e0       	ldi	r22, 0x00	; 0
    1a94:	70 e0       	ldi	r23, 0x00	; 0
    1a96:	cb 01       	movw	r24, r22
    1a98:	1f 91       	pop	r17
    1a9a:	08 95       	ret

00001a9c <__prologue_saves__>:
    1a9c:	2f 92       	push	r2
    1a9e:	3f 92       	push	r3
    1aa0:	4f 92       	push	r4
    1aa2:	5f 92       	push	r5
    1aa4:	6f 92       	push	r6
    1aa6:	7f 92       	push	r7
    1aa8:	8f 92       	push	r8
    1aaa:	9f 92       	push	r9
    1aac:	af 92       	push	r10
    1aae:	bf 92       	push	r11
    1ab0:	cf 92       	push	r12
    1ab2:	df 92       	push	r13
    1ab4:	ef 92       	push	r14
    1ab6:	ff 92       	push	r15
    1ab8:	0f 93       	push	r16
    1aba:	1f 93       	push	r17
    1abc:	cf 93       	push	r28
    1abe:	df 93       	push	r29
    1ac0:	cd b7       	in	r28, 0x3d	; 61
    1ac2:	de b7       	in	r29, 0x3e	; 62
    1ac4:	ca 1b       	sub	r28, r26
    1ac6:	db 0b       	sbc	r29, r27
    1ac8:	0f b6       	in	r0, 0x3f	; 63
    1aca:	f8 94       	cli
    1acc:	de bf       	out	0x3e, r29	; 62
    1ace:	0f be       	out	0x3f, r0	; 63
    1ad0:	cd bf       	out	0x3d, r28	; 61
    1ad2:	09 94       	ijmp

00001ad4 <__epilogue_restores__>:
    1ad4:	2a 88       	ldd	r2, Y+18	; 0x12
    1ad6:	39 88       	ldd	r3, Y+17	; 0x11
    1ad8:	48 88       	ldd	r4, Y+16	; 0x10
    1ada:	5f 84       	ldd	r5, Y+15	; 0x0f
    1adc:	6e 84       	ldd	r6, Y+14	; 0x0e
    1ade:	7d 84       	ldd	r7, Y+13	; 0x0d
    1ae0:	8c 84       	ldd	r8, Y+12	; 0x0c
    1ae2:	9b 84       	ldd	r9, Y+11	; 0x0b
    1ae4:	aa 84       	ldd	r10, Y+10	; 0x0a
    1ae6:	b9 84       	ldd	r11, Y+9	; 0x09
    1ae8:	c8 84       	ldd	r12, Y+8	; 0x08
    1aea:	df 80       	ldd	r13, Y+7	; 0x07
    1aec:	ee 80       	ldd	r14, Y+6	; 0x06
    1aee:	fd 80       	ldd	r15, Y+5	; 0x05
    1af0:	0c 81       	ldd	r16, Y+4	; 0x04
    1af2:	1b 81       	ldd	r17, Y+3	; 0x03
    1af4:	aa 81       	ldd	r26, Y+2	; 0x02
    1af6:	b9 81       	ldd	r27, Y+1	; 0x01
    1af8:	ce 0f       	add	r28, r30
    1afa:	d1 1d       	adc	r29, r1
    1afc:	0f b6       	in	r0, 0x3f	; 63
    1afe:	f8 94       	cli
    1b00:	de bf       	out	0x3e, r29	; 62
    1b02:	0f be       	out	0x3f, r0	; 63
    1b04:	cd bf       	out	0x3d, r28	; 61
    1b06:	ed 01       	movw	r28, r26
    1b08:	08 95       	ret

00001b0a <itoa>:
    1b0a:	fb 01       	movw	r30, r22
    1b0c:	9f 01       	movw	r18, r30
    1b0e:	e8 94       	clt
    1b10:	42 30       	cpi	r20, 0x02	; 2
    1b12:	c4 f0       	brlt	.+48     	; 0x1b44 <itoa+0x3a>
    1b14:	45 32       	cpi	r20, 0x25	; 37
    1b16:	b4 f4       	brge	.+44     	; 0x1b44 <itoa+0x3a>
    1b18:	4a 30       	cpi	r20, 0x0A	; 10
    1b1a:	29 f4       	brne	.+10     	; 0x1b26 <itoa+0x1c>
    1b1c:	97 fb       	bst	r25, 7
    1b1e:	1e f4       	brtc	.+6      	; 0x1b26 <itoa+0x1c>
    1b20:	90 95       	com	r25
    1b22:	81 95       	neg	r24
    1b24:	9f 4f       	sbci	r25, 0xFF	; 255
    1b26:	64 2f       	mov	r22, r20
    1b28:	77 27       	eor	r23, r23
    1b2a:	0e 94 57 10 	call	0x20ae	; 0x20ae <__udivmodhi4>
    1b2e:	80 5d       	subi	r24, 0xD0	; 208
    1b30:	8a 33       	cpi	r24, 0x3A	; 58
    1b32:	0c f0       	brlt	.+2      	; 0x1b36 <itoa+0x2c>
    1b34:	89 5d       	subi	r24, 0xD9	; 217
    1b36:	81 93       	st	Z+, r24
    1b38:	cb 01       	movw	r24, r22
    1b3a:	00 97       	sbiw	r24, 0x00	; 0
    1b3c:	a1 f7       	brne	.-24     	; 0x1b26 <itoa+0x1c>
    1b3e:	16 f4       	brtc	.+4      	; 0x1b44 <itoa+0x3a>
    1b40:	5d e2       	ldi	r21, 0x2D	; 45
    1b42:	51 93       	st	Z+, r21
    1b44:	10 82       	st	Z, r1
    1b46:	c9 01       	movw	r24, r18
    1b48:	0c 94 bd 0f 	jmp	0x1f7a	; 0x1f7a <strrev>

00001b4c <sprintf>:
    1b4c:	ae e0       	ldi	r26, 0x0E	; 14
    1b4e:	b0 e0       	ldi	r27, 0x00	; 0
    1b50:	ec ea       	ldi	r30, 0xAC	; 172
    1b52:	fd e0       	ldi	r31, 0x0D	; 13
    1b54:	0c 94 5c 0d 	jmp	0x1ab8	; 0x1ab8 <__prologue_saves__+0x1c>
    1b58:	0d 89       	ldd	r16, Y+21	; 0x15
    1b5a:	1e 89       	ldd	r17, Y+22	; 0x16
    1b5c:	86 e0       	ldi	r24, 0x06	; 6
    1b5e:	8c 83       	std	Y+4, r24	; 0x04
    1b60:	1a 83       	std	Y+2, r17	; 0x02
    1b62:	09 83       	std	Y+1, r16	; 0x01
    1b64:	8f ef       	ldi	r24, 0xFF	; 255
    1b66:	9f e7       	ldi	r25, 0x7F	; 127
    1b68:	9e 83       	std	Y+6, r25	; 0x06
    1b6a:	8d 83       	std	Y+5, r24	; 0x05
    1b6c:	9e 01       	movw	r18, r28
    1b6e:	27 5e       	subi	r18, 0xE7	; 231
    1b70:	3f 4f       	sbci	r19, 0xFF	; 255
    1b72:	ce 01       	movw	r24, r28
    1b74:	01 96       	adiw	r24, 0x01	; 1
    1b76:	6f 89       	ldd	r22, Y+23	; 0x17
    1b78:	78 8d       	ldd	r23, Y+24	; 0x18
    1b7a:	a9 01       	movw	r20, r18
    1b7c:	0e 94 ca 0d 	call	0x1b94	; 0x1b94 <vfprintf>
    1b80:	2f 81       	ldd	r18, Y+7	; 0x07
    1b82:	38 85       	ldd	r19, Y+8	; 0x08
    1b84:	02 0f       	add	r16, r18
    1b86:	13 1f       	adc	r17, r19
    1b88:	f8 01       	movw	r30, r16
    1b8a:	10 82       	st	Z, r1
    1b8c:	2e 96       	adiw	r28, 0x0e	; 14
    1b8e:	e4 e0       	ldi	r30, 0x04	; 4
    1b90:	0c 94 78 0d 	jmp	0x1af0	; 0x1af0 <__epilogue_restores__+0x1c>

00001b94 <vfprintf>:
    1b94:	ab e0       	ldi	r26, 0x0B	; 11
    1b96:	b0 e0       	ldi	r27, 0x00	; 0
    1b98:	e0 ed       	ldi	r30, 0xD0	; 208
    1b9a:	fd e0       	ldi	r31, 0x0D	; 13
    1b9c:	0c 94 4e 0d 	jmp	0x1a9c	; 0x1a9c <__prologue_saves__>
    1ba0:	3c 01       	movw	r6, r24
    1ba2:	2b 01       	movw	r4, r22
    1ba4:	5a 01       	movw	r10, r20
    1ba6:	fc 01       	movw	r30, r24
    1ba8:	17 82       	std	Z+7, r1	; 0x07
    1baa:	16 82       	std	Z+6, r1	; 0x06
    1bac:	83 81       	ldd	r24, Z+3	; 0x03
    1bae:	81 fd       	sbrc	r24, 1
    1bb0:	03 c0       	rjmp	.+6      	; 0x1bb8 <vfprintf+0x24>
    1bb2:	6f ef       	ldi	r22, 0xFF	; 255
    1bb4:	7f ef       	ldi	r23, 0xFF	; 255
    1bb6:	c6 c1       	rjmp	.+908    	; 0x1f44 <vfprintf+0x3b0>
    1bb8:	9a e0       	ldi	r25, 0x0A	; 10
    1bba:	89 2e       	mov	r8, r25
    1bbc:	1e 01       	movw	r2, r28
    1bbe:	08 94       	sec
    1bc0:	21 1c       	adc	r2, r1
    1bc2:	31 1c       	adc	r3, r1
    1bc4:	f3 01       	movw	r30, r6
    1bc6:	23 81       	ldd	r18, Z+3	; 0x03
    1bc8:	f2 01       	movw	r30, r4
    1bca:	23 fd       	sbrc	r18, 3
    1bcc:	85 91       	lpm	r24, Z+
    1bce:	23 ff       	sbrs	r18, 3
    1bd0:	81 91       	ld	r24, Z+
    1bd2:	2f 01       	movw	r4, r30
    1bd4:	88 23       	and	r24, r24
    1bd6:	09 f4       	brne	.+2      	; 0x1bda <vfprintf+0x46>
    1bd8:	b2 c1       	rjmp	.+868    	; 0x1f3e <vfprintf+0x3aa>
    1bda:	85 32       	cpi	r24, 0x25	; 37
    1bdc:	39 f4       	brne	.+14     	; 0x1bec <vfprintf+0x58>
    1bde:	23 fd       	sbrc	r18, 3
    1be0:	85 91       	lpm	r24, Z+
    1be2:	23 ff       	sbrs	r18, 3
    1be4:	81 91       	ld	r24, Z+
    1be6:	2f 01       	movw	r4, r30
    1be8:	85 32       	cpi	r24, 0x25	; 37
    1bea:	29 f4       	brne	.+10     	; 0x1bf6 <vfprintf+0x62>
    1bec:	90 e0       	ldi	r25, 0x00	; 0
    1bee:	b3 01       	movw	r22, r6
    1bf0:	0e 94 cd 0f 	call	0x1f9a	; 0x1f9a <fputc>
    1bf4:	e7 cf       	rjmp	.-50     	; 0x1bc4 <vfprintf+0x30>
    1bf6:	98 2f       	mov	r25, r24
    1bf8:	ff 24       	eor	r15, r15
    1bfa:	ee 24       	eor	r14, r14
    1bfc:	99 24       	eor	r9, r9
    1bfe:	ff e1       	ldi	r31, 0x1F	; 31
    1c00:	ff 15       	cp	r31, r15
    1c02:	d0 f0       	brcs	.+52     	; 0x1c38 <vfprintf+0xa4>
    1c04:	9b 32       	cpi	r25, 0x2B	; 43
    1c06:	69 f0       	breq	.+26     	; 0x1c22 <vfprintf+0x8e>
    1c08:	9c 32       	cpi	r25, 0x2C	; 44
    1c0a:	28 f4       	brcc	.+10     	; 0x1c16 <vfprintf+0x82>
    1c0c:	90 32       	cpi	r25, 0x20	; 32
    1c0e:	59 f0       	breq	.+22     	; 0x1c26 <vfprintf+0x92>
    1c10:	93 32       	cpi	r25, 0x23	; 35
    1c12:	91 f4       	brne	.+36     	; 0x1c38 <vfprintf+0xa4>
    1c14:	0e c0       	rjmp	.+28     	; 0x1c32 <vfprintf+0x9e>
    1c16:	9d 32       	cpi	r25, 0x2D	; 45
    1c18:	49 f0       	breq	.+18     	; 0x1c2c <vfprintf+0x98>
    1c1a:	90 33       	cpi	r25, 0x30	; 48
    1c1c:	69 f4       	brne	.+26     	; 0x1c38 <vfprintf+0xa4>
    1c1e:	41 e0       	ldi	r20, 0x01	; 1
    1c20:	24 c0       	rjmp	.+72     	; 0x1c6a <vfprintf+0xd6>
    1c22:	52 e0       	ldi	r21, 0x02	; 2
    1c24:	f5 2a       	or	r15, r21
    1c26:	84 e0       	ldi	r24, 0x04	; 4
    1c28:	f8 2a       	or	r15, r24
    1c2a:	28 c0       	rjmp	.+80     	; 0x1c7c <vfprintf+0xe8>
    1c2c:	98 e0       	ldi	r25, 0x08	; 8
    1c2e:	f9 2a       	or	r15, r25
    1c30:	25 c0       	rjmp	.+74     	; 0x1c7c <vfprintf+0xe8>
    1c32:	e0 e1       	ldi	r30, 0x10	; 16
    1c34:	fe 2a       	or	r15, r30
    1c36:	22 c0       	rjmp	.+68     	; 0x1c7c <vfprintf+0xe8>
    1c38:	f7 fc       	sbrc	r15, 7
    1c3a:	29 c0       	rjmp	.+82     	; 0x1c8e <vfprintf+0xfa>
    1c3c:	89 2f       	mov	r24, r25
    1c3e:	80 53       	subi	r24, 0x30	; 48
    1c40:	8a 30       	cpi	r24, 0x0A	; 10
    1c42:	70 f4       	brcc	.+28     	; 0x1c60 <vfprintf+0xcc>
    1c44:	f6 fe       	sbrs	r15, 6
    1c46:	05 c0       	rjmp	.+10     	; 0x1c52 <vfprintf+0xbe>
    1c48:	98 9c       	mul	r9, r8
    1c4a:	90 2c       	mov	r9, r0
    1c4c:	11 24       	eor	r1, r1
    1c4e:	98 0e       	add	r9, r24
    1c50:	15 c0       	rjmp	.+42     	; 0x1c7c <vfprintf+0xe8>
    1c52:	e8 9c       	mul	r14, r8
    1c54:	e0 2c       	mov	r14, r0
    1c56:	11 24       	eor	r1, r1
    1c58:	e8 0e       	add	r14, r24
    1c5a:	f0 e2       	ldi	r31, 0x20	; 32
    1c5c:	ff 2a       	or	r15, r31
    1c5e:	0e c0       	rjmp	.+28     	; 0x1c7c <vfprintf+0xe8>
    1c60:	9e 32       	cpi	r25, 0x2E	; 46
    1c62:	29 f4       	brne	.+10     	; 0x1c6e <vfprintf+0xda>
    1c64:	f6 fc       	sbrc	r15, 6
    1c66:	6b c1       	rjmp	.+726    	; 0x1f3e <vfprintf+0x3aa>
    1c68:	40 e4       	ldi	r20, 0x40	; 64
    1c6a:	f4 2a       	or	r15, r20
    1c6c:	07 c0       	rjmp	.+14     	; 0x1c7c <vfprintf+0xe8>
    1c6e:	9c 36       	cpi	r25, 0x6C	; 108
    1c70:	19 f4       	brne	.+6      	; 0x1c78 <vfprintf+0xe4>
    1c72:	50 e8       	ldi	r21, 0x80	; 128
    1c74:	f5 2a       	or	r15, r21
    1c76:	02 c0       	rjmp	.+4      	; 0x1c7c <vfprintf+0xe8>
    1c78:	98 36       	cpi	r25, 0x68	; 104
    1c7a:	49 f4       	brne	.+18     	; 0x1c8e <vfprintf+0xfa>
    1c7c:	f2 01       	movw	r30, r4
    1c7e:	23 fd       	sbrc	r18, 3
    1c80:	95 91       	lpm	r25, Z+
    1c82:	23 ff       	sbrs	r18, 3
    1c84:	91 91       	ld	r25, Z+
    1c86:	2f 01       	movw	r4, r30
    1c88:	99 23       	and	r25, r25
    1c8a:	09 f0       	breq	.+2      	; 0x1c8e <vfprintf+0xfa>
    1c8c:	b8 cf       	rjmp	.-144    	; 0x1bfe <vfprintf+0x6a>
    1c8e:	89 2f       	mov	r24, r25
    1c90:	85 54       	subi	r24, 0x45	; 69
    1c92:	83 30       	cpi	r24, 0x03	; 3
    1c94:	18 f0       	brcs	.+6      	; 0x1c9c <vfprintf+0x108>
    1c96:	80 52       	subi	r24, 0x20	; 32
    1c98:	83 30       	cpi	r24, 0x03	; 3
    1c9a:	38 f4       	brcc	.+14     	; 0x1caa <vfprintf+0x116>
    1c9c:	44 e0       	ldi	r20, 0x04	; 4
    1c9e:	50 e0       	ldi	r21, 0x00	; 0
    1ca0:	a4 0e       	add	r10, r20
    1ca2:	b5 1e       	adc	r11, r21
    1ca4:	5f e3       	ldi	r21, 0x3F	; 63
    1ca6:	59 83       	std	Y+1, r21	; 0x01
    1ca8:	0f c0       	rjmp	.+30     	; 0x1cc8 <vfprintf+0x134>
    1caa:	93 36       	cpi	r25, 0x63	; 99
    1cac:	31 f0       	breq	.+12     	; 0x1cba <vfprintf+0x126>
    1cae:	93 37       	cpi	r25, 0x73	; 115
    1cb0:	79 f0       	breq	.+30     	; 0x1cd0 <vfprintf+0x13c>
    1cb2:	93 35       	cpi	r25, 0x53	; 83
    1cb4:	09 f0       	breq	.+2      	; 0x1cb8 <vfprintf+0x124>
    1cb6:	56 c0       	rjmp	.+172    	; 0x1d64 <vfprintf+0x1d0>
    1cb8:	20 c0       	rjmp	.+64     	; 0x1cfa <vfprintf+0x166>
    1cba:	f5 01       	movw	r30, r10
    1cbc:	80 81       	ld	r24, Z
    1cbe:	89 83       	std	Y+1, r24	; 0x01
    1cc0:	42 e0       	ldi	r20, 0x02	; 2
    1cc2:	50 e0       	ldi	r21, 0x00	; 0
    1cc4:	a4 0e       	add	r10, r20
    1cc6:	b5 1e       	adc	r11, r21
    1cc8:	61 01       	movw	r12, r2
    1cca:	01 e0       	ldi	r16, 0x01	; 1
    1ccc:	10 e0       	ldi	r17, 0x00	; 0
    1cce:	12 c0       	rjmp	.+36     	; 0x1cf4 <vfprintf+0x160>
    1cd0:	f5 01       	movw	r30, r10
    1cd2:	c0 80       	ld	r12, Z
    1cd4:	d1 80       	ldd	r13, Z+1	; 0x01
    1cd6:	f6 fc       	sbrc	r15, 6
    1cd8:	03 c0       	rjmp	.+6      	; 0x1ce0 <vfprintf+0x14c>
    1cda:	6f ef       	ldi	r22, 0xFF	; 255
    1cdc:	7f ef       	ldi	r23, 0xFF	; 255
    1cde:	02 c0       	rjmp	.+4      	; 0x1ce4 <vfprintf+0x150>
    1ce0:	69 2d       	mov	r22, r9
    1ce2:	70 e0       	ldi	r23, 0x00	; 0
    1ce4:	42 e0       	ldi	r20, 0x02	; 2
    1ce6:	50 e0       	ldi	r21, 0x00	; 0
    1ce8:	a4 0e       	add	r10, r20
    1cea:	b5 1e       	adc	r11, r21
    1cec:	c6 01       	movw	r24, r12
    1cee:	0e 94 b2 0f 	call	0x1f64	; 0x1f64 <strnlen>
    1cf2:	8c 01       	movw	r16, r24
    1cf4:	5f e7       	ldi	r21, 0x7F	; 127
    1cf6:	f5 22       	and	r15, r21
    1cf8:	14 c0       	rjmp	.+40     	; 0x1d22 <vfprintf+0x18e>
    1cfa:	f5 01       	movw	r30, r10
    1cfc:	c0 80       	ld	r12, Z
    1cfe:	d1 80       	ldd	r13, Z+1	; 0x01
    1d00:	f6 fc       	sbrc	r15, 6
    1d02:	03 c0       	rjmp	.+6      	; 0x1d0a <vfprintf+0x176>
    1d04:	6f ef       	ldi	r22, 0xFF	; 255
    1d06:	7f ef       	ldi	r23, 0xFF	; 255
    1d08:	02 c0       	rjmp	.+4      	; 0x1d0e <vfprintf+0x17a>
    1d0a:	69 2d       	mov	r22, r9
    1d0c:	70 e0       	ldi	r23, 0x00	; 0
    1d0e:	42 e0       	ldi	r20, 0x02	; 2
    1d10:	50 e0       	ldi	r21, 0x00	; 0
    1d12:	a4 0e       	add	r10, r20
    1d14:	b5 1e       	adc	r11, r21
    1d16:	c6 01       	movw	r24, r12
    1d18:	0e 94 a7 0f 	call	0x1f4e	; 0x1f4e <strnlen_P>
    1d1c:	8c 01       	movw	r16, r24
    1d1e:	50 e8       	ldi	r21, 0x80	; 128
    1d20:	f5 2a       	or	r15, r21
    1d22:	f3 fe       	sbrs	r15, 3
    1d24:	07 c0       	rjmp	.+14     	; 0x1d34 <vfprintf+0x1a0>
    1d26:	1a c0       	rjmp	.+52     	; 0x1d5c <vfprintf+0x1c8>
    1d28:	80 e2       	ldi	r24, 0x20	; 32
    1d2a:	90 e0       	ldi	r25, 0x00	; 0
    1d2c:	b3 01       	movw	r22, r6
    1d2e:	0e 94 cd 0f 	call	0x1f9a	; 0x1f9a <fputc>
    1d32:	ea 94       	dec	r14
    1d34:	8e 2d       	mov	r24, r14
    1d36:	90 e0       	ldi	r25, 0x00	; 0
    1d38:	08 17       	cp	r16, r24
    1d3a:	19 07       	cpc	r17, r25
    1d3c:	a8 f3       	brcs	.-22     	; 0x1d28 <vfprintf+0x194>
    1d3e:	0e c0       	rjmp	.+28     	; 0x1d5c <vfprintf+0x1c8>
    1d40:	f6 01       	movw	r30, r12
    1d42:	f7 fc       	sbrc	r15, 7
    1d44:	85 91       	lpm	r24, Z+
    1d46:	f7 fe       	sbrs	r15, 7
    1d48:	81 91       	ld	r24, Z+
    1d4a:	6f 01       	movw	r12, r30
    1d4c:	90 e0       	ldi	r25, 0x00	; 0
    1d4e:	b3 01       	movw	r22, r6
    1d50:	0e 94 cd 0f 	call	0x1f9a	; 0x1f9a <fputc>
    1d54:	e1 10       	cpse	r14, r1
    1d56:	ea 94       	dec	r14
    1d58:	01 50       	subi	r16, 0x01	; 1
    1d5a:	10 40       	sbci	r17, 0x00	; 0
    1d5c:	01 15       	cp	r16, r1
    1d5e:	11 05       	cpc	r17, r1
    1d60:	79 f7       	brne	.-34     	; 0x1d40 <vfprintf+0x1ac>
    1d62:	ea c0       	rjmp	.+468    	; 0x1f38 <vfprintf+0x3a4>
    1d64:	94 36       	cpi	r25, 0x64	; 100
    1d66:	11 f0       	breq	.+4      	; 0x1d6c <vfprintf+0x1d8>
    1d68:	99 36       	cpi	r25, 0x69	; 105
    1d6a:	69 f5       	brne	.+90     	; 0x1dc6 <vfprintf+0x232>
    1d6c:	f7 fe       	sbrs	r15, 7
    1d6e:	08 c0       	rjmp	.+16     	; 0x1d80 <vfprintf+0x1ec>
    1d70:	f5 01       	movw	r30, r10
    1d72:	20 81       	ld	r18, Z
    1d74:	31 81       	ldd	r19, Z+1	; 0x01
    1d76:	42 81       	ldd	r20, Z+2	; 0x02
    1d78:	53 81       	ldd	r21, Z+3	; 0x03
    1d7a:	84 e0       	ldi	r24, 0x04	; 4
    1d7c:	90 e0       	ldi	r25, 0x00	; 0
    1d7e:	0a c0       	rjmp	.+20     	; 0x1d94 <vfprintf+0x200>
    1d80:	f5 01       	movw	r30, r10
    1d82:	80 81       	ld	r24, Z
    1d84:	91 81       	ldd	r25, Z+1	; 0x01
    1d86:	9c 01       	movw	r18, r24
    1d88:	44 27       	eor	r20, r20
    1d8a:	37 fd       	sbrc	r19, 7
    1d8c:	40 95       	com	r20
    1d8e:	54 2f       	mov	r21, r20
    1d90:	82 e0       	ldi	r24, 0x02	; 2
    1d92:	90 e0       	ldi	r25, 0x00	; 0
    1d94:	a8 0e       	add	r10, r24
    1d96:	b9 1e       	adc	r11, r25
    1d98:	9f e6       	ldi	r25, 0x6F	; 111
    1d9a:	f9 22       	and	r15, r25
    1d9c:	57 ff       	sbrs	r21, 7
    1d9e:	09 c0       	rjmp	.+18     	; 0x1db2 <vfprintf+0x21e>
    1da0:	50 95       	com	r21
    1da2:	40 95       	com	r20
    1da4:	30 95       	com	r19
    1da6:	21 95       	neg	r18
    1da8:	3f 4f       	sbci	r19, 0xFF	; 255
    1daa:	4f 4f       	sbci	r20, 0xFF	; 255
    1dac:	5f 4f       	sbci	r21, 0xFF	; 255
    1dae:	e0 e8       	ldi	r30, 0x80	; 128
    1db0:	fe 2a       	or	r15, r30
    1db2:	ca 01       	movw	r24, r20
    1db4:	b9 01       	movw	r22, r18
    1db6:	a1 01       	movw	r20, r2
    1db8:	2a e0       	ldi	r18, 0x0A	; 10
    1dba:	30 e0       	ldi	r19, 0x00	; 0
    1dbc:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <__ultoa_invert>
    1dc0:	d8 2e       	mov	r13, r24
    1dc2:	d2 18       	sub	r13, r2
    1dc4:	40 c0       	rjmp	.+128    	; 0x1e46 <vfprintf+0x2b2>
    1dc6:	95 37       	cpi	r25, 0x75	; 117
    1dc8:	29 f4       	brne	.+10     	; 0x1dd4 <vfprintf+0x240>
    1dca:	1f 2d       	mov	r17, r15
    1dcc:	1f 7e       	andi	r17, 0xEF	; 239
    1dce:	2a e0       	ldi	r18, 0x0A	; 10
    1dd0:	30 e0       	ldi	r19, 0x00	; 0
    1dd2:	1d c0       	rjmp	.+58     	; 0x1e0e <vfprintf+0x27a>
    1dd4:	1f 2d       	mov	r17, r15
    1dd6:	19 7f       	andi	r17, 0xF9	; 249
    1dd8:	9f 36       	cpi	r25, 0x6F	; 111
    1dda:	61 f0       	breq	.+24     	; 0x1df4 <vfprintf+0x260>
    1ddc:	90 37       	cpi	r25, 0x70	; 112
    1dde:	20 f4       	brcc	.+8      	; 0x1de8 <vfprintf+0x254>
    1de0:	98 35       	cpi	r25, 0x58	; 88
    1de2:	09 f0       	breq	.+2      	; 0x1de6 <vfprintf+0x252>
    1de4:	ac c0       	rjmp	.+344    	; 0x1f3e <vfprintf+0x3aa>
    1de6:	0f c0       	rjmp	.+30     	; 0x1e06 <vfprintf+0x272>
    1de8:	90 37       	cpi	r25, 0x70	; 112
    1dea:	39 f0       	breq	.+14     	; 0x1dfa <vfprintf+0x266>
    1dec:	98 37       	cpi	r25, 0x78	; 120
    1dee:	09 f0       	breq	.+2      	; 0x1df2 <vfprintf+0x25e>
    1df0:	a6 c0       	rjmp	.+332    	; 0x1f3e <vfprintf+0x3aa>
    1df2:	04 c0       	rjmp	.+8      	; 0x1dfc <vfprintf+0x268>
    1df4:	28 e0       	ldi	r18, 0x08	; 8
    1df6:	30 e0       	ldi	r19, 0x00	; 0
    1df8:	0a c0       	rjmp	.+20     	; 0x1e0e <vfprintf+0x27a>
    1dfa:	10 61       	ori	r17, 0x10	; 16
    1dfc:	14 fd       	sbrc	r17, 4
    1dfe:	14 60       	ori	r17, 0x04	; 4
    1e00:	20 e1       	ldi	r18, 0x10	; 16
    1e02:	30 e0       	ldi	r19, 0x00	; 0
    1e04:	04 c0       	rjmp	.+8      	; 0x1e0e <vfprintf+0x27a>
    1e06:	14 fd       	sbrc	r17, 4
    1e08:	16 60       	ori	r17, 0x06	; 6
    1e0a:	20 e1       	ldi	r18, 0x10	; 16
    1e0c:	32 e0       	ldi	r19, 0x02	; 2
    1e0e:	17 ff       	sbrs	r17, 7
    1e10:	08 c0       	rjmp	.+16     	; 0x1e22 <vfprintf+0x28e>
    1e12:	f5 01       	movw	r30, r10
    1e14:	60 81       	ld	r22, Z
    1e16:	71 81       	ldd	r23, Z+1	; 0x01
    1e18:	82 81       	ldd	r24, Z+2	; 0x02
    1e1a:	93 81       	ldd	r25, Z+3	; 0x03
    1e1c:	44 e0       	ldi	r20, 0x04	; 4
    1e1e:	50 e0       	ldi	r21, 0x00	; 0
    1e20:	08 c0       	rjmp	.+16     	; 0x1e32 <vfprintf+0x29e>
    1e22:	f5 01       	movw	r30, r10
    1e24:	80 81       	ld	r24, Z
    1e26:	91 81       	ldd	r25, Z+1	; 0x01
    1e28:	bc 01       	movw	r22, r24
    1e2a:	80 e0       	ldi	r24, 0x00	; 0
    1e2c:	90 e0       	ldi	r25, 0x00	; 0
    1e2e:	42 e0       	ldi	r20, 0x02	; 2
    1e30:	50 e0       	ldi	r21, 0x00	; 0
    1e32:	a4 0e       	add	r10, r20
    1e34:	b5 1e       	adc	r11, r21
    1e36:	a1 01       	movw	r20, r2
    1e38:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <__ultoa_invert>
    1e3c:	d8 2e       	mov	r13, r24
    1e3e:	d2 18       	sub	r13, r2
    1e40:	8f e7       	ldi	r24, 0x7F	; 127
    1e42:	f8 2e       	mov	r15, r24
    1e44:	f1 22       	and	r15, r17
    1e46:	f6 fe       	sbrs	r15, 6
    1e48:	0b c0       	rjmp	.+22     	; 0x1e60 <vfprintf+0x2cc>
    1e4a:	5e ef       	ldi	r21, 0xFE	; 254
    1e4c:	f5 22       	and	r15, r21
    1e4e:	d9 14       	cp	r13, r9
    1e50:	38 f4       	brcc	.+14     	; 0x1e60 <vfprintf+0x2cc>
    1e52:	f4 fe       	sbrs	r15, 4
    1e54:	07 c0       	rjmp	.+14     	; 0x1e64 <vfprintf+0x2d0>
    1e56:	f2 fc       	sbrc	r15, 2
    1e58:	05 c0       	rjmp	.+10     	; 0x1e64 <vfprintf+0x2d0>
    1e5a:	8f ee       	ldi	r24, 0xEF	; 239
    1e5c:	f8 22       	and	r15, r24
    1e5e:	02 c0       	rjmp	.+4      	; 0x1e64 <vfprintf+0x2d0>
    1e60:	1d 2d       	mov	r17, r13
    1e62:	01 c0       	rjmp	.+2      	; 0x1e66 <vfprintf+0x2d2>
    1e64:	19 2d       	mov	r17, r9
    1e66:	f4 fe       	sbrs	r15, 4
    1e68:	0d c0       	rjmp	.+26     	; 0x1e84 <vfprintf+0x2f0>
    1e6a:	fe 01       	movw	r30, r28
    1e6c:	ed 0d       	add	r30, r13
    1e6e:	f1 1d       	adc	r31, r1
    1e70:	80 81       	ld	r24, Z
    1e72:	80 33       	cpi	r24, 0x30	; 48
    1e74:	19 f4       	brne	.+6      	; 0x1e7c <vfprintf+0x2e8>
    1e76:	99 ee       	ldi	r25, 0xE9	; 233
    1e78:	f9 22       	and	r15, r25
    1e7a:	08 c0       	rjmp	.+16     	; 0x1e8c <vfprintf+0x2f8>
    1e7c:	1f 5f       	subi	r17, 0xFF	; 255
    1e7e:	f2 fe       	sbrs	r15, 2
    1e80:	05 c0       	rjmp	.+10     	; 0x1e8c <vfprintf+0x2f8>
    1e82:	03 c0       	rjmp	.+6      	; 0x1e8a <vfprintf+0x2f6>
    1e84:	8f 2d       	mov	r24, r15
    1e86:	86 78       	andi	r24, 0x86	; 134
    1e88:	09 f0       	breq	.+2      	; 0x1e8c <vfprintf+0x2f8>
    1e8a:	1f 5f       	subi	r17, 0xFF	; 255
    1e8c:	0f 2d       	mov	r16, r15
    1e8e:	f3 fc       	sbrc	r15, 3
    1e90:	14 c0       	rjmp	.+40     	; 0x1eba <vfprintf+0x326>
    1e92:	f0 fe       	sbrs	r15, 0
    1e94:	0f c0       	rjmp	.+30     	; 0x1eb4 <vfprintf+0x320>
    1e96:	1e 15       	cp	r17, r14
    1e98:	10 f0       	brcs	.+4      	; 0x1e9e <vfprintf+0x30a>
    1e9a:	9d 2c       	mov	r9, r13
    1e9c:	0b c0       	rjmp	.+22     	; 0x1eb4 <vfprintf+0x320>
    1e9e:	9d 2c       	mov	r9, r13
    1ea0:	9e 0c       	add	r9, r14
    1ea2:	91 1a       	sub	r9, r17
    1ea4:	1e 2d       	mov	r17, r14
    1ea6:	06 c0       	rjmp	.+12     	; 0x1eb4 <vfprintf+0x320>
    1ea8:	80 e2       	ldi	r24, 0x20	; 32
    1eaa:	90 e0       	ldi	r25, 0x00	; 0
    1eac:	b3 01       	movw	r22, r6
    1eae:	0e 94 cd 0f 	call	0x1f9a	; 0x1f9a <fputc>
    1eb2:	1f 5f       	subi	r17, 0xFF	; 255
    1eb4:	1e 15       	cp	r17, r14
    1eb6:	c0 f3       	brcs	.-16     	; 0x1ea8 <vfprintf+0x314>
    1eb8:	04 c0       	rjmp	.+8      	; 0x1ec2 <vfprintf+0x32e>
    1eba:	1e 15       	cp	r17, r14
    1ebc:	10 f4       	brcc	.+4      	; 0x1ec2 <vfprintf+0x32e>
    1ebe:	e1 1a       	sub	r14, r17
    1ec0:	01 c0       	rjmp	.+2      	; 0x1ec4 <vfprintf+0x330>
    1ec2:	ee 24       	eor	r14, r14
    1ec4:	04 ff       	sbrs	r16, 4
    1ec6:	0f c0       	rjmp	.+30     	; 0x1ee6 <vfprintf+0x352>
    1ec8:	80 e3       	ldi	r24, 0x30	; 48
    1eca:	90 e0       	ldi	r25, 0x00	; 0
    1ecc:	b3 01       	movw	r22, r6
    1ece:	0e 94 cd 0f 	call	0x1f9a	; 0x1f9a <fputc>
    1ed2:	02 ff       	sbrs	r16, 2
    1ed4:	1d c0       	rjmp	.+58     	; 0x1f10 <vfprintf+0x37c>
    1ed6:	01 fd       	sbrc	r16, 1
    1ed8:	03 c0       	rjmp	.+6      	; 0x1ee0 <vfprintf+0x34c>
    1eda:	88 e7       	ldi	r24, 0x78	; 120
    1edc:	90 e0       	ldi	r25, 0x00	; 0
    1ede:	0e c0       	rjmp	.+28     	; 0x1efc <vfprintf+0x368>
    1ee0:	88 e5       	ldi	r24, 0x58	; 88
    1ee2:	90 e0       	ldi	r25, 0x00	; 0
    1ee4:	0b c0       	rjmp	.+22     	; 0x1efc <vfprintf+0x368>
    1ee6:	80 2f       	mov	r24, r16
    1ee8:	86 78       	andi	r24, 0x86	; 134
    1eea:	91 f0       	breq	.+36     	; 0x1f10 <vfprintf+0x37c>
    1eec:	01 ff       	sbrs	r16, 1
    1eee:	02 c0       	rjmp	.+4      	; 0x1ef4 <vfprintf+0x360>
    1ef0:	8b e2       	ldi	r24, 0x2B	; 43
    1ef2:	01 c0       	rjmp	.+2      	; 0x1ef6 <vfprintf+0x362>
    1ef4:	80 e2       	ldi	r24, 0x20	; 32
    1ef6:	f7 fc       	sbrc	r15, 7
    1ef8:	8d e2       	ldi	r24, 0x2D	; 45
    1efa:	90 e0       	ldi	r25, 0x00	; 0
    1efc:	b3 01       	movw	r22, r6
    1efe:	0e 94 cd 0f 	call	0x1f9a	; 0x1f9a <fputc>
    1f02:	06 c0       	rjmp	.+12     	; 0x1f10 <vfprintf+0x37c>
    1f04:	80 e3       	ldi	r24, 0x30	; 48
    1f06:	90 e0       	ldi	r25, 0x00	; 0
    1f08:	b3 01       	movw	r22, r6
    1f0a:	0e 94 cd 0f 	call	0x1f9a	; 0x1f9a <fputc>
    1f0e:	9a 94       	dec	r9
    1f10:	d9 14       	cp	r13, r9
    1f12:	c0 f3       	brcs	.-16     	; 0x1f04 <vfprintf+0x370>
    1f14:	da 94       	dec	r13
    1f16:	f1 01       	movw	r30, r2
    1f18:	ed 0d       	add	r30, r13
    1f1a:	f1 1d       	adc	r31, r1
    1f1c:	80 81       	ld	r24, Z
    1f1e:	90 e0       	ldi	r25, 0x00	; 0
    1f20:	b3 01       	movw	r22, r6
    1f22:	0e 94 cd 0f 	call	0x1f9a	; 0x1f9a <fputc>
    1f26:	dd 20       	and	r13, r13
    1f28:	a9 f7       	brne	.-22     	; 0x1f14 <vfprintf+0x380>
    1f2a:	06 c0       	rjmp	.+12     	; 0x1f38 <vfprintf+0x3a4>
    1f2c:	80 e2       	ldi	r24, 0x20	; 32
    1f2e:	90 e0       	ldi	r25, 0x00	; 0
    1f30:	b3 01       	movw	r22, r6
    1f32:	0e 94 cd 0f 	call	0x1f9a	; 0x1f9a <fputc>
    1f36:	ea 94       	dec	r14
    1f38:	ee 20       	and	r14, r14
    1f3a:	c1 f7       	brne	.-16     	; 0x1f2c <vfprintf+0x398>
    1f3c:	43 ce       	rjmp	.-890    	; 0x1bc4 <vfprintf+0x30>
    1f3e:	f3 01       	movw	r30, r6
    1f40:	66 81       	ldd	r22, Z+6	; 0x06
    1f42:	77 81       	ldd	r23, Z+7	; 0x07
    1f44:	cb 01       	movw	r24, r22
    1f46:	2b 96       	adiw	r28, 0x0b	; 11
    1f48:	e2 e1       	ldi	r30, 0x12	; 18
    1f4a:	0c 94 6a 0d 	jmp	0x1ad4	; 0x1ad4 <__epilogue_restores__>

00001f4e <strnlen_P>:
    1f4e:	fc 01       	movw	r30, r24
    1f50:	05 90       	lpm	r0, Z+
    1f52:	61 50       	subi	r22, 0x01	; 1
    1f54:	70 40       	sbci	r23, 0x00	; 0
    1f56:	01 10       	cpse	r0, r1
    1f58:	d8 f7       	brcc	.-10     	; 0x1f50 <strnlen_P+0x2>
    1f5a:	80 95       	com	r24
    1f5c:	90 95       	com	r25
    1f5e:	8e 0f       	add	r24, r30
    1f60:	9f 1f       	adc	r25, r31
    1f62:	08 95       	ret

00001f64 <strnlen>:
    1f64:	fc 01       	movw	r30, r24
    1f66:	61 50       	subi	r22, 0x01	; 1
    1f68:	70 40       	sbci	r23, 0x00	; 0
    1f6a:	01 90       	ld	r0, Z+
    1f6c:	01 10       	cpse	r0, r1
    1f6e:	d8 f7       	brcc	.-10     	; 0x1f66 <strnlen+0x2>
    1f70:	80 95       	com	r24
    1f72:	90 95       	com	r25
    1f74:	8e 0f       	add	r24, r30
    1f76:	9f 1f       	adc	r25, r31
    1f78:	08 95       	ret

00001f7a <strrev>:
    1f7a:	dc 01       	movw	r26, r24
    1f7c:	fc 01       	movw	r30, r24
    1f7e:	67 2f       	mov	r22, r23
    1f80:	71 91       	ld	r23, Z+
    1f82:	77 23       	and	r23, r23
    1f84:	e1 f7       	brne	.-8      	; 0x1f7e <strrev+0x4>
    1f86:	32 97       	sbiw	r30, 0x02	; 2
    1f88:	04 c0       	rjmp	.+8      	; 0x1f92 <strrev+0x18>
    1f8a:	7c 91       	ld	r23, X
    1f8c:	6d 93       	st	X+, r22
    1f8e:	70 83       	st	Z, r23
    1f90:	62 91       	ld	r22, -Z
    1f92:	ae 17       	cp	r26, r30
    1f94:	bf 07       	cpc	r27, r31
    1f96:	c8 f3       	brcs	.-14     	; 0x1f8a <strrev+0x10>
    1f98:	08 95       	ret

00001f9a <fputc>:
    1f9a:	0f 93       	push	r16
    1f9c:	1f 93       	push	r17
    1f9e:	cf 93       	push	r28
    1fa0:	df 93       	push	r29
    1fa2:	8c 01       	movw	r16, r24
    1fa4:	eb 01       	movw	r28, r22
    1fa6:	8b 81       	ldd	r24, Y+3	; 0x03
    1fa8:	81 ff       	sbrs	r24, 1
    1faa:	1b c0       	rjmp	.+54     	; 0x1fe2 <fputc+0x48>
    1fac:	82 ff       	sbrs	r24, 2
    1fae:	0d c0       	rjmp	.+26     	; 0x1fca <fputc+0x30>
    1fb0:	2e 81       	ldd	r18, Y+6	; 0x06
    1fb2:	3f 81       	ldd	r19, Y+7	; 0x07
    1fb4:	8c 81       	ldd	r24, Y+4	; 0x04
    1fb6:	9d 81       	ldd	r25, Y+5	; 0x05
    1fb8:	28 17       	cp	r18, r24
    1fba:	39 07       	cpc	r19, r25
    1fbc:	64 f4       	brge	.+24     	; 0x1fd6 <fputc+0x3c>
    1fbe:	e8 81       	ld	r30, Y
    1fc0:	f9 81       	ldd	r31, Y+1	; 0x01
    1fc2:	01 93       	st	Z+, r16
    1fc4:	f9 83       	std	Y+1, r31	; 0x01
    1fc6:	e8 83       	st	Y, r30
    1fc8:	06 c0       	rjmp	.+12     	; 0x1fd6 <fputc+0x3c>
    1fca:	e8 85       	ldd	r30, Y+8	; 0x08
    1fcc:	f9 85       	ldd	r31, Y+9	; 0x09
    1fce:	80 2f       	mov	r24, r16
    1fd0:	09 95       	icall
    1fd2:	89 2b       	or	r24, r25
    1fd4:	31 f4       	brne	.+12     	; 0x1fe2 <fputc+0x48>
    1fd6:	8e 81       	ldd	r24, Y+6	; 0x06
    1fd8:	9f 81       	ldd	r25, Y+7	; 0x07
    1fda:	01 96       	adiw	r24, 0x01	; 1
    1fdc:	9f 83       	std	Y+7, r25	; 0x07
    1fde:	8e 83       	std	Y+6, r24	; 0x06
    1fe0:	02 c0       	rjmp	.+4      	; 0x1fe6 <fputc+0x4c>
    1fe2:	0f ef       	ldi	r16, 0xFF	; 255
    1fe4:	1f ef       	ldi	r17, 0xFF	; 255
    1fe6:	c8 01       	movw	r24, r16
    1fe8:	df 91       	pop	r29
    1fea:	cf 91       	pop	r28
    1fec:	1f 91       	pop	r17
    1fee:	0f 91       	pop	r16
    1ff0:	08 95       	ret

00001ff2 <__ultoa_invert>:
    1ff2:	fa 01       	movw	r30, r20
    1ff4:	aa 27       	eor	r26, r26
    1ff6:	28 30       	cpi	r18, 0x08	; 8
    1ff8:	51 f1       	breq	.+84     	; 0x204e <__ultoa_invert+0x5c>
    1ffa:	20 31       	cpi	r18, 0x10	; 16
    1ffc:	81 f1       	breq	.+96     	; 0x205e <__ultoa_invert+0x6c>
    1ffe:	e8 94       	clt
    2000:	6f 93       	push	r22
    2002:	6e 7f       	andi	r22, 0xFE	; 254
    2004:	6e 5f       	subi	r22, 0xFE	; 254
    2006:	7f 4f       	sbci	r23, 0xFF	; 255
    2008:	8f 4f       	sbci	r24, 0xFF	; 255
    200a:	9f 4f       	sbci	r25, 0xFF	; 255
    200c:	af 4f       	sbci	r26, 0xFF	; 255
    200e:	b1 e0       	ldi	r27, 0x01	; 1
    2010:	3e d0       	rcall	.+124    	; 0x208e <__ultoa_invert+0x9c>
    2012:	b4 e0       	ldi	r27, 0x04	; 4
    2014:	3c d0       	rcall	.+120    	; 0x208e <__ultoa_invert+0x9c>
    2016:	67 0f       	add	r22, r23
    2018:	78 1f       	adc	r23, r24
    201a:	89 1f       	adc	r24, r25
    201c:	9a 1f       	adc	r25, r26
    201e:	a1 1d       	adc	r26, r1
    2020:	68 0f       	add	r22, r24
    2022:	79 1f       	adc	r23, r25
    2024:	8a 1f       	adc	r24, r26
    2026:	91 1d       	adc	r25, r1
    2028:	a1 1d       	adc	r26, r1
    202a:	6a 0f       	add	r22, r26
    202c:	71 1d       	adc	r23, r1
    202e:	81 1d       	adc	r24, r1
    2030:	91 1d       	adc	r25, r1
    2032:	a1 1d       	adc	r26, r1
    2034:	20 d0       	rcall	.+64     	; 0x2076 <__ultoa_invert+0x84>
    2036:	09 f4       	brne	.+2      	; 0x203a <__ultoa_invert+0x48>
    2038:	68 94       	set
    203a:	3f 91       	pop	r19
    203c:	2a e0       	ldi	r18, 0x0A	; 10
    203e:	26 9f       	mul	r18, r22
    2040:	11 24       	eor	r1, r1
    2042:	30 19       	sub	r19, r0
    2044:	30 5d       	subi	r19, 0xD0	; 208
    2046:	31 93       	st	Z+, r19
    2048:	de f6       	brtc	.-74     	; 0x2000 <__ultoa_invert+0xe>
    204a:	cf 01       	movw	r24, r30
    204c:	08 95       	ret
    204e:	46 2f       	mov	r20, r22
    2050:	47 70       	andi	r20, 0x07	; 7
    2052:	40 5d       	subi	r20, 0xD0	; 208
    2054:	41 93       	st	Z+, r20
    2056:	b3 e0       	ldi	r27, 0x03	; 3
    2058:	0f d0       	rcall	.+30     	; 0x2078 <__ultoa_invert+0x86>
    205a:	c9 f7       	brne	.-14     	; 0x204e <__ultoa_invert+0x5c>
    205c:	f6 cf       	rjmp	.-20     	; 0x204a <__ultoa_invert+0x58>
    205e:	46 2f       	mov	r20, r22
    2060:	4f 70       	andi	r20, 0x0F	; 15
    2062:	40 5d       	subi	r20, 0xD0	; 208
    2064:	4a 33       	cpi	r20, 0x3A	; 58
    2066:	18 f0       	brcs	.+6      	; 0x206e <__ultoa_invert+0x7c>
    2068:	49 5d       	subi	r20, 0xD9	; 217
    206a:	31 fd       	sbrc	r19, 1
    206c:	40 52       	subi	r20, 0x20	; 32
    206e:	41 93       	st	Z+, r20
    2070:	02 d0       	rcall	.+4      	; 0x2076 <__ultoa_invert+0x84>
    2072:	a9 f7       	brne	.-22     	; 0x205e <__ultoa_invert+0x6c>
    2074:	ea cf       	rjmp	.-44     	; 0x204a <__ultoa_invert+0x58>
    2076:	b4 e0       	ldi	r27, 0x04	; 4
    2078:	a6 95       	lsr	r26
    207a:	97 95       	ror	r25
    207c:	87 95       	ror	r24
    207e:	77 95       	ror	r23
    2080:	67 95       	ror	r22
    2082:	ba 95       	dec	r27
    2084:	c9 f7       	brne	.-14     	; 0x2078 <__ultoa_invert+0x86>
    2086:	00 97       	sbiw	r24, 0x00	; 0
    2088:	61 05       	cpc	r22, r1
    208a:	71 05       	cpc	r23, r1
    208c:	08 95       	ret
    208e:	9b 01       	movw	r18, r22
    2090:	ac 01       	movw	r20, r24
    2092:	0a 2e       	mov	r0, r26
    2094:	06 94       	lsr	r0
    2096:	57 95       	ror	r21
    2098:	47 95       	ror	r20
    209a:	37 95       	ror	r19
    209c:	27 95       	ror	r18
    209e:	ba 95       	dec	r27
    20a0:	c9 f7       	brne	.-14     	; 0x2094 <__ultoa_invert+0xa2>
    20a2:	62 0f       	add	r22, r18
    20a4:	73 1f       	adc	r23, r19
    20a6:	84 1f       	adc	r24, r20
    20a8:	95 1f       	adc	r25, r21
    20aa:	a0 1d       	adc	r26, r0
    20ac:	08 95       	ret

000020ae <__udivmodhi4>:
    20ae:	aa 1b       	sub	r26, r26
    20b0:	bb 1b       	sub	r27, r27
    20b2:	51 e1       	ldi	r21, 0x11	; 17
    20b4:	07 c0       	rjmp	.+14     	; 0x20c4 <__udivmodhi4_ep>

000020b6 <__udivmodhi4_loop>:
    20b6:	aa 1f       	adc	r26, r26
    20b8:	bb 1f       	adc	r27, r27
    20ba:	a6 17       	cp	r26, r22
    20bc:	b7 07       	cpc	r27, r23
    20be:	10 f0       	brcs	.+4      	; 0x20c4 <__udivmodhi4_ep>
    20c0:	a6 1b       	sub	r26, r22
    20c2:	b7 0b       	sbc	r27, r23

000020c4 <__udivmodhi4_ep>:
    20c4:	88 1f       	adc	r24, r24
    20c6:	99 1f       	adc	r25, r25
    20c8:	5a 95       	dec	r21
    20ca:	a9 f7       	brne	.-22     	; 0x20b6 <__udivmodhi4_loop>
    20cc:	80 95       	com	r24
    20ce:	90 95       	com	r25
    20d0:	bc 01       	movw	r22, r24
    20d2:	cd 01       	movw	r24, r26
    20d4:	08 95       	ret

000020d6 <_exit>:
    20d6:	f8 94       	cli

000020d8 <__stop_program>:
    20d8:	ff cf       	rjmp	.-2      	; 0x20d8 <__stop_program>
